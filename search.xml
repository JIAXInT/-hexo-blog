<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript 引擎</title>
      <link href="/2022/07/07/JavaScript%E5%BC%95%E6%93%8E/"/>
      <url>/2022/07/07/JavaScript%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="一、浏览器工作原理"><a href="#一、浏览器工作原理" class="headerlink" title="一、浏览器工作原理"></a>一、浏览器工作原理</h1><p>浏览器执行过程：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/21707377/1638355192875-ac69b240-3bea-4057-a517-cf6669b37f43.png#clientId=uf3c6c3d5-c0ad-4&from=paste&height=426&id=u06d06c92&margin=%5Bobject%20Object%5D&name=image.png&originHeight=568&originWidth=1345&originalType=binary&ratio=1&size=449837&status=done&style=shadow&taskId=uf9ed310b-45db-4a4e-8046-de278b8713a&width=1009" alt="image.png"></p><h1 id="二、认识浏览器内核"><a href="#二、认识浏览器内核" class="headerlink" title="二、认识浏览器内核"></a>二、认识浏览器内核</h1><h3 id="我们经常会说：不同的浏览器有不同的内核组成"><a href="#我们经常会说：不同的浏览器有不同的内核组成" class="headerlink" title="我们经常会说：不同的浏览器有不同的内核组成"></a>我们经常会说：不同的浏览器有不同的内核组成</h3><ul><li>Gecko：早期被 Netscape 和 Mozilla Firefox 浏览器浏览器使用；</li><li>Trident：微软开发，被 IE4~IE11 浏览器使用，但是 Edge 浏览器已经转向 Blink；</li><li>Webkit：苹果基于 KHTML 开发、开源的，用于 Safari，Google Chrome 之前也在使用；</li><li>Blink：是 Webkit 的一个分支，Google 开发，目前应用于 Google Chrome、Edge、Opera 等；</li><li>等等…</li></ul><h3 id="事实上，我们经常说的浏览器内核指的是浏览器的排版引擎："><a href="#事实上，我们经常说的浏览器内核指的是浏览器的排版引擎：" class="headerlink" title="事实上，我们经常说的浏览器内核指的是浏览器的排版引擎："></a>事实上，我们经常说的浏览器内核指的是浏览器的排版引擎：</h3><p><strong>排版引擎</strong>（layout engine），也称为<strong>浏览器引擎</strong>（browser engine）、<strong>页面渲染引擎</strong>（rendering engine）<br>或<strong>样版引擎</strong>。</p><h1 id="三、浏览器渲染过程"><a href="#三、浏览器渲染过程" class="headerlink" title="三、浏览器渲染过程"></a>三、浏览器渲染过程</h1><h3 id="但是在这个执行过程中，HTML-解析的时候遇到了-JavaScript-标签，应该怎么办呢？"><a href="#但是在这个执行过程中，HTML-解析的时候遇到了-JavaScript-标签，应该怎么办呢？" class="headerlink" title="但是在这个执行过程中，HTML 解析的时候遇到了 JavaScript 标签，应该怎么办呢？"></a>但是在这个执行过程中，HTML 解析的时候遇到了 JavaScript 标签，应该怎么办呢？</h3><p><strong>会停止解析 HTML，而去加载和执行 JavaScript 代码；</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/png/21707377/1638355474986-fcfe3f2e-4f5d-4f15-a54d-e2675b2a9d1b.png#clientId=uf3c6c3d5-c0ad-4&from=paste&id=u3e5fa593&margin=%5Bobject%20Object%5D&name=image.png&originHeight=423&originWidth=974&originalType=binary&ratio=1&size=88111&status=done&style=shadow&taskId=ubeed8532-1dd3-4f68-93fe-5f8e95077d2" alt="image.png"></p><h3 id="那么，JavaScript-代码由谁来执行呢？"><a href="#那么，JavaScript-代码由谁来执行呢？" class="headerlink" title="那么，JavaScript 代码由谁来执行呢？"></a>那么，JavaScript 代码由谁来执行呢？</h3><p><strong>答案是：JavaScript 引擎</strong></p><h1 id="四、认识-JavaScript-引擎"><a href="#四、认识-JavaScript-引擎" class="headerlink" title="四、认识 JavaScript 引擎"></a>四、认识 JavaScript 引擎</h1><h3 id="为什么需要-JavaScript-引擎呢？"><a href="#为什么需要-JavaScript-引擎呢？" class="headerlink" title="为什么需要 JavaScript 引擎呢？"></a>为什么需要 JavaScript 引擎呢？</h3><pre><code>  - 我们前面说过，高级的编程语言都是需要转成最终的机器指令来执行的；  - 事实上我们编写的JavaScript无论你交给浏览器或者Node执行，最后都是需要被CPU执行的；  - 但是CPU只认识自己的指令集，实际上是机器语言，才能被CPU所执行；  - 所以我们需要JavaScript引擎帮助我们将JavaScript代码翻译成CPU指令来执行；</code></pre><h3 id="比较常见的-JavaScript-引擎都有哪些呢？"><a href="#比较常见的-JavaScript-引擎都有哪些呢？" class="headerlink" title="比较常见的 JavaScript 引擎都有哪些呢？"></a>比较常见的 JavaScript 引擎都有哪些呢？</h3><pre><code>  - **SpiderMonkey**：第一款JavaScript引擎，由Brendan Eich开发（也就是JavaScript作者）；  - **Chakra**：微软开发，用于IT浏览器；  - **JavaScriptCore：**WebKit中的JavaScript引擎，Apple公司开发；  - **V8**：Google开发的强大JavaScript引擎，也帮助Chrome从众多浏览器中脱颖而出；  - 等等…</code></pre><h1 id="五、浏览器内核和-JS-引擎的关系"><a href="#五、浏览器内核和-JS-引擎的关系" class="headerlink" title="五、浏览器内核和 JS 引擎的关系"></a>五、浏览器内核和 JS 引擎的关系</h1><h3 id="这里我们先以-WebKit-为例，WebKit-实际上由两部分组成"><a href="#这里我们先以-WebKit-为例，WebKit-实际上由两部分组成" class="headerlink" title="这里我们先以 WebKit 为例，WebKit 实际上由两部分组成"></a>这里我们先以 WebKit 为例，WebKit 实际上由两部分组成</h3><pre><code>  - **WebCore**：负责HTML解析、布局、渲染等等相关的工作；  - **JavaScriptCore**：解析、执行JavaScript代码；</code></pre><h3 id="在小程序中编写的-JavaScript-代码就是被-JSCore-执行的"><a href="#在小程序中编写的-JavaScript-代码就是被-JSCore-执行的" class="headerlink" title="在小程序中编写的 JavaScript 代码就是被 JSCore 执行的"></a>在小程序中编写的 JavaScript 代码就是被 JSCore 执行的</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/21707377/1638358535971-dd52f08a-52fe-4f5a-8e0c-b55f596c26d9.png#clientId=uf3c6c3d5-c0ad-4&from=paste&id=ua8dc05d3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=364&originWidth=979&originalType=binary&ratio=1&size=312584&status=done&style=shadow&taskId=u397563a2-265a-469e-8b4e-60ac1135a3b" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/21707377/1638358568312-3eb9beb4-6655-49e6-ab59-5d4ac1d270d6.png#clientId=uf3c6c3d5-c0ad-4&from=paste&id=u9271a581&margin=%5Bobject%20Object%5D&name=image.png&originHeight=499&originWidth=699&originalType=binary&ratio=1&size=233979&status=done&style=shadow&taskId=u08efab4b-f562-48cb-b3bd-a978c7b0459" alt="image.png"></p><h3 id="另外一个强大的-JavaScript-引擎就是-V8-引擎"><a href="#另外一个强大的-JavaScript-引擎就是-V8-引擎" class="headerlink" title="另外一个强大的 JavaScript 引擎就是 V8 引擎"></a>另外一个强大的 JavaScript 引擎就是 V8 引擎</h3><h1 id="六、V8-引擎原理"><a href="#六、V8-引擎原理" class="headerlink" title="六、V8 引擎原理"></a>六、V8 引擎原理</h1><h3 id="我们来看一下官方对-V8-引擎的定义："><a href="#我们来看一下官方对-V8-引擎的定义：" class="headerlink" title="我们来看一下官方对 V8 引擎的定义："></a>我们来看一下官方对 V8 引擎的定义：</h3><pre><code>  - V8是用C ++编写的Google开源高性能JavaScript和WebAssembly引擎，它用于Chrome和Node.js等。  - 它实现ECMAScript和WebAssembly，并在Windows 7或更高版本，macOS 10.12+和使用x64，IA-32，ARM或MIPS处理器的Linux系统上运行。  - V8可以独立运行，也可以嵌入到任何C ++应用程序中。</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2021/png/21707377/1638358787996-bc995c0b-33ea-453a-a85c-6a4ef2379865.png#clientId=uf3c6c3d5-c0ad-4&from=paste&height=208&id=u1c251b20&margin=%5Bobject%20Object%5D&name=image.png&originHeight=416&originWidth=1700&originalType=binary&ratio=1&size=493669&status=done&style=shadow&taskId=ua6633b86-cd6f-4a20-ad49-adb062bb625&width=850" alt="image.png"></p><h1 id="七、V8-引擎的架构"><a href="#七、V8-引擎的架构" class="headerlink" title="七、V8 引擎的架构"></a>七、V8 引擎的架构</h1><h3 id="V8-引擎本身的源码非常复杂，大概有超过-100w-行-C-代码，通过了解它的架构，我们可以知道它是如何对-JavaScript-执行的："><a href="#V8-引擎本身的源码非常复杂，大概有超过-100w-行-C-代码，通过了解它的架构，我们可以知道它是如何对-JavaScript-执行的：" class="headerlink" title="V8 引擎本身的源码非常复杂，大概有超过 100w 行 C++代码，通过了解它的架构，我们可以知道它是如何对 JavaScript 执行的："></a>V8 引擎本身的源码非常复杂，大概有超过 100w 行 C++代码，通过了解它的架构，我们可以知道它是如何对 JavaScript 执行的：</h3><h4 id="Parse-模块会将-JavaScript-代码转换成-AST（抽象语法树），这是因为解释器并不直接认识-JavaScript-代码；"><a href="#Parse-模块会将-JavaScript-代码转换成-AST（抽象语法树），这是因为解释器并不直接认识-JavaScript-代码；" class="headerlink" title="Parse 模块会将 JavaScript 代码转换成 AST（抽象语法树），这是因为解释器并不直接认识 JavaScript 代码；"></a>Parse 模块会将 JavaScript 代码转换成 AST（抽象语法树），这是因为解释器并不直接认识 JavaScript 代码；</h4><pre><code>  -  如果函数没有被调用，那么是不会被转换成AST的；  -  Parse的V8官方文档：[https://v8.dev/blog/scanner](https://v8.dev/blog/scanner)</code></pre><h4 id="Ignition-是一个解释器，会将-AST-转换成-ByteCode（字节码）"><a href="#Ignition-是一个解释器，会将-AST-转换成-ByteCode（字节码）" class="headerlink" title="Ignition 是一个解释器，会将 AST 转换成 ByteCode（字节码）"></a>Ignition 是一个解释器，会将 AST 转换成 ByteCode（字节码）</h4><pre><code>  -  同时会收集TurboFan优化所需要的信息（比如函数参数的类型信息，有了类型才能进行真实的运算）；  -  如果函数只调用一次，Ignition会执行解释执行ByteCode；  -  Ignition的V8官方文档：[https://v8.dev/blog/ignition-interpreter](https://v8.dev/blog/ignition-interpreter)</code></pre><h4 id="TurboFan-是一个编译器，可以将字节码编译为-CPU-可以直接执行的机器码；"><a href="#TurboFan-是一个编译器，可以将字节码编译为-CPU-可以直接执行的机器码；" class="headerlink" title="TurboFan 是一个编译器，可以将字节码编译为 CPU 可以直接执行的机器码；"></a>TurboFan 是一个编译器，可以将字节码编译为 CPU 可以直接执行的机器码；</h4><pre><code>  -  如果一个函数被多次调用，那么就会被标记为热点函数，那么就会经过TurboFan转换成优化的机器码，提高代码的执行性能；  -  但是，机器码实际上也会被还原为ByteCode，这是因为如果后续执行函数的过程中，类型发生了变化（比如sum函数原来执行的是number类型，后来执行变成了string类型），之前优化的机器码并不能正确的处理运算，就会逆向的转换成字节码；  -  TurboFan的V8官方文档：[https://v8.dev/blog/turbofan-jit](https://v8.dev/blog/turbofan-jit)</code></pre><h1 id="八、V8-引擎的官方解析图"><a href="#八、V8-引擎的官方解析图" class="headerlink" title="八、V8 引擎的官方解析图"></a>八、V8 引擎的官方解析图</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/21707377/1638359184054-b042af71-f4cb-4b9d-ae5d-96e8a99696b6.png#clientId=uf3c6c3d5-c0ad-4&from=paste&height=364&id=ud40fb0cf&margin=%5Bobject%20Object%5D&name=image.png&originHeight=727&originWidth=1543&originalType=binary&ratio=1&size=289493&status=done&style=shadow&taskId=uc2706ba6-dca6-46af-97e6-bf2f265985e&width=771.5" alt="image.png"></p><h1 id="九、V8-执行的细节"><a href="#九、V8-执行的细节" class="headerlink" title="九、V8 执行的细节"></a>九、V8 执行的细节</h1><h3 id="那么我们的-JavaScript-源码是如何被解析（Parse-过程）的呢？"><a href="#那么我们的-JavaScript-源码是如何被解析（Parse-过程）的呢？" class="headerlink" title="那么我们的 JavaScript 源码是如何被解析（Parse 过程）的呢？"></a>那么我们的 JavaScript 源码是如何被解析（Parse 过程）的呢？</h3><ul><li>Blink 将源码交给 V8 引擎，Stream 获取到源码并且进行编码转换；</li><li>Scanner 会进行词法分析（lexical analysis），词法分析会将代码转换成 tokens；</li><li>接下来 tokens 会被转换成 AST 树，经过 Parser 和 PreParser：<ul><li>Parser 就是直接将 tokens 转成 AST 树架构；</li><li>PreParser 称之为预解析，为什么需要预解析呢？ - 这是因为并不是所有的 JavaScript 代码，在一开始时就会被执行。那么对所有的 JavaScript 代码进行解析，必然会<br>影响网页的运行效率； - 所以 V8 引擎就实现了 Lazy Parsing（延迟解析）的方案，它的作用是将不必要的函数进行预解析，也就是只解析暂<br>时需要的内容，而对函数的全量解析是在函数被调用时才会进行； - 比如我们在一个函数 outer 内部定义了另外一个函数 inner，那么 inner 函数就会进行预解析；</li></ul></li><li>生成 AST 树后，会被 Ignition 转成字节码（bytecode），之后的过程就是代码的执行过程（后续会详细分析）。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
