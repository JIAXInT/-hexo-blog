<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript 异步编程</title>
      <link href="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Generator函数"><a href="#一、Generator函数" class="headerlink" title="一、Generator函数"></a>一、Generator函数</h1><h2 id="1、基本使用"><a href="#1、基本使用" class="headerlink" title="1、基本使用"></a>1、基本使用</h2><p>Generator函数也称之为生成器函数，可以用来生成迭代器，。也就是可以通过for…of来遍历Generator函数.并且Generator函数提供了一种异步编程的解决方案。</p><p>生成器函数和普通函数不一样，普通函数是一旦调用就会执行完毕，但是生成器函数中间可以暂停，也就是执行一会歇一会。</p><p>Generator函数的创建</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">     </span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">go</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">let</span> a = <span class="keyword">yield</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">let</span> b = <span class="keyword">yield</span> a;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">let</span> it = <span class="title function_">go</span>();</span><br><span class="line"><span class="keyword">let</span> r1 = it.<span class="title function_">next</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r1);</span><br><span class="line"><span class="keyword">let</span> r2 = it.<span class="title function_">next</span>(<span class="string">&#x27;b的值&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r2);</span><br><span class="line"><span class="keyword">let</span> r4 = it.<span class="title function_">next</span>(<span class="string">&#x27;c的值&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r4);</span><br></pre></td></tr></table></figure><p>如果第一次执行next方法给变量a输入值应该怎样传值？</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">   </span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">go</span>(<span class="params">str</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">let</span> a = <span class="keyword">yield</span> str;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 这行代码实现了输入与输出，本次的输出放在了yield的后面，下次的输入放在了yield的前面。</span></span><br><span class="line">        <span class="keyword">let</span> b = <span class="keyword">yield</span> a;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在这里先去调用一下生成器函数，但是注意，调用它不会立即执行</span></span><br><span class="line">    <span class="comment">// 该函数在这里会返回一个迭代器</span></span><br><span class="line"><span class="keyword">let</span> it = <span class="title function_">go</span>(<span class="string">&#x27;a的值&#x27;</span>); <span class="comment">// 调用的时候进行值的传递</span></span><br><span class="line"><span class="comment">//  下面需要调用next()函数</span></span><br><span class="line"><span class="keyword">let</span> r1 = it.<span class="title function_">next</span>();</span><br><span class="line">     </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r1);</span><br><span class="line"><span class="keyword">let</span> r2 = it.<span class="title function_">next</span>(<span class="string">&#x27;b的值&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r2);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">let</span> r4 = it.<span class="title function_">next</span>(<span class="string">&#x27;c的值&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r4);</span><br><span class="line">       </span><br></pre></td></tr></table></figure><h2 id="2、next方法参数"><a href="#2、next方法参数" class="headerlink" title="2、next方法参数"></a>2、next方法参数</h2><p>在上一个案例中,给next方法添加了相应的参数，那么该参数会 被当作上一条yield语句的返回值。</p><p>下面看一下如下程序，判断其对应的输出结果。(直接看程序)</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">test</span>(<span class="params">num</span>) &#123;</span><br><span class="line">     <span class="keyword">let</span> x = <span class="number">3</span> * (<span class="title function_">yield</span>(num + <span class="number">1</span>));</span><br><span class="line">     <span class="keyword">let</span> y = <span class="title function_">yield</span>(x / <span class="number">3</span>);</span><br><span class="line">     <span class="keyword">return</span> (x + y + num);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">let</span> n = <span class="title function_">test</span>(<span class="number">6</span>);</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(n.<span class="title function_">next</span>());</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(n.<span class="title function_">next</span>());</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(n.<span class="title function_">next</span>());</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;value: 7, done: false&#125;</span><br><span class="line">&#123;value: NaN, done: false&#125;</span><br><span class="line">&#123;value: NaN, done: true&#125;</span><br></pre></td></tr></table></figure><p>现在将程序修改成如下的形式：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">test</span>(<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">3</span> * (<span class="title function_">yield</span>(num + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">let</span> y = <span class="title function_">yield</span>(x / <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">return</span> (x + y + num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> n = <span class="title function_">test</span>(<span class="number">6</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n.<span class="title function_">next</span>(<span class="number">3</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n.<span class="title function_">next</span>(<span class="number">3</span>));</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;value: 7, done: false&#125;</span><br><span class="line">&#123;value: 3, done: false&#125;</span><br><span class="line">&#123;value: 18, done: true&#125;</span><br></pre></td></tr></table></figure><p>注意：由于next方法的参数表示上一条yield语句的返回值，所以第一次使用next方法时不能带参数。</p><p>也就是第一次使用next方法时是用来启动遍历器对象的。</p><h2 id="3、for…of循环"><a href="#3、for…of循环" class="headerlink" title="3、for…of循环"></a>3、for…of循环</h2><p>for…of循环可以自动遍历Generator函数，且此时不再需要调用next方法。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> <span class="title function_">test</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：一旦next()方法返回的对象的done属性为true, for…of循环就会终止，且不包含该返回对象，所以上面的return语句不在for…of循环中。</p><p>在前面的课程中讲过，由于JavaScript对象没有遍历的接口，无法使用for…of进行遍历，那么现在可以通过Generator函数为它加上这个接口就可以了。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">test</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> keys = <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> keys) &#123;</span><br><span class="line">        <span class="keyword">yield</span> [key, obj[key]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="title function_">test</span>(user)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、yield-语句"><a href="#4、yield-语句" class="headerlink" title="4、yield* 语句"></a>4、yield* 语句</h2><p>如果在Generator函数内部调用一个Generator函数，默认情况下是没有效果的。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">test1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">    <span class="title function_">test</span>();</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;y&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> <span class="title function_">test1</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要解决这个问题，需要用到 yield* 语句，用来在一个Generator函数中执行另外一个Generator函数。</p><p>上面的程序，修改成如下的形式：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">test1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">    <span class="keyword">yield</span>* <span class="title function_">test</span>();</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;y&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> <span class="title function_">test1</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实上面的代码与下面的代码是等价的关系</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">test1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> <span class="title function_">test</span>()) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;y&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> <span class="title function_">test1</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以 yield* 语句等同于在Generator函数内部部署了一个for…of循环。</p><p>看一下，下面的伪代码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">yield</span>* it1;</span><br><span class="line">     <span class="keyword">yield</span>* it2;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>上面的代码等同于下面的代码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> it1) &#123;</span><br><span class="line">        <span class="keyword">yield</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> it2) &#123;</span><br><span class="line">        <span class="keyword">yield</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 yield* 后面跟着一个数组，会出现什么情况呢？</p><p>由于数组原生支持遍历器，因此会遍历数组成员。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span>*[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">test</span>().<span class="title function_">next</span>())</span><br></pre></td></tr></table></figure><p>上面的代码输出的结果为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;value: 1, done: false&#125;</span><br></pre></td></tr></table></figure><p>通过上面的输出结果可以看出，加了星号后表示返回的是数组的遍历器对象。</p><p>如果不加星号，输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;value: Array(6), done: false&#125;</span><br></pre></td></tr></table></figure><p>不加星号返回的是整个数组。</p><p>所以，任何数据结构只要有了Iterator接口，就可以使用yield*来进行遍历。</p><p>下面再一段程序，看一下对应的输出结果</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">         <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">         <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">function</span>* <span class="title function_">test1</span>(<span class="params"></span>) &#123;</span><br><span class="line">         <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">         <span class="keyword">let</span> value = <span class="keyword">yield</span>* <span class="title function_">test</span>();</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;value=&#x27;</span>, value);</span><br><span class="line">         <span class="keyword">yield</span> <span class="number">4</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">let</span> it = <span class="title function_">test1</span>();</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(it.<span class="title function_">next</span>());</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(it.<span class="title function_">next</span>());</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(it.<span class="title function_">next</span>());</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(it.<span class="title function_">next</span>());</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(it.<span class="title function_">next</span>());</span><br></pre></td></tr></table></figure><p>输出的结果如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;value: 3, done: false&#125;</span><br><span class="line">&#123;value: 1, done: false&#125;</span><br><span class="line">&#123;value: 2, done: false&#125;</span><br><span class="line">value= test   &#123;value: 4, done: false&#125;</span><br><span class="line">&#123;value: undefined, done: true&#125;</span><br></pre></td></tr></table></figure><p>通过上面的代码可以，发现test函数中的return值，给了test1函数中的value这个变量。</p><h2 id="5、关于Generator函数中的this问题"><a href="#5、关于Generator函数中的this问题" class="headerlink" title="5、关于Generator函数中的this问题"></a>5、关于Generator函数中的this问题</h2><p>在讲解具体的this问题之前，先看一下下面的代码，是否有错误？</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title class_">Person</span>() &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;zs&#x27;</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);</span><br></pre></td></tr></table></figure><p>执行上面的代码后，发现是有错误的，因为Person既是构造函数，又是一个Generator函数，所以使用new命令就无法创建Person的对象。</p><p>怎样解决这个问题呢？</p><p>首先创建一个空对象，然后使用bind方法绑定Generator函数内部的this。这样，这个空对象就是Generator函数的实例对象了。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title class_">Person</span>() &#123;</span><br><span class="line">     <span class="keyword">yield</span> <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;zs&#x27;</span>;</span><br><span class="line">     <span class="keyword">yield</span> <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">let</span> person = &#123;&#125;</span><br><span class="line"> <span class="keyword">let</span> obj = <span class="title class_">Person</span>.<span class="title function_">bind</span>(person)();</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">next</span>());</span><br></pre></td></tr></table></figure><h2 id="6、Generator函数应用场景"><a href="#6、Generator函数应用场景" class="headerlink" title="6、Generator函数应用场景"></a>6、Generator函数应用场景</h2><h3 id="6-1-状态处理"><a href="#6-1-状态处理" class="headerlink" title="6.1 状态处理"></a>6.1 状态处理</h3><p>单击按钮实现图片切换，这个案例如果按照以前的做法，如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> button = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>) <span class="comment">//找到按钮</span></span><br><span class="line">      <span class="keyword">let</span> mm = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;mv&#x27;</span>) <span class="comment">//找到img标签</span></span><br><span class="line">      <span class="keyword">let</span> flag = <span class="number">0</span></span><br><span class="line">      button.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="comment">//将img标签的src属性的值，换成另外一张图片的地址.</span></span><br><span class="line">          <span class="keyword">if</span> (flag === <span class="number">0</span>) &#123;</span><br><span class="line">              mm.<span class="property">src</span> = <span class="string">&#x27;images/b.jpg&#x27;</span>;</span><br><span class="line">              flag = <span class="number">1</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              mm.<span class="property">src</span> = <span class="string">&#x27;images/a.jpg&#x27;</span>;</span><br><span class="line">              flag = <span class="number">0</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>使用 Generator函数处理</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> button = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>) <span class="comment">//找到按钮</span></span><br><span class="line"><span class="keyword">let</span> mm = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;mv&#x27;</span>) <span class="comment">//找到img标签</span></span><br><span class="line"><span class="keyword">let</span> it = <span class="title function_">f</span>(<span class="number">0</span>);</span><br><span class="line">button.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    it.<span class="title function_">next</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">f</span>(<span class="params">flag</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        mm.<span class="property">src</span> = <span class="string">&#x27;images/b.jpg&#x27;</span>;</span><br><span class="line">        <span class="keyword">yield</span> flag;</span><br><span class="line">        mm.<span class="property">src</span> = <span class="string">&#x27;images/a.jpg&#x27;</span>;</span><br><span class="line">        <span class="keyword">yield</span> flag;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用Generator函数处理更加简单，并且更加符合函数的编程思想。（注意步骤的分析)</p><h3 id="6-2-异步处理"><a href="#6-2-异步处理" class="headerlink" title="6.2 异步处理"></a>6.2 异步处理</h3><p>前面讲过，Generator函数提供了一种异步处理的解决方案，而AJAX是典型的异步操作。</p><p>下面伪代码，直接看一下</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">yield</span> <span class="title function_">request</span>(<span class="string">&quot;http://xxx.com/api&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> resp = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(result);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(resp.<span class="property">value</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="title function_">makeAjaxCall</span>(url, <span class="keyword">function</span>(<span class="params">response</span>)&#123;</span><br><span class="line">    it.<span class="title function_">next</span>(response);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> it = <span class="title function_">main</span>();</span><br><span class="line">it.<span class="title function_">next</span>();</span><br></pre></td></tr></table></figure><p>注意：在makeAjaxCall函数中的next( )方法，一定要把response作为它的参数。</p><p>因为该参数会给main函数中的result变量，最终对result进行处理。</p><p>并且，上面的写法几乎与同步操作的写法完全一样，写起来非常简单。</p><h1 id="二、Promise对象"><a href="#二、Promise对象" class="headerlink" title="二、Promise对象"></a>二、Promise对象</h1><h2 id="1、Promise定义"><a href="#1、Promise定义" class="headerlink" title="1、Promise定义"></a>1、Promise定义</h2><h3 id="1-1-回调地狱问题"><a href="#1-1-回调地狱问题" class="headerlink" title="1.1 回调地狱问题"></a>1.1 回调地狱问题</h3><p>在讲解具体的Promise对象的定义前，先来讲解一下回调地狱的问题。</p><p>在开发中经常使用Ajax发送请求，那么就会出现如下的情况：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(url, <span class="title function_">success</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(url2, <span class="title function_">success</span>(<span class="params"></span>) &#123;</span><br><span class="line">        $.<span class="title function_">ajax</span>(url3, <span class="title function_">success</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>以上的代码反映了，在一个Ajax的回调中，又去发送了另外一个Ajax请求，依次类推，导致了多个回调函数的嵌套，导致代码不够直观并且难以维护，这就是常说的回调地狱。</p><p>所以在实际的开发中，不希望这种不断嵌套的回调，而是希望将这种多层变成一层。</p><p>要解决这个回调地狱的问题，就要用到Promise对象。</p><h3 id="同步模式"><a href="#同步模式" class="headerlink" title="同步模式"></a>同步模式</h3><p>同步模式指的就是代码中的任务依次执行。后一个任务必须等待前一个任务结束后，才能执行。程序的执行顺序与我们代码的编写顺序是完全一致的。</p><h3 id="异步模式"><a href="#异步模式" class="headerlink" title="异步模式"></a>异步模式</h3><p>异步模式对应的<code>API</code>是不会等待这个任务的结束才开始下一个任务，对于耗时操作，开启过后就立即往后执行下一个任务。</p><p>耗时任务的后续逻辑一般会通过回调函数的方式定义（例如ajax回调函数）。</p><h3 id="Promise概念与基本使用"><a href="#Promise概念与基本使用" class="headerlink" title="Promise概念与基本使用"></a>Promise概念与基本使用</h3><p>所谓的Promise就是一个对象，而Promise对象代表的是一个异步任务，也就是需要很长时间去执行的任务。</p><p>也就是通过Promise对象，可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数问题，也就是回调地狱的问题。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> num = <span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line">                <span class="keyword">if</span> (num &gt; <span class="number">0.3</span>) &#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(<span class="string">&#x27;成功了!&#x27;</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title function_">reject</span>(<span class="string">&#x27;失败了&#x27;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">3000</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        promise.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">        &#125;, <span class="keyword">function</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(reason);</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><h2 id="2-使用Promise封装AJAX操作"><a href="#2-使用Promise封装AJAX操作" class="headerlink" title="2 使用Promise封装AJAX操作"></a>2 使用Promise封装AJAX操作</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> getJSON = <span class="keyword">function</span>(<span class="params">url</span>) &#123;</span><br><span class="line">          <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">              <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">              xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url);</span><br><span class="line">              xhr.<span class="property">onreadystatechange</span> = handler;</span><br><span class="line">              xhr.<span class="property">responseType</span> = <span class="string">&#x27;json&#x27;</span>;</span><br><span class="line">              xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Accept&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>);</span><br><span class="line">              xhr.<span class="title function_">send</span>();</span><br><span class="line">              <span class="keyword">function</span> <span class="title function_">handler</span>(<span class="params"></span>) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">                      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">                          <span class="title function_">resolve</span>(<span class="variable language_">this</span>.<span class="property">response</span>)</span><br><span class="line">                      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                          <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="variable language_">this</span>.<span class="property">statusText</span>));</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="comment">//返回Promise对象</span></span><br><span class="line">          <span class="keyword">return</span> p;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">getJSON</span>(<span class="string">&#x27;http://localhost:3005/products&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">      &#125;, <span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;出错了:&#x27;</span> + error)</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><h2 id="3、Promise链式调用"><a href="#3、Promise链式调用" class="headerlink" title="3、Promise链式调用"></a>3、Promise链式调用</h2><p>与传统回调函数处理异步任务相比，<code>Promise</code>最大的优势就是可以实现链式调用。</p><p>这样可以最大程度的避免回调地狱的问题。</p><p><code>then</code>方法第一个参数是成功的回调，第二个参数是失败的回调，当然第二个参数是可以省略的。</p><p><code>then</code>方法最大的特点就是可以返回一个<code>Promise</code>对象。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> promise=<span class="title function_">ajax</span>(<span class="string">&#x27;/api/users.json&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> promise2=promise.<span class="title function_">then</span>(<span class="keyword">function</span> <span class="title function_">onFulfilled</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onFulfilled&#x27;</span>,value)</span><br><span class="line">&#125;,<span class="keyword">function</span> <span class="title function_">onRejected</span>(<span class="params">error</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onRejected&#x27;</span>,error)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(promise2)<span class="comment">//输出的是一个promise对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(promise2===promise)<span class="comment">//返回值为false,所以这里的链式调用与前面我们学习的不一样，以前是通过返回this的方式来实现。而这里的then方法</span></span><br><span class="line"><span class="comment">//返回的是一个全新的Promise对象。</span></span><br></pre></td></tr></table></figure><p>返回全新的<code>Promise</code>的目的，就是为了实现一个<code>Promise</code>的链条，也就是一个承诺结束后，返回一个新的承诺。每个承诺都可以负责一个异步任务，</p><p>相互之间没有什么影响，那么如果我们不断的链式调用<code>then</code>方法，然后这里每个<code>then</code>方法，都是为上一个<code>then</code>方法返回的<code>Promise</code> 对象添加状态明确后的回调。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Promise链式调用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">let</span> getJson = <span class="keyword">function</span> (<span class="params">url</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, url);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          xhr.<span class="property">onreadystatechange</span> = handler;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          xhr.<span class="property">responseType</span> = <span class="string">&quot;json&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          xhr.<span class="title function_">send</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">function</span> <span class="title function_">handler</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">if</span> (xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">resolve</span>(<span class="variable language_">this</span>.<span class="property">response</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="variable language_">this</span>.<span class="property">statusText</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> p;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> promise = <span class="title function_">getJson</span>(<span class="string">&quot;http://localhost:3005/products&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> promise2 = promise.<span class="title function_">then</span>(</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> (<span class="params">result</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;出错了:&quot;</span> + err);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      );</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise2=&quot;</span>, promise2);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(promise === promise2);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Promise链式调用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">let</span> getJson = <span class="keyword">function</span> (<span class="params">url</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, url);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          xhr.<span class="property">onreadystatechange</span> = handler;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          xhr.<span class="property">responseType</span> = <span class="string">&quot;json&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          xhr.<span class="title function_">send</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">function</span> <span class="title function_">handler</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">if</span> (xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">resolve</span>(<span class="variable language_">this</span>.<span class="property">response</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="variable language_">this</span>.<span class="property">statusText</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> p;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">getJson</span>(<span class="string">&quot;http://localhost:3005/products&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;111&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">return</span> <span class="title function_">getJson</span>(<span class="string">&quot;http://localhost:3005/cart&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;then2=&quot;</span>, value);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;222&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;333&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;444&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">return</span> <span class="string">&quot;abc&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;555555&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;then5=&quot;</span>, value);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4、Promise异常处理"><a href="#4、Promise异常处理" class="headerlink" title="4、Promise异常处理"></a>4、<code>Promise</code>异常处理</h2><p>如果<code>Promise</code>执行结果失败，会调用我们所为其添加的<code>onRejected</code>回调函数。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> promise=<span class="title function_">ajax</span>(<span class="string">&#x27;/api/users.json&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> promise2=promise.<span class="title function_">then</span>(<span class="keyword">function</span> <span class="title function_">onFulfilled</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onFulfilled&#x27;</span>,value)</span><br><span class="line">&#125;,<span class="keyword">function</span> <span class="title function_">onRejected</span>(<span class="params">error</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onRejected&#x27;</span>,error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>例如，我们请求了不存在地址，或者是我们在<code>ajax</code>方法内部出现了异常（<code>throw new Error()</code>），都会执行<code>onRejected</code>函数。</p><p>所以说<code>onRejected</code>就是处理<code>Promise</code>中的异常。当然关于异常处理，我们还有另外一种用户就是使用<code>Promise</code>对象的<code>catch</code>方法来完成。</p><p>下面，我们来实现以下</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">ajax</span>(<span class="string">&#x27;/api/users.json&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span> <span class="title function_">onFulfilled</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onFulfilled&#x27;</span>,value)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span> <span class="title function_">onRejected</span>(<span class="params">error</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onRejected&#x27;</span>,error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在上面的代码中，使用<code>then</code>注册了成功的回调，使用<code>catch</code>来处理异常。</p><p>其实这个<code>catch</code>方法就是<code>then</code>方法的别名。</p><h2 id="5、Promise并行执行"><a href="#5、Promise并行执行" class="headerlink" title="5、Promise并行执行"></a>5、Promise并行执行</h2><p>例如，一个页面中有可能会与遇到多个请求服务端接口的情况，而这些请求之间没有相互的依赖关系。</p><p>那最好的选择就是同时请求服务端，避免一个一个的请求，而消耗过多的时间。</p><p>当然，你可能会说，这个实现起来非常的简单啊，把我们前面所写的<code>ajax</code>函数，多调用几次就可以了，如下所示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">ajax</span>(<span class="string">&#x27;/api/users.json&#x27;</span>)</span><br><span class="line"><span class="title function_">ajax</span>(<span class="string">&#x27;/api/posts.json&#x27;</span>)</span><br></pre></td></tr></table></figure><p>但是问题是，我们怎么知道所有的请求都结束了呢？</p><p>当然，你可能会说，我们定义一个计数器，每个请求结束后，让这个计数器累加一下，当累加的个数，与我们的任务数相同后，就表示所有的任务结束了。</p><p>这种方式比较麻烦。为了解决这个问题，<code>Promise</code>中提供了一个<code>all</code>方法。该方法接收的是一个数组，数组中的每个元素都是一个<code>Promise</code></p><p>对象。我们可以把这些<code>Promise</code>对象，看作是一个一个的异步任务。<code>all</code>方法会返回一个全新的<code>Promise</code>对象。当<code>all</code>方法内部所有的<code>Promise</code>对象都执行完毕后，这时我们才会获取到<code>all</code>方法所返回的新的<code>Promise</code>对象。该<code>Promise</code>对象获取到的结果是一个数组。在这个数组中包含了每个异步任务执行的结果。</p><p>需要注意的就是<code>all</code>方法中所有<code>Promise</code>对象都执行成功了，才表示成功，只要有一个失败了，那么<code>all</code>方法的执行就失败了。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">           <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">               <span class="keyword">let</span> num = <span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line">               <span class="keyword">if</span> (num &gt; <span class="number">0.3</span>) &#123;</span><br><span class="line">                   <span class="title function_">resolve</span>(<span class="string">&#x27;成功了!&#x27;</span>)</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="title function_">reject</span>(<span class="string">&#x27;失败了1&#x27;</span>)</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;, <span class="number">3000</span>)</span><br><span class="line">       &#125;)</span><br><span class="line">       <span class="keyword">let</span> promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">           <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">               <span class="keyword">let</span> num = <span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line">               <span class="keyword">if</span> (num &gt; <span class="number">0.3</span>) &#123;</span><br><span class="line">                   <span class="title function_">resolve</span>(<span class="string">&#x27;成功了!&#x27;</span>)</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="title function_">reject</span>(<span class="string">&#x27;失败了2&#x27;</span>)</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;, <span class="number">3000</span>)</span><br><span class="line">       &#125;)</span><br><span class="line">     <span class="title class_">Promise</span>.<span class="title function_">all</span>([promise1, promise2]).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Promise并行执行<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">let</span> getJson = <span class="keyword">function</span> (<span class="params">url</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, url);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          xhr.<span class="property">onreadystatechange</span> = handler;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          xhr.<span class="property">responseType</span> = <span class="string">&quot;json&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          xhr.<span class="title function_">send</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">function</span> <span class="title function_">handler</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">if</span> (xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">resolve</span>(<span class="variable language_">this</span>.<span class="property">response</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="variable language_">this</span>.<span class="property">statusText</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> p;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Promise</span>.<span class="title function_">all</span>([</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">getJson</span>(<span class="string">&quot;http://localhost:3005/products&quot;</span>),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">getJson</span>(<span class="string">&quot;http://localhost:3005/cart&quot;</span>),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">getJson</span>(<span class="string">&quot;http://localhost:3005/ddd&quot;</span>).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;&#125;),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      ])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6、Promise-race"><a href="#6、Promise-race" class="headerlink" title="6、Promise.race( )"></a>6、Promise.race( )</h2><p>与<code>all()</code>方法的区别是：</p><p><code>Promise.all( )</code>是等待所有任务结束后才会结束。</p><p>‘Promise.race( )’只要有一个任务完成就结束。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Promise中race方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">let</span> promise1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">let</span> num = <span class="title class_">Math</span>.<span class="title function_">random</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">if</span> (num &gt; <span class="number">0.3</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">resolve</span>(<span class="string">&quot;成功了1!&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">reject</span>(<span class="string">&quot;失败了1&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;, <span class="number">3000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">let</span> promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">let</span> num = <span class="title class_">Math</span>.<span class="title function_">random</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">if</span> (num &gt; <span class="number">0.3</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">resolve</span>(<span class="string">&quot;成功了2!&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">reject</span>(<span class="string">&quot;失败了2&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;, <span class="number">3000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">let</span> p = <span class="title class_">Promise</span>.<span class="title function_">race</span>([promise1, promise2])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Promise中race方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">let</span> getJson = <span class="keyword">function</span> (<span class="params">url</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, url);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          xhr.<span class="property">onreadystatechange</span> = handler;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          xhr.<span class="property">responseType</span> = <span class="string">&quot;json&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          xhr.<span class="title function_">send</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">function</span> <span class="title function_">handler</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">if</span> (xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">resolve</span>(<span class="variable language_">this</span>.<span class="property">response</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="variable language_">this</span>.<span class="property">statusText</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> p;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> promise = <span class="title function_">getJson</span>(<span class="string">&quot;http://localhost:3005/products&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> timeout = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;timeout&quot;</span>)), <span class="number">100</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Promise</span>.<span class="title function_">race</span>([promise, timeout])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        .<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7、Promise静态方法"><a href="#7、Promise静态方法" class="headerlink" title="7、Promise静态方法"></a>7、<code>Promise</code>静态方法</h2><p>在<code>Promise</code>中还有几个静态方法也会使用到。</p><p>第一个 是<code>Promise.resolve()</code></p><p>其作用就是将一个值，快速的转换成<code>Promise</code>对象。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;foo&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    cosnole.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;)<span class="comment">//返回一个成功的Promise对象</span></span><br></pre></td></tr></table></figure><p>第二个为<code>Promise.reject()</code>方法，该方法创建一个失败的<code>Promise</code>对象。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;rejected&#x27;</span>)).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="8、Promise执行顺序的问题"><a href="#8、Promise执行顺序的问题" class="headerlink" title="8、Promise执行顺序的问题"></a>8、Promise执行顺序的问题</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Promise执行顺序问题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;start&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setTimeout&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;, <span class="number">0</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise2&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise3&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;end&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="9、模拟Promise对象"><a href="#9、模拟Promise对象" class="headerlink" title="9、模拟Promise对象"></a>9、模拟Promise对象</h2><h3 id="1、搭建基本结构"><a href="#1、搭建基本结构" class="headerlink" title="1、搭建基本结构"></a>1、搭建基本结构</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">         <span class="keyword">function</span> <span class="title function_">MyPromise</span>(<span class="params">task</span>)&#123;</span><br><span class="line">             <span class="keyword">let</span> that = <span class="variable language_">this</span>;</span><br><span class="line">             that.<span class="property">status</span>=<span class="string">&#x27;Pending&#x27;</span>;</span><br><span class="line">             <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">             &#125;</span><br><span class="line">             <span class="title function_">task</span>(resolve,reject);</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">let</span> myPromise =<span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line">             </span><br><span class="line"></span><br><span class="line">         &#125;)</span><br><span class="line">     &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="2、异常处理"><a href="#2、异常处理" class="headerlink" title="2、异常处理"></a>2、异常处理</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">     <span class="keyword">function</span> <span class="title function_">MyPromise</span>(<span class="params">task</span>) &#123;</span><br><span class="line">       <span class="keyword">let</span> that = <span class="variable language_">this</span>;</span><br><span class="line">       that.<span class="property">status</span> = <span class="string">&quot;Pending&quot;</span>;</span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params"></span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (that.<span class="property">status</span> === <span class="string">&quot;Pending&quot;</span>) &#123;</span><br><span class="line">           that.<span class="property">status</span> = <span class="string">&quot;Rejected&quot;</span>;</span><br><span class="line">           <span class="comment">//状态修改完成后，调用的是then 方法中处理失败的回调函数</span></span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="title function_">task</span>(resolve, reject);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">         <span class="title function_">reject</span>(e);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title class_">MyPromise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) &#123;&#125;;</span><br><span class="line">     <span class="keyword">let</span> myPromise = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;&#125;);</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="3、then方法处理与基本测试"><a href="#3、then方法处理与基本测试" class="headerlink" title="3、then方法处理与基本测试"></a>3、then方法处理与基本测试</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>构建自己的Promise对象<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">function</span> <span class="title function_">MyPromise</span>(<span class="params">task</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> that = <span class="variable language_">this</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        that.<span class="property">status</span> = <span class="string">&quot;Pending&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        that.<span class="property">value</span> = <span class="literal">undefined</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        that.<span class="property">onResolvedCallbacks</span> = [];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        that.<span class="property">onRejectedCallbacks</span> = [];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">value</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">if</span> (that.<span class="property">status</span> === <span class="string">&quot;Pending&quot;</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            that.<span class="property">status</span> = <span class="string">&quot;Resolved&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            that.<span class="property">value</span> = value;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            that.<span class="property">onResolvedCallbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="title function_">item</span>(that.<span class="property">value</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">reason</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">if</span> (that.<span class="property">status</span> === <span class="string">&quot;Pending&quot;</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            that.<span class="property">status</span> = <span class="string">&quot;Rejected&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            that.<span class="property">value</span> = reason;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//状态修改完成后，调用的是then 方法中处理失败的回调函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            that.<span class="property">onRejectedCallbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="title function_">item</span>(that.<span class="property">value</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">try</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">task</span>(resolve, reject);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125; <span class="keyword">catch</span> (e) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">reject</span>(e);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">MyPromise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> that = <span class="variable language_">this</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        that.<span class="property">onResolvedCallbacks</span>.<span class="title function_">push</span>(onFulfilled);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        that.<span class="property">onRejectedCallbacks</span>.<span class="title function_">push</span>(onRejected);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">let</span> myPromise = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">let</span> num = <span class="title class_">Math</span>.<span class="title function_">random</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">if</span> (num &gt; <span class="number">0.3</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">resolve</span>(<span class="string">&quot;成功了&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">reject</span>(<span class="string">&quot;失败了&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;, <span class="number">3000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      myPromise.<span class="title function_">then</span>(</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> (<span class="params">reason</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(reason);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      );</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4、完善操作"><a href="#4、完善操作" class="headerlink" title="4、完善操作"></a>4、完善操作</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>构建自己的Promise对象<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">function</span> <span class="title function_">MyPromise</span>(<span class="params">task</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> that = <span class="variable language_">this</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        that.<span class="property">status</span> = <span class="string">&quot;Pending&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        that.<span class="property">value</span> = <span class="literal">undefined</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        that.<span class="property">onResolvedCallbacks</span> = [];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        that.<span class="property">onRejectedCallbacks</span> = [];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">value</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">if</span> (that.<span class="property">status</span> === <span class="string">&quot;Pending&quot;</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            that.<span class="property">status</span> = <span class="string">&quot;Resolved&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            that.<span class="property">value</span> = value;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            that.<span class="property">onResolvedCallbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="title function_">item</span>(that.<span class="property">value</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">reason</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">if</span> (that.<span class="property">status</span> === <span class="string">&quot;Pending&quot;</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            that.<span class="property">status</span> = <span class="string">&quot;Rejected&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            that.<span class="property">value</span> = reason;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//状态修改完成后，调用的是then 方法中处理失败的回调函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            that.<span class="property">onRejectedCallbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="title function_">item</span>(that.<span class="property">value</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">try</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">task</span>(resolve, reject);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125; <span class="keyword">catch</span> (e) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">reject</span>(e);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">MyPromise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> that = <span class="variable language_">this</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (that.<span class="property">status</span> === <span class="string">&quot;Resolved&quot;</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">onFulfilled</span>(that.<span class="property">value</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (that.<span class="property">status</span> === <span class="string">&quot;Rejected&quot;</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">onRejected</span>(that.<span class="property">value</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        that.<span class="property">onResolvedCallbacks</span>.<span class="title function_">push</span>(onFulfilled);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        that.<span class="property">onRejectedCallbacks</span>.<span class="title function_">push</span>(onRejected);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">let</span> myPromise = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// setTimeout(function () &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//   let num = Math.random();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//   if (num &gt; 0.3) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     resolve(&quot;成功了&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//   &#125; else &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     reject(&quot;失败了&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//   &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// &#125;, 3000);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">resolve</span>(<span class="string">&quot;成功了&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      myPromise.<span class="title function_">then</span>(</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> (<span class="params">reason</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(reason);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      );</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="三、async函数"><a href="#三、async函数" class="headerlink" title="三、async函数"></a>三、async函数</h1><h2 id="1、常见异步编程方式"><a href="#1、常见异步编程方式" class="headerlink" title="1、常见异步编程方式"></a>1、常见异步编程方式</h2><h4 id="1-2-1-回调函数"><a href="#1-2-1-回调函数" class="headerlink" title="1.2.1 回调函数"></a>1.2.1 回调函数</h4><p>JavaScript 语言对异步编程的实现，就是回调函数。<strong>所谓回调函数，就是把任务的第二段单独写在一个函数里面，等到重新执行这个任务的时候，就直接调用这个函数。</strong>它的英语名字 callback，直译过来就是”重新调用”。 </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;/etc/passwd&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，readFile 函数的第二个参数，就是回调函数，也就是任务的第二段。等到操作系统返回了 &#x2F;etc&#x2F;passwd 这个文件以后，回调函数才会执行。 </p><h4 id="1-2-2-Promise对象"><a href="#1-2-2-Promise对象" class="headerlink" title="1.2.2 Promise对象"></a>1.2.2 Promise对象</h4><p>回调函数本身并没有问题，它的问题出现在多个回调函数嵌套。假定读取A文件之后，再读取B文件，代码如下。 </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(fileA, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">  fs.<span class="title function_">readFile</span>(fileB, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>不难想象，如果依次读取多个文件，就会出现多重嵌套 .这样就产生了，我们前面讲解的回调地狱问题。</p><p>而Promise对象就是为了解决这个问题。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">readFile</span>(fileA)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>());</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">readFile</span>(fileB);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>());</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>通过Promise解决了回调地狱的问题。</p><h4 id="1-2-3-Generator函数"><a href="#1-2-3-Generator函数" class="headerlink" title="1.2.3 Generator函数"></a>1.2.3 Generator函数</h4><p>Generator函数,就是一个封装的异步任务，或者说是异步任务的容器。异步操作需要暂停的地方，都用到yield语句。</p><p>下面的案例是前面用Generator函数封装的AJAX的异步操作。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">yield</span> <span class="title function_">request</span>(<span class="string">&quot;http://xxx.com/api&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> resp = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(result);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(resp.<span class="property">value</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="title function_">makeAjaxCall</span>(url, <span class="keyword">function</span>(<span class="params">response</span>)&#123;</span><br><span class="line">    it.<span class="title function_">next</span>(response);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> it = <span class="title function_">main</span>();</span><br><span class="line">it.<span class="title function_">next</span>();</span><br></pre></td></tr></table></figure><h2 id="2、async函数"><a href="#2、async函数" class="headerlink" title="2、async函数"></a>2、async函数</h2><h3 id="2-1-基本用法"><a href="#2-1-基本用法" class="headerlink" title="2.1 基本用法"></a>2.1 基本用法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);         </span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>();</span><br></pre></td></tr></table></figure><p>async: 表示函数中有异步操作,await 必须出现在 async 函数内部，不能单独使用。 </p><p>await: 表示紧跟在后面的表达式需要等待结果。一般情况下await后面跟的是一个耗时的操作或者一个异步的操作。</p><h3 id="2-2-使用方式"><a href="#2-2-使用方式" class="headerlink" title="2.2 使用方式"></a>2.2 使用方式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">sleep</span>(<span class="params">second</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">let</span> num = <span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line">          <span class="keyword">if</span> (num &gt; <span class="number">0.8</span>) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="string">&quot;成功了&quot;</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&quot;失败了&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, second);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">awaitDemo</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">3000</span>);</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">awaitDemo</span>()</span><br><span class="line">      .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;data=&quot;</span>, data);</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error=&quot;</span>, err);</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;执行其它的代码&quot;</span>);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="2-3-处理异步请求"><a href="#2-3-处理异步请求" class="headerlink" title="2.3 处理异步请求"></a>2.3 处理异步请求</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">      <span class="keyword">let</span> getJson = <span class="keyword">function</span> (<span class="params">url</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">          <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">          xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, url);</span><br><span class="line">          xhr.<span class="property">onreadystatechange</span> = handler;</span><br><span class="line">          xhr.<span class="property">responseType</span> = <span class="string">&quot;json&quot;</span>;</span><br><span class="line">          xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">          xhr.<span class="title function_">send</span>();</span><br><span class="line">          <span class="keyword">function</span> <span class="title function_">handler</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">              <span class="keyword">if</span> (xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(<span class="variable language_">this</span>.<span class="property">response</span>);</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="variable language_">this</span>.<span class="property">statusText</span>));</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getAjax</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">getJson</span>(<span class="string">&quot;http://localhost:3005/products&quot;</span>);</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">getAjax</span>();</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="2-4-请求依赖关系的处理"><a href="#2-4-请求依赖关系的处理" class="headerlink" title="2.4 请求依赖关系的处理"></a>2.4 请求依赖关系的处理</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">sleep</span>(<span class="params">second, param</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(param);</span><br><span class="line">        &#125;, second);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> result1 = <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">2000</span>, <span class="string">&quot;req01&quot;</span>);</span><br><span class="line">      <span class="keyword">let</span> result2 = <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">1000</span>, <span class="string">&quot;req02&quot;</span> + result1);</span><br><span class="line">      <span class="keyword">let</span> result3 = <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">500</span>, <span class="string">&quot;req03&quot;</span> + result2);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(result1, result2, result3);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">test</span>();</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="2-5-并且处理的问题"><a href="#2-5-并且处理的问题" class="headerlink" title="2.5 并且处理的问题"></a>2.5 并且处理的问题</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">     <span class="keyword">let</span> getJSON = <span class="keyword">function</span> (<span class="params">url</span>) &#123;</span><br><span class="line">       <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">         <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">         xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, url);</span><br><span class="line">         xhr.<span class="property">onreadystatechange</span> = handler;</span><br><span class="line">         xhr.<span class="property">responseType</span> = <span class="string">&quot;json&quot;</span>;</span><br><span class="line">         xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">         xhr.<span class="title function_">send</span>();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">function</span> <span class="title function_">handler</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">             <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">               <span class="title function_">resolve</span>(<span class="variable language_">this</span>.<span class="property">response</span>);</span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="variable language_">this</span>.<span class="property">statusText</span>));</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="comment">//返回Promise对象</span></span><br><span class="line">       <span class="keyword">return</span> p;</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getAJAX</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="comment">// try &#123;</span></span><br><span class="line">       <span class="comment">//   let result = await getJSON(&quot;http://localhost:3005/products&quot;);</span></span><br><span class="line">       <span class="comment">//   let result1 = await getJSON(&quot;http://localhost:3005/products&quot;);</span></span><br><span class="line">       <span class="comment">//   let result2 = await getJSON(&quot;http://localhost:3005/products&quot;);</span></span><br><span class="line">       <span class="comment">//   console.log(result, result1, result2);</span></span><br><span class="line">       <span class="comment">//   console.log(&quot;clear the loading~&quot;); //通过这一句代码模拟隐藏loading图片</span></span><br><span class="line">       <span class="comment">// &#125; catch (e) &#123;</span></span><br><span class="line">       <span class="comment">//   console.log(e);</span></span><br><span class="line">       <span class="comment">// &#125;</span></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">let</span> result = <span class="title function_">getJSON</span>(<span class="string">&quot;http://localhost:3005/products&quot;</span>);</span><br><span class="line">         <span class="keyword">let</span> result1 = <span class="title function_">getJSON</span>(<span class="string">&quot;http://localhost:3005/products&quot;</span>);</span><br><span class="line">         <span class="keyword">let</span> result2 = <span class="title function_">getJSON</span>(<span class="string">&quot;http://localhost:3005/products&quot;</span>);</span><br><span class="line">         <span class="keyword">let</span> p = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([result, result1, result2]);</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;clear the loading~&quot;</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title function_">getAJAX</span>();</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 模块化</title>
      <link href="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
      <url>/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h1><h2 id="1、模块化的发展过程"><a href="#1、模块化的发展过程" class="headerlink" title="1、模块化的发展过程"></a>1、模块化的发展过程</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> moduleObj = &#123;</span><br><span class="line">    <span class="attr">userName</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="attr">fn</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方式</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>       </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;a.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">         moduleObj.fn()</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>立即执行函数的方式</p><p>通过立即执行函数的方式为模块提供私有空间</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">; (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> userName = <span class="string">&#x27;lisi&#x27;</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(userName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">moduleObj</span> = &#123;</span><br><span class="line">        <span class="attr">fn1</span>: fn1,</span><br><span class="line">        <span class="attr">fn2</span>: fn2</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h2 id="2、模块化规范说明"><a href="#2、模块化规范说明" class="headerlink" title="2、模块化规范说明"></a>2、模块化规范说明</h2><p><code>CommonJS</code>它是<code>node.js</code>中提到的一个规范。也就是说我们在写<code>Node.js</code>的时候，必须符合<code>CommonJS</code>的规范。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CommonJS规范要求</span><br><span class="line">1、一个文件就是一个模块</span><br><span class="line">2、 通过module.exports导出成员项</span><br><span class="line">3、通过require函数加载模块</span><br><span class="line">4、每个模块都有单独的作用域。</span><br></pre></td></tr></table></figure><p><code>AMD(Asynchronous Module Definition)</code>,翻译过来就是异步的模块定义规范。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>(<span class="string">&#x27;moduleA&#x27;</span>,[<span class="string">&#x27;jquery&#x27;</span>,<span class="string">&#x27;./moduleB&#x27;</span>],<span class="keyword">function</span>(<span class="params">$,moduleB</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span>&#123;</span><br><span class="line">               <span class="attr">fn</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                   <span class="comment">// $(&#x27;p&#x27;)</span></span><br><span class="line"></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">       <span class="built_in">require</span>([<span class="string">&#x27;./moduleA&#x27;</span>],<span class="keyword">function</span>(<span class="params">moduleA</span>)&#123;</span><br><span class="line">           moduleA.<span class="title function_">fn</span>();</span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure><h2 id="3、ES-Module基本使用"><a href="#3、ES-Module基本使用" class="headerlink" title="3、ES Module基本使用"></a>3、ES Module基本使用</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、自动采用了严格模式</span><br><span class="line">2、每个es module 都是运行在单独的私有的作用域中</span><br><span class="line">3、`ES module`通过CORS的方式请求外部的JS模块，如果服务端不支持`CORS`，则会出现跨域的问题。</span><br><span class="line">4、ES module的script标签会延迟执行脚本，类似于添加了defer.</span><br></pre></td></tr></table></figure><h2 id="4、导出的注意事项"><a href="#4、导出的注意事项" class="headerlink" title="4、导出的注意事项"></a>4、导出的注意事项</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、注意语法的问题</span><br><span class="line">2、通过export 对成员进行导出操作，导出的是成员的引用</span><br><span class="line">3、导出的成员是只读的，那么我们导入了以后是不能对成员进行修改的。</span><br></pre></td></tr></table></figure><h2 id="5、导入的注意事项"><a href="#5、导入的注意事项" class="headerlink" title="5、导入的注意事项"></a>5、导入的注意事项</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、import后面的from跟的是导入的文件的路径，并且是一个完整路径。</span><br><span class="line">2、如果我们这里是执行某个模块，并不需要提取其中的成员</span><br><span class="line">import &#123;&#125; from &#x27;./module.js&#x27;</span><br><span class="line">import &#x27;./module.js</span><br><span class="line">3、如果某个模块中导出的成员比较多，同时我们都需要这些导出的模块成员，</span><br><span class="line">import * as m from &#x27;./module.js&#x27;</span><br><span class="line">4、如果需要进行动态的导入</span><br><span class="line">import(&#x27;./module.js&#x27;).then(function(module) &#123;</span><br><span class="line">        console.log(module.)</span><br><span class="line">   &#125;)</span><br><span class="line"> 5、在进行导出的时候，使用了export 和export default,导入import应该怎样进行处理？</span><br><span class="line"> import title, &#123; userName, userAge &#125; from &quot;./module.js&quot;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 精讲</title>
      <link href="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/"/>
      <url>/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="一、JavaScript基础"><a href="#一、JavaScript基础" class="headerlink" title="一、JavaScript基础"></a>一、JavaScript基础</h1><h2 id="1、基本数据类型介绍"><a href="#1、基本数据类型介绍" class="headerlink" title="1、基本数据类型介绍"></a>1、基本数据类型介绍</h2><p>所有的编程语言都有数据类型的概念。</p><p>在<code>JavaScript</code>中，数据类型可以分为基本数据类型和引用数据类型。其中基本数据类型包括<code>Undefined</code>,<code>Null</code>,<code>Boolean</code>,<code>Number</code>,<code>String</code>5种类型。在<code>ES6</code>中新增了一种基本的数据类型<code>Symbol</code>.</p><p>引用类型有<code>Object</code>,<code>Function</code>,<code>Array</code>,<code>Date</code>等。</p><p>问题：两种类型有什么区别？</p><p>存储位置不同</p><table><thead><tr><th><strong>区别</strong></th><th>基本数据类型</th><th>引用数据类型</th></tr></thead><tbody><tr><td>存储位置</td><td>栈(stack)</td><td>堆(heap)</td></tr><tr><td>占据空间</td><td>小，大小固定</td><td>大，大小不固定</td></tr></tbody></table><p>引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。</p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B.png"></p><p>下面我们先来回顾基本数据类型的内容，后面再复习引用类型的内容，以及看一下对应的常见的面试题。</p><h3 id="1-1-Undefined类型"><a href="#1-1-Undefined类型" class="headerlink" title="1.1 Undefined类型"></a>1.1 Undefined类型</h3><p><code>Undefined</code>类型只有一个唯一的字面值<code>undefined</code>,表示的含义是一个变量不存在。</p><p>问题：哪些场景中会出现<code>undefined</code>?</p><p>第一：使用只声明而未初始化的变量时，会返回<code>undefined</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>第二：获取一个对象的某个不存在的属性时，会返回<code>undefined</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    <span class="attr">userName</span>:<span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>)<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>第三：函数没有明确的返回值，却对函数的调用结果进行打印</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>()) <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>第四：函数定义的时候，使用了多个形参，但是在调用的时候传递的参数的数量少于形参数量，那么没有匹配上的参数就为<code>undefined</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">p1,p2,p3</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p3) <span class="comment">//undefined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="1-2-Null类型"><a href="#1-2-Null类型" class="headerlink" title="1.2 Null类型"></a>1.2 Null类型</h3><p>​<code>Null</code>类型只有一个唯一的字面值<code>null</code>,表示一个空指针的对象，这也是在使用<code>typeof</code>运行符检测<code>null</code>值时会返回<code>object</code>的原因。</p><p>问题：哪些场景中会出现<code>null</code>？</p><p>第一：一般情况下，如果声明的变量是为了以后保存某个值，则应该在声明时就将其赋值为<code>null</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=<span class="literal">null</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">userName</span>:<span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj=<span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure><p>第二：<code>JavaScript</code>在获取<code>DOM</code>元素时，如果没有获取到指定的元素对象，就会返回<code>null</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#id&#x27;</span>) <span class="comment">//null</span></span><br></pre></td></tr></table></figure><p>第三：在使用正则表达式进行匹配的时候，如果没有匹配的结果，就会返回<code>null</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;test&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/a/</span>);<span class="comment">// null</span></span><br></pre></td></tr></table></figure><h3 id="1-3-Undefined与null比较"><a href="#1-3-Undefined与null比较" class="headerlink" title="1.3 Undefined与null比较"></a>1.3 Undefined与null比较</h3><p><code>Undefined</code>和<code>Null</code>虽然是两种不同的基本数据类型，但是在某些情况也存在相同之处，下面看一下它们两者相同点和不同点。</p><p><strong>（1）相同点</strong></p><p> 第一：<code>Undefined</code>和<code>Null</code>两种数据类型都只有一个字面值，分别是<code>undefined</code>和<code>null</code>.</p><p>第二：<code>Undefined</code>和<code>Null</code>类型在转换为<code>Boolean</code>类型的值时，都会转换为<code>false</code>.</p><p>第三：在需要将两者转换成对象的时候，都会抛出一个<code>TypeError</code>的异常。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="keyword">var</span> b=<span class="literal">null</span>;</span><br><span class="line">cosnole.<span class="title function_">log</span>(a.<span class="property">name</span>);<span class="comment">//Cannot read property &#x27;name&#x27; of undefined</span></span><br><span class="line">cosnole.<span class="title function_">log</span>(b.<span class="property">name</span>);<span class="comment">//Cannot read property &#x27;name&#x27; of undefined</span></span><br></pre></td></tr></table></figure><p>第四：<code>Undefined</code>类型派生自<code>Null</code>类型，所以在非严格相等的比较下，两者是相等的。如下面代码所示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="literal">null</span>==<span class="literal">undefined</span> <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><strong>(2)不同点</strong></p><p>第一：<code>null</code>是<code>JavaScript</code>的关键字，而<code>undefined</code>是<code>JavaScript</code>的一个全局变量，也就是挂载在<code>window</code>对象上的一个变量，并不是关键字。</p><p>第二：在使用<code>typeof</code>运算符进行检测时，<code>Undefined</code>类型的值会返回<code>undefined</code>.而<code>Null</code>类型的值返回为<code>object</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span> ;<span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> ;<span class="comment">//object</span></span><br></pre></td></tr></table></figure><p>第三：在需要进行字符串类型的转换时，<code>null</code>会转换成字符串<code>null</code>,而<code>undefined</code>会转换字符串<code>undefined</code>.</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="literal">undefined</span>+<span class="string">&quot; abc&quot;</span> <span class="comment">//&quot;undefined abc&quot;</span></span><br><span class="line"><span class="literal">null</span>+<span class="string">&quot; abc&quot;</span> <span class="comment">//&quot;null abc&quot;</span></span><br></pre></td></tr></table></figure><p>第四：在进行数值类型的转换时，<code>undefined</code>会转换为<code>NaN</code>,无法参与计算，而<code>null</code>会转换为<code>0</code>,可以参与计算。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="literal">undefined</span> +<span class="number">0</span>;<span class="comment">// NaN</span></span><br><span class="line"><span class="literal">null</span>+<span class="number">0</span> ;<span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>第五：建议：无论在什么情况下都没有必要将一个变量显示的赋值为<code>undefined</code>。如果需要定义某个变量来保存将来要使用的对象，应该将其初始化为<code>null</code>.</p><h3 id="1-4-Boolean类型"><a href="#1-4-Boolean类型" class="headerlink" title="1.4  Boolean类型"></a>1.4  Boolean类型</h3><p><code>Boolean</code>类型(布尔类型)的字面量只有两个，分别是<code>true</code>和<code>false</code>,它们是区分大小写的。</p><p><code>Boolean</code>类型使用最多的场景就是用于<code>if</code>语句的判断。在<code>JavaScript</code>中，<code>if</code>语句可以接受任何类型的表达式，即<code>if(a)</code>语句中的<code>a</code>,可以是<code>Boolean</code>,<code>Number</code>,<code>String</code>,<code>Object</code>，<code>Null</code>,<code>Undefined</code>等类型。</p><p>如果<code>a</code>不是<code>Boolean</code>类型的值，那么<code>JavaScript</code>解析器会自动调用<code>Boolean( )</code>函数对<code>a</code>进行类型的转换，返回最终符合<code>if</code>语句判断的<code>true</code>或者是<code>false</code>值。</p><p>不同类型与<code>Boolean</code>类型的值的转换是<code>Boolean</code>类型的重点。</p><p>第一：<code>String</code>类型转换为<code>Boolean</code>类型</p><p>空字符都会转换成<code>false</code>,而任何非空字符串都会转换为<code>true</code></p><p>第二：<code>Number</code>类型转换为<code>Boolean</code>类型</p><p><code>0</code>和<code>NaN</code>都会转换为<code>false</code>.而除了<code>0</code>和<code>NaN</code>以外都会转换<code>true</code>.</p><p>第三：<code>Object</code>类型转换<code>Boolean</code>类型</p><p>如果<code>object</code>为<code>null</code>时，会转换为<code>false</code>,如果<code>object</code>不为<code>null</code>，则都会转换成<code>true</code>.</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;&#125;</span><br><span class="line"><span class="title class_">Boolean</span>(obj) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj=<span class="literal">null</span></span><br><span class="line"><span class="title class_">Boolean</span>(obj)<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>第四：<code>Function</code>类型转换<code>Boolean</code>类型</p><p>任何<code>Function</code>类型都会转换为<code>true</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fn=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Boolean</span>(fn)<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>第五：<code>Null</code>类型转换为<code>Boolean</code>类型，我们知道<code>Null</code>类型只有一个<code>null</code>值，会转换为<code>false</code>.</p><p>第六：<code>Undefined</code>类型转换<code>Boolean</code>类型，我们知道<code>Undefined</code>类型只有一个<code>undefined</code>值，会转换为<code>false</code>.</p><h3 id="1-5-Number类型"><a href="#1-5-Number类型" class="headerlink" title="1.5 Number类型"></a>1.5 Number类型</h3><p>在<code>JavaScript</code>中，<code>Number</code>类型的数据包括了整型数据，也包括了浮点型数据。</p><p>我们先来看一下整型的处理。整型可以是十进制，也可以通过八进制或者是十六进制来表示。</p><p>第一：八进制：如果想要用八进制来表示一个数值，那么首位必须是0，其它位必须是0–7的数字，如果后面的数字大于7，则破坏了八进制的规则，这时会被当作十进制数来处理。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num1=<span class="number">024</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1) <span class="comment">//20</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num2=<span class="number">079</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num2) <span class="comment">//79</span></span><br></pre></td></tr></table></figure><p><code>num1</code>第一位是<code>0</code>表示八进制，后面每位数字都是在<code>0--7</code>之间的，所以符合八进制规则，最终转换为十进制为<code>20</code></p><p><code>num2</code>的第一位也是0，但是最后一位已经超过了7，所以不属于八进制，这里直接作为十进制来处理，最终输出的结果为79.</p><p>第二：十六进制：</p><p>如果想用十六进制表示一个数值，那么前面两位必须是<code>0x</code>,其它的位必须是(0–9,<code>a--f</code>或者<code>A--F</code>).如果超出了这个范围，则会抛出异常。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num1=<span class="number">0x5f</span> <span class="comment">//95</span></span><br><span class="line"><span class="keyword">var</span> num2=<span class="title class_">Ox5</span>h <span class="comment">//Uncaught SyntaxError: Invalid or unexpected token</span></span><br></pre></td></tr></table></figure><p>与<code>Boolean</code>类型一样，当其它类型在与<code>Number</code>类型进行数据转换时，也会遵守一定的规则。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-5-1-Number类型转换"><a href="#1-5-1-Number类型转换" class="headerlink" title="1.5.1 Number类型转换"></a>1.5.1 Number类型转换</h4><p>在实际开发中，我们经常会遇到将其他类型的值转换为<code>Number</code>类型的情况。在<code>JavaScript</code>中，一共有3个函数可以完成这种转换，分别是<code>Number()</code>函数，<code>parseInt( )</code>函数,<code>parseFloat( )</code>函数。下面我们看一下这些函数需要注意的事项。</p><p><strong>Number( )函数</strong></p><p><code>Number( )</code>函数可以用于将任何类型转换为<code>Number</code>类型，它在转换时遵循如下规则：</p><p>第一：如果是数字，会按照对应的进制数据格式，统一转换为十进制返回。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Number</span>(<span class="number">10</span>) <span class="comment">//10</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="number">010</span>) <span class="comment">// 8, 010是八进制的数据，转换成十进制是8</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="number">0x10</span>) <span class="comment">// 16,0x10是十六进制的数据，转换成十进制是16</span></span><br></pre></td></tr></table></figure><p>第二：如果是<code>Boolean</code>类型的值，<code>true</code>返回1,<code>false</code>返回是的0</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Number</span>(<span class="literal">true</span>) <span class="comment">//1</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="literal">false</span>) <span class="comment">//0</span></span><br></pre></td></tr></table></figure><p>第三：如果值为<code>null</code>,则返回0</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Number</span>(<span class="literal">null</span>) <span class="comment">//0</span></span><br></pre></td></tr></table></figure><p>第四：如果值为<code>undefined</code>,则返回<code>NaN</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Number</span>(<span class="literal">undefined</span>) <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure><p>第五：如果值为字符串类型，需要遵循如下规则</p><p>  （1）如果该字符串只包含了数字，则会直接转换成十进制数；如果数字前面有0，则会直接忽略掉这个0。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Number</span>(<span class="string">&#x27;21&#x27;</span>) <span class="comment">//21</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="string">&#x27;012&#x27;</span>) <span class="comment">//12</span></span><br></pre></td></tr></table></figure><p>(2) 如果字符串是有效的浮点数形式，则会直接转成对应的浮点数，前置的多个重复的0会被删除，只保留一个。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Number</span>(<span class="string">&#x27;0.12&#x27;</span>) <span class="comment">//0.12</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="string">&#x27;00.12&#x27;</span>) <span class="comment">//0.12</span></span><br></pre></td></tr></table></figure><p>(3)如果字符串是有效的十六进制形式，则会转换为对应的十进制数值</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Number</span>(<span class="string">&#x27;0x12&#x27;</span>) <span class="comment">//18</span></span><br></pre></td></tr></table></figure><p>(4) 如果字符串是有效的八进制，则不会按照八进制转换，而是直接按照十进制转换并输出，因为前置的0会被直接忽略掉。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Number</span>(<span class="string">&#x27;010&#x27;</span>) <span class="comment">//10</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="string">&#x27;0020&#x27;</span>) <span class="comment">//20</span></span><br></pre></td></tr></table></figure><p>(5)如果字符串为空，即字符串不包含任何字符，或为连续多个空格，则会转换为0.</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Number</span>(<span class="string">&#x27;&#x27;</span>) <span class="comment">//0</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="string">&#x27;     &#x27;</span>)<span class="comment">//0</span></span><br></pre></td></tr></table></figure><p>(6)如果字符串中包含了任何不适以上5种情况的其它格式内容，则会返回<code>NaN</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Number</span>(<span class="string">&#x27;123a&#x27;</span>) <span class="comment">//NaN</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="string">&#x27;abc&#x27;</span>) <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure><p>第六：如果是对象类型，则会调用对象的<code>valueOf( )</code>函数获取返回值，并且判断返回值能否转换为<code>Number</code>类型，如果不能，会调用对象的<code>toString( )</code>函数获取返回值，并且判断是否能够转换为<code>Number</code>类型。如果也不满足，则返回<code>NaN</code>.</p><p>以下是通过<code>valueOf( )</code>函数将对象转换成<code>Number</code>类型。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    <span class="attr">age</span>:<span class="string">&#x27;12&#x27;</span>,</span><br><span class="line">    <span class="attr">valueOf</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">age</span></span><br><span class="line">    &#125;,</span><br><span class="line">   </span><br><span class="line">  &#125;</span><br><span class="line"><span class="title class_">Number</span>(obj) <span class="comment">//12</span></span><br></pre></td></tr></table></figure><p>以下是通过<code>toString( )</code>函数将对象转换成<code>Number</code>类型。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    <span class="attr">age</span>:<span class="string">&#x27;21&#x27;</span>,</span><br><span class="line">    <span class="attr">toString</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">age</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Number</span>(obj)</span><br></pre></td></tr></table></figure><p><strong>parseInt( )函数</strong></p><p><code>parseInt()</code>函数用于解析一个字符串，并返回指定的基数对应的整数值。</p><p>语法格式： </p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(string,radix)</span><br></pre></td></tr></table></figure><p>其中<code>string</code>参数表示要被解析的值，如果该参数不是一个字符串，那么会使用<code>toString( )</code>函数将其转换成字符串。并且字符串前面的空白符会被忽略。</p><p><code>radix</code>表示的是进制转换的基数，可以是二进制，十进制，八进制和十六进制。默认值为10.</p><p>因为对相同的数采用不同进制进行处理时可能会得到不同的结果，所以在任何情况下使用<code>parseInt</code>函数时，建议都手动补充第二个参数。</p><p><code>parseInt( )</code>函数会返回字符串解析后的整数值，如果该字符串无法转换成<code>Number</code>类型，则会返回<code>NaN</code>.</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;aaa&#x27;</span>)<span class="comment">//NaN</span></span><br></pre></td></tr></table></figure><p>在使用<code>parseInt</code>函数将字符串转换成整数时，需要注意的问题：</p><p>第一：如果遇到传入的参数是非字符串类型的情况，则需要将其优先转换成字符串类型。即使传入的是整型数据。</p><p>第二：<code>parseInt( )</code>函数在做转换时，对于传入的字符串会采用前置匹配的原则。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;fg123&quot;</span>,<span class="number">16</span>)</span><br></pre></td></tr></table></figure><p>对于字符串<code>fg123</code>,首先从第一个字符开始，<code>f</code>是满足十六进制的数据的，因为十六进制数据的范围是<code>0--9</code>,<code>a--f</code>,所以保留<code>f</code>，然后是第二个字符<code>g</code>，它不满足十六进制数据范围，因此从第二个字符都最后一个字符全部舍弃，最终字符串只保留了字符<code>f</code>，然后将字符<code>f</code>转换成十六进制的数据，为15，因此最终返回的结果为<code>15</code>.</p><p>还要注意的一点就是，如果传入的字符串中涉及到了算术运算，则不会执行，算术符号会被当作字符处理。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;16*2&#x27;</span>)<span class="comment">// 16,这里直接当作字符串处理，并不会进行乘法的运算</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">16</span>*<span class="number">2</span>) <span class="comment">// 32 </span></span><br></pre></td></tr></table></figure><p>第三：对浮点数的处理</p><p>如果传入的值是浮点数，则会忽略小数点以及后面的数，直接取整。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="number">12.98</span>) <span class="comment">//12</span></span><br></pre></td></tr></table></figure><p>第四：<code>map( )</code>函数与<code>parseInt( )</code>函数的问题</p><p>我们这里假设有一个场景，存在一个数组，数组中的每个元素都是数字字符串，[‘1’,’2’,’3’,’4’]，如果将这个数组中的元素全部转换成整数，应该怎样处理呢？</p><p>这里我们可能会想到使用<code>map( )</code>函数，然后在该函数中调用<code>parseInt( )</code>函数来完成转换。所以代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">     <span class="keyword">var</span> arr = [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>];</span><br><span class="line">     <span class="keyword">var</span> result = arr.<span class="title function_">map</span>(<span class="built_in">parseInt</span>);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>执行上面程序得到的结果是：<code>[1,NaN,NaN,NaN]</code></p><p>为什么会出现这样的问题呢？</p><p>上面的代码等效如下的代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>];</span><br><span class="line">     <span class="comment">//   var result = arr.map(parseInt);</span></span><br><span class="line">     <span class="keyword">var</span> result = arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">val, index</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">parseInt</span>(val, index);</span><br><span class="line">     &#125;);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><p>通过以上的代码，可以发现，<code>parseInt</code>函数第二个参数实际上就是数组的索引值。所以，整体的形式如下所示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;1&#x27;</span>,<span class="number">0</span>) <span class="comment">// 任何整数以0为基数取整时，都会返回本身，所以这里返回的是1</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;2&#x27;</span>,<span class="number">1</span>) <span class="comment">//注意parseInt第二个参数的取值范围为2--36，所以不满足条件，这里只能返回NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;3&#x27;</span>,<span class="number">2</span>) <span class="comment">// 表示将3作为二进制来进行处理，但是二进制只有0和1，所以3超出了范围，无法转换，返回`NaN`</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;4&#x27;</span>,<span class="number">3</span>) <span class="comment">//将4作为三进制来处理，但是4无法用三进制的数据表示，返回NaN</span></span><br></pre></td></tr></table></figure><p>所以当我们在<code>map( )</code>函数中使用<code>parseInt( )</code>函数时，不能直接将<code>parseInt( )</code>函数作为<code>map( )</code>函数的参数，而是需要在<code>map( )</code>函数的回调函数中使用,并尽量指定基数。代码如下所示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> result = arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">val</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(val, <span class="number">10</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>parseFloat( )函数</strong></p><p><code>parseFloat</code>函数用于解析一个字符串，返回对应的浮点数，如果给定值不能转换为数值，则返回<code>NaN</code></p><p>与<code>parseInt( )</code>函数相比，<code>parseFloat( )</code>函数没有进制的概念。</p><p>注意:</p><p>第一：如果字符串前面有空白符，则会直接忽略掉，如果第一个字符就无法解析，则会直接返回<code>NaN</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&#x27;  2.6&#x27;</span>)<span class="comment">// 2.6</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&#x27;f2.6&#x27;</span>) <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure><p>第二：对于小数点，只能正确匹配第一个，第二个小数点是无效的，它后面的字符也都将被忽略。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&#x27;12.23&#x27;</span>)<span class="comment">// 12.23</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&#x27;12.23.39&#x27;</span>)<span class="comment">//12.23</span></span><br></pre></td></tr></table></figure><p><strong>总结:</strong></p><p>虽然<code>Number( )</code>,<code>parseInt( )</code>,<code>parseFloat( )</code>函数都能用于<code>Number</code>类型的转换，但是他们之间还是有一定的差异</p><p>第一：<code>Number( )</code> 函数转换的是传入的整个值，并不是像<code>parseInt( )</code>函数和<code>parseFloat( )</code>函数一样会从首位开始匹配符合条件的值。如果整个值不能被完整转换，则会返回<code>NaN</code></p><p>第二：<code>parseFloat( )</code>返回对应的浮点数，<code>parseInt( )</code>返回整数，并且<code>parseFloat( )</code>函数在解析时没有进制的概念，而<code>parseInt()</code></p><p>函数在解析时会依赖于出入的第二个参数来做值的转换。</p><h4 id="1-5-2-isNaN-函数与Number-isNaN-函数对比"><a href="#1-5-2-isNaN-函数与Number-isNaN-函数对比" class="headerlink" title="1.5.2  isNaN( )函数与Number.isNaN( )函数对比"></a>1.5.2  isNaN( )函数与Number.isNaN( )函数对比</h4><p><code>Number</code>类型数据中存在一个比较特殊的值<code>NaN</code>（<code>Not a Number</code>）,它表示应该返回数值却并未返回数值的情况。</p><p><code>NaN</code>存在的目的是在某些异常情况下保证程序的正常执行。例如<code>0/0</code>，在其他的语言中，程序会直接抛出异常，而在<code>JavaScript</code>中会返回<code>NaN</code>,程序可以正常运行。</p><p><code>NaN</code>有两个很明显的特点，第一个是任何涉及<code>NaN</code>的操作都会返回<code>NaN</code>,第二个是<code>NaN</code>与任何值都不相等，即使是与<code>NaN</code>本身相比。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NaN==NaN //false</span><br></pre></td></tr></table></figure><p>在判断<code>NaN</code>时，<code>ES5</code>提供了<code>isNaN</code>函数，<code>ES6</code>为<code>Number</code>类型增加了静态函数<code>isNaN( ).</code></p><p>问题：既然在<code>ES5</code>中提供了<code>isNaN</code>函数，为什么要在<code>ES6</code>中专门增加<code>Number.isNaN( )</code>函数呢？两者在使用上有什么区别？<br>我们先来看一下<code>isNaN( )</code>函数</p><p><code>isNaN( )</code>函数的作用是用来确定一个变量是不是<code>NaN</code>,<code>NaN</code>是一个<code>Number</code>类型的数值，只不过这个值无法用真实的数字表示。</p><p><code>isNaN</code>检测的机制：它在处理的时候会去判断传入的变量值能否转为数字，如果能转换成数字则会返回<code>false</code>,如果无法转换则会返回<code>true</code>.</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">isNaN</span>(<span class="title class_">NaN</span>)<span class="comment">//true</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="literal">undefined</span>) <span class="comment">//true</span></span><br><span class="line"><span class="built_in">isNaN</span>(&#123;&#125;)<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="literal">true</span>)<span class="comment">// false ,Number(true)会转换成数字1</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="literal">false</span>)<span class="comment">// false,Number(false)会转换成数字0</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="literal">null</span>) <span class="comment">// false,Number(null)会转换成数字0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="number">1</span>) <span class="comment">//false</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="string">&#x27;aaa&#x27;</span>) <span class="comment">//true 字符串aaa无法转换成数字</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="string">&#x27;1&#x27;</span>) <span class="comment">//false 字符串“1”可以转换成数字1.</span></span><br></pre></td></tr></table></figure><p>**<code>Number.isNaN( )</code>**函数</p><p>既然在全局的环境中有了<code>isNaN( )</code>函数，为什么在<code>ES6</code>中会专门针对<code>Number</code>类型增加一个<code>isNaN</code>函数呢？</p><p>这是因为全局的<code>isNaN</code>函数本身存在误导性，而<code>ES6</code>中的<code>Number.isNaN( )</code>函数会在真正意义上去判断变量是否为<code>NaN</code>,不会做数据类型转换。只有在传入的值为<code>NaN</code>,才会返回<code>true</code>,传入其它类型的值时会返回<code>false</code>.</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="title class_">NaN</span>)<span class="comment">// true</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="number">1</span>) <span class="comment">//false</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="literal">null</span>) <span class="comment">//false</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="literal">undefined</span>) <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>如果在非<code>ES6</code>环境中想用<code>ES6</code>中的<code>isNaN( )</code>函数，怎样处理呢？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="title class_">Number</span>.<span class="property">isNaN</span>)&#123;</span><br><span class="line">    <span class="title class_">Number</span>.<span class="property">isNaN</span>=<span class="keyword">function</span>(<span class="params">n</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> n!==n</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在所有类型的数据中，如果一个变量和自身进行比较，只有在变量为<code>NaN</code>时才会返回<code>false</code>,其它情况都是返回的<code>true</code>.</p><p>所以<code>n!==n</code>返回<code>true</code>,也只有在<code>n</code>的值为<code>NaN</code>的时候才会成立。</p><p><strong>总结：</strong></p><p><code>isNaN( )</code>函数与<code>Number.isNaN( )</code>函数的区别如下：</p><p>第一：<code>isNaN( )</code>函数在判断是否为<code>NaN</code>时，需要进行数据类型转换，只有在无法转换为数字时才会返回<code>true</code></p><p>第二：<code>Number.isNaN( )</code>函数在判断是否为<code>NaN</code>时，只需要判断传入的值是否为<code>NaN</code>,并不会进行数据类型转换。</p><h3 id="1-6-String类型"><a href="#1-6-String类型" class="headerlink" title="1.6 String类型"></a>1.6 String类型</h3><p>在<code>JavaScript</code>中的<code>String</code>类型可以通过双引号表示，也可以通过单引号表示，并且这两种方式是完全等效的。</p><h4 id="1-6-1-String类型定义"><a href="#1-6-1-String类型定义" class="headerlink" title="1.6.1 String类型定义"></a>1.6.1 String类型定义</h4><p>在<code>JavaScript</code>中有3种方式来创建字符串，分别是字符串字面量，直接调用<code>String( )</code>函数，还有就是通过<code>new String( )</code>构造函数的方式。</p><p><strong>字面量</strong></p><p>字符串字面量就是直接通过单引号或者是双引号定义字符串的方式。</p><p>注意：单引号和双引号是等价的。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str2=<span class="string">&quot;JavaScript&quot;</span></span><br></pre></td></tr></table></figure><p><strong>直接调用<code>String( )</code>函数</strong></p><p>直接调用<code>String( )</code>函数，会将传入的任何类型的值转换成字符串类型。在转换的时候，需要遵循如下的规则：</p><p>第一：如果是<code>Number</code>类型的值，则直接转换成对应的字符串。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">String</span>(<span class="number">123</span>) <span class="comment">// &#x27;123&#x27;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="number">123.56</span>) <span class="comment">// &quot;123.56&quot;</span></span><br></pre></td></tr></table></figure><p>第二：如果是<code>Boolean</code>类型的值，则直接转换成字符串的<code>&quot;true&quot;</code>或者是<code>&quot;false&quot;</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">String</span>(<span class="literal">true</span>)<span class="comment">// &quot;true&quot;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="literal">false</span>) <span class="comment">// &quot;false&quot;</span></span><br></pre></td></tr></table></figure><p>第三：如果值为<code>null</code>,直接转换成字符串的<code>&quot;null&quot;</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">String</span>(<span class="literal">null</span>) <span class="comment">// &quot;null&quot;</span></span><br></pre></td></tr></table></figure><p>第四：如果值为<code>undefined</code>,则转换成字符串的<code>undefined</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">String</span>(<span class="literal">undefined</span>) <span class="comment">//&quot;undefined&quot;</span></span><br></pre></td></tr></table></figure><p><strong>new String( )构造函数</strong></p><p>这种方式是使用<code>new</code>运算符来创建一个<code>String</code>的实例。转换的规则和<code>String( )</code>函数是一样的，最后返回的是一个<code>String</code>类型的对象实例。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">String</span>(<span class="number">678</span>) <span class="comment">//返回的对象中有length属性，并且可以通过下标获取对应的值。</span></span><br></pre></td></tr></table></figure><p><strong>三种创建方式的区别</strong></p><p>使用字符串字面量方式和直接调用<code>String( )</code>函数的方式得到的字符串都是基本字符串，而通过<code>new String( )</code>方式生成的字符串是字符串对象。</p><p>基本字符串在比较的时候，只需要比较字符串的值即可，而在比较字符串对象时，比较的是对象所在的地址。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str2=<span class="title class_">String</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">str===str2 <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str3=<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> str4=<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">str3===str4 <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>对于<code>str</code>与<code>str2</code>都是基本字符串，只是比较字符串的值就可以了，所以两者是相等的。</p><p>而对于<code>str3</code>与<code>str4</code>都是通过<code>String</code>类型的实例，所以在比较的时候需要判断变量是否指向了同一个对象，也就是内存地址是否相同，很明显，<code>str3</code>与<code>str4</code>都是在内存中新生成的地址，彼此各不相同。</p><p><strong>函数调用</strong></p><p>在<code>String</code>对象的原型链有一系列的函数，例如<code>indexOf( )</code>,<code>substring()</code>等等。</p><p>通过<code>String</code>对象的实例可以调用这些函数做字符串的处理。</p><p>但是，我们发现了一个问题，就是采用字面量方式定义的字符串也能够直接调用原型链上的这些函数。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;hello&#x27;</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;o&#x27;</span>) <span class="comment">//4</span></span><br></pre></td></tr></table></figure><p>这是为什么呢？</p><p>实际上基本字符串本身是没有字符串对象上的这些函数的，而在基本字符串调用字符串对象才有的函数时，<code>JavaScript</code>会自动将基本字符串转换为字符串对象，形成一种包装的类型，这样基本字符串就可以正常调用字符串对象的方法了。</p><h4 id="1-6-2-字符串常见算法"><a href="#1-6-2-字符串常见算法" class="headerlink" title="1.6.2  字符串常见算法"></a>1.6.2  字符串常见算法</h4><p>我们来看一下常见的<code>String</code>类型中的算法，这些在面试的时候也是经常被问到的。</p><p><strong>第一：字符串逆序输出</strong></p><p>字符串逆序输出就是将一个字符串以相反的顺序进行输出。</p><p>例如<code>abcdef</code>输出的结果是<code>fedcba</code></p><p>第一种算法</p><p>这里我们是借助与数组的<code>reverse()</code>函数来实现。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reverseString</span>(<span class="params">str</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> str.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">reverseString</span>(<span class="string">&quot;abcdef&quot;</span>));</span><br></pre></td></tr></table></figure><p>第二种算法：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=<span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="string">&#x27;abcdef&#x27;</span>) <span class="comment">//转换成数组,这里比第一种方式简单</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>))</span><br></pre></td></tr></table></figure><p>第三种算法：</p><p>这里可以通过字符串本身提供的<code>chartAt</code>函数来完成。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reverseString2</span>(<span class="params">str</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = str.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        result += str.<span class="title function_">charAt</span>(i);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">reverseString2</span>(<span class="string">&quot;abcdef&quot;</span>));</span><br></pre></td></tr></table></figure><p><strong>统计字符串中出现次数最多的字符及出现的次数</strong></p><p>假如有一个字符串<code>javascriptjavaabc</code>,其中出现最多的字符是<code>a</code>,出现了5次。</p><p><strong>算法1</strong></p><p>思想：通过<code>key-value</code>形式的对象存储字符串以及字符串出现的次数，然后逐个判断出现次数最大的值，同时获取对应的字符。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">getMaxCount</span>(<span class="params">str</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> json = &#123;&#125;; <span class="comment">//表示key-value结构的对象</span></span><br><span class="line">        <span class="comment">//遍历str的每一个字符得到key-value形式的对象</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">          <span class="comment">//判断json对象中是否有当前从str字符串中取出来的某个字符。</span></span><br><span class="line">          <span class="keyword">if</span> (!json[str.<span class="title function_">charAt</span>(i)]) &#123;</span><br><span class="line">            <span class="comment">//如果不存在，把当前字符作为key添加到json对象中，值为1</span></span><br><span class="line">            json[str.<span class="title function_">charAt</span>(i)] = <span class="number">1</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果存在，则让value值加1</span></span><br><span class="line">            json[str.<span class="title function_">charAt</span>(i)]++;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//存储出现次数最多的字符</span></span><br><span class="line">        <span class="keyword">var</span> maxCountChar = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">//存储出现最多的次数</span></span><br><span class="line">        <span class="keyword">var</span> maxCount = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//遍历json对象，找出出现次数最大的值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> json) &#123;</span><br><span class="line">          <span class="keyword">if</span> (json[key] &gt; maxCount) &#123;</span><br><span class="line">            maxCount = json[key];</span><br><span class="line">            maxCountChar = key;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          <span class="string">&quot;出现最多的字符是&quot;</span> + maxCountChar + <span class="string">&quot;,共出现了&quot;</span> + maxCount + <span class="string">&quot;次&quot;</span></span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> str = <span class="string">&quot;javascriptjavaabc&quot;</span>;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getMaxCount</span>(str));</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>算法2</strong></p><p>思路：这里主要是对字符串进行排序，然后通过<code>lastIndexOf()</code>函数获取索引值后，判断索引值的大小以获取出现的最大次数。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getMaxCount</span>(<span class="params">str</span>) &#123;</span><br><span class="line">       <span class="comment">//定义两个变量,分别表示出现最大次数和对应的字符。</span></span><br><span class="line">       <span class="keyword">var</span> maxCount = <span class="number">0</span>,</span><br><span class="line">         maxCountChar = <span class="string">&quot;&quot;</span>;</span><br><span class="line">       <span class="comment">//处理成数组，调用sort()函数排序，再处理成字符串</span></span><br><span class="line">       str = str.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">sort</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, j = str.<span class="property">length</span>; i &lt; j; i++) &#123;</span><br><span class="line">         <span class="keyword">var</span> char = str[i];</span><br><span class="line">         <span class="comment">//计算每个字符出现的次数</span></span><br><span class="line">         <span class="keyword">var</span> charCount = str.<span class="title function_">lastIndexOf</span>(char) - i + <span class="number">1</span>;</span><br><span class="line">         <span class="comment">//与次数最大值进行比较</span></span><br><span class="line">         <span class="keyword">if</span> (charCount &gt; maxCount) &#123;</span><br><span class="line">           <span class="comment">//更新maxCount与maxCountChar的值</span></span><br><span class="line">           maxCount = charCount;</span><br><span class="line">           maxCountChar = char;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//变更索引为字符出现的最后位置</span></span><br><span class="line">         i = str.<span class="title function_">lastIndexOf</span>(char);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;出现最多的字符是&quot;</span> + maxCountChar + <span class="string">&quot;,出现次数为&quot;</span> + maxCount;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getMaxCount</span>(<span class="string">&quot;caa&quot;</span>));</span><br></pre></td></tr></table></figure><p><strong>去除字符串中重复的字符</strong></p><p>假如存在一个字符串<code>&quot;javascriptjavaabc&quot;</code>,其中存有重复的字符，现在需要将这些重复的字符去掉，只保留一个。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeStringChar</span>(<span class="params">str</span>) &#123;</span><br><span class="line">       <span class="comment">//结果数组</span></span><br><span class="line">       <span class="keyword">var</span> result = [];</span><br><span class="line">       <span class="comment">//key-value形式的对象</span></span><br><span class="line">       <span class="keyword">var</span> json = &#123;&#125;;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">         <span class="comment">//当前处理的字符</span></span><br><span class="line">         <span class="keyword">var</span> char = str[i];</span><br><span class="line">         <span class="comment">//判断是否在对象中</span></span><br><span class="line">         <span class="keyword">if</span> (!json[char]) &#123;</span><br><span class="line">           <span class="comment">//将value值设置为true</span></span><br><span class="line">           json[char] = <span class="literal">true</span>;</span><br><span class="line">           <span class="comment">//添加到结果数组中</span></span><br><span class="line">           result.<span class="title function_">push</span>(char);</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> result.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">var</span> str = <span class="string">&quot;javascriptjavaabc&quot;</span>;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">removeStringChar</span>(str));</span><br></pre></td></tr></table></figure><p><strong>算法2</strong></p><p>这里可以使用<code>ES6</code>中的<code>Set</code>数据结构，可以结构具有自动去重的特性，可以直接将数组元素去重。</p><p>下面先来看一下<code>Set</code>的基本使用方式</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,]);</span><br><span class="line"><span class="comment">//console.log(set)  // Set(4) &#123;1, 2, 3, 4&#125;</span></span><br><span class="line">[...set] <span class="comment">// [1, 2, 3, 4] 通过扩展运算符将set中的内容转换成数组，同时可以看到已经去重。</span></span><br></pre></td></tr></table></figure><p>基本思路：</p><p>（1）将字符串处理成数组，然后作为参数传递给<code>Set</code>的构造函数，通过<code>new</code>运算符生成一个<code>Set</code>实例。</p><p>(2)  将<code>Set</code>通过扩展运算符(…)转换成数组的形式，最终转换成字符串获得需要的结果。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeStringChar</span>(<span class="params">str</span>) &#123;</span><br><span class="line">       <span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>(str.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line">       <span class="keyword">return</span> [...set].<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">var</span> str = <span class="string">&quot;javascriptjavaabc&quot;</span>;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">removeStringChar</span>(str));</span><br></pre></td></tr></table></figure><p><strong>判断一个字符串是否为回文字符串</strong></p><p>回文字符串指的是一个字符串正序和倒序是相同的，例如字符串<code>abcdcba</code>是一个回文字符串，而字符串<code>abcedba</code>就不是一个回文字符串。</p><p>需要注意的是，这里不区分字符的大小写，即<code>a</code>和<code>A</code>在判断的时候是相等的。</p><p><strong>算法1</strong></p><p>主要思想是将字符串按从前往后顺序的字符与按从后往前顺序的字符逐个进行比较，如果遇到不一样的值则直接返回<code>false</code>,否则返回<code>true</code>.</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isEequStr</span>(<span class="params">str</span>) &#123;</span><br><span class="line">       <span class="comment">//空字符串则直接返回true</span></span><br><span class="line">       <span class="keyword">if</span> (!str.<span class="property">length</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//统一转换成小写，同时再将其转换成数组</span></span><br><span class="line">       str = str.<span class="title function_">toLowerCase</span>().<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">       <span class="keyword">var</span> start = <span class="number">0</span>,</span><br><span class="line">         end = str.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">       <span class="comment">//通过while循环，判断正序和倒序的字母</span></span><br><span class="line">       <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">         <span class="comment">// 如果相等则更改比较的索引</span></span><br><span class="line">         <span class="keyword">if</span> (str[start] === str[end]) &#123;</span><br><span class="line">           start++;</span><br><span class="line">           end--;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">var</span> str = <span class="string">&quot;abcdcba&quot;</span>;</span><br></pre></td></tr></table></figure><p><strong>算法2</strong></p><p>思想：将字符串进行逆序的处理，然后与原来的字符串进行比较，如果相等则表示是回文字符串，否则不是回文字符串。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isEequStr</span>(<span class="params">str</span>) &#123;</span><br><span class="line">        <span class="comment">//字符串统一转换成小写的形式</span></span><br><span class="line">        str = str.<span class="title function_">toLowerCase</span>();</span><br><span class="line">        <span class="comment">//将字符串转换成数组</span></span><br><span class="line">        <span class="keyword">var</span> arr = str.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">//将数组逆序并转换成字符串</span></span><br><span class="line">        <span class="keyword">var</span> reverseStr = arr.<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> str === reverseStr;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isEequStr</span>(<span class="string">&quot;abccba&quot;</span>));</span><br></pre></td></tr></table></figure><h2 id="2、运算符"><a href="#2、运算符" class="headerlink" title="2、运算符"></a>2、运算符</h2><p>在<code>JavaScript</code>中的运算符包括：算术运算符，关系运算符，等于运算符，位运算符(与、或、非)等</p><h3 id="2-1-等于运算符"><a href="#2-1-等于运算符" class="headerlink" title="2.1 等于运算符"></a>2.1 等于运算符</h3><p>在<code>JavaScript</code>中等于分为双等(&#x3D;&#x3D;)比较，和三等于(&#x3D;&#x3D;&#x3D;)比较。</p><h4 id="2-1-1-三等于运算符"><a href="#2-1-1-三等于运算符" class="headerlink" title="2.1.1 三等于运算符"></a>2.1.1 三等于运算符</h4><p>(1)如果比较的值类型不相同，则直接返回<code>false</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>===<span class="string">&#x27;1&#x27;</span> <span class="comment">//false</span></span><br><span class="line"><span class="literal">true</span>===<span class="string">&#x27;true&#x27;</span> <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>这里还需要注意的一点就是，基本数据类型存在包装类型，在没有使用<code>new</code>操作符时，简单类型的比较实际上就是值的比较，而使用了<code>new</code>操作符以后，实际得到的是引用类型的值，在判断时会因为类型不同而直接返回<code>false</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>===<span class="title class_">Number</span>(<span class="number">1</span>) <span class="comment">//true </span></span><br><span class="line"><span class="number">1</span>===<span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">1</span>) <span class="comment">//false</span></span><br><span class="line"><span class="string">&#x27;hello&#x27;</span>===<span class="title class_">String</span>(<span class="string">&#x27;hello&#x27;</span>) <span class="comment">//true</span></span><br><span class="line"><span class="string">&#x27;hello&#x27;</span>===<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;hello&#x27;</span>) <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>(2) 如果比较的值都是数值类型，则直接比较值的大小，相等则返回<code>true</code>,否则返回<code>false</code>,需要注意的是，如果参与比较的值中有任何一方为<code>NaN</code>,则返回<code>false</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">26</span>===<span class="number">26</span> <span class="comment">//true</span></span><br><span class="line"><span class="number">34</span>===<span class="title class_">NaN</span> <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>（3）如果比较的值是字符串类型，则判断每个字符是否相等，如果全部相等，返回<code>true</code>,否则返回<code>false</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;abc&#x27;</span>===<span class="string">&#x27;abc&#x27;</span> <span class="comment">//true</span></span><br><span class="line"><span class="string">&#x27;abc&#x27;</span>===<span class="string">&#x27;abd&#x27;</span> <span class="comment">//false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（4）关于<code>null</code>与<code>undefined</code>比较</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="literal">null</span>===<span class="literal">null</span> <span class="comment">//true</span></span><br><span class="line"><span class="literal">undefined</span>===<span class="literal">undefined</span> <span class="comment">//true</span></span><br><span class="line"><span class="literal">undefined</span>===<span class="literal">null</span> <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>(5)如果比较的值都是引用类型，则比较的是引用类型的地址，当两个引用指向同一个地址时，则返回<code>true</code>,否则返回<code>false</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=[]</span><br><span class="line"><span class="keyword">var</span> b=a</span><br><span class="line"><span class="keyword">var</span> c=[]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a===b) <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a===c) <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;hello&#x27;</span>)===<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;hello&#x27;</span>)<span class="comment">//false 两个不同对象，地址不相同</span></span><br><span class="line"><span class="comment">//创建构造函数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">userName</span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">userName</span> = userName;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line">     <span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(p1 === p2);<span class="comment">//false  两个不同对象，地址不相同</span></span><br></pre></td></tr></table></figure><h4 id="2-1-2-双等于运算符"><a href="#2-1-2-双等于运算符" class="headerlink" title="2.1.2 双等于运算符"></a>2.1.2 双等于运算符</h4><p>相比于三等于运算符，双等于运算符在进行相等比较的时候，要复杂一点。因为它不区分数据类型，而且会做隐式类型的转换。</p><p>双等于在进行比较的时候要注意的点：</p><p>如果比较的值类型不相同，则会按照下面的规则进行转换后再进行比较</p><p>(1) 如果比较的一方是<code>null</code>或者是<code>undefined</code>,只有在另一方是<code>null</code>或者是<code>undefined</code>的情况下才返回<code>true</code>,否则返回<code>false</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="literal">null</span>==<span class="literal">undefined</span> <span class="comment">//true</span></span><br><span class="line"><span class="literal">null</span>==<span class="number">1</span> <span class="comment">//false</span></span><br><span class="line"><span class="literal">undefined</span>==<span class="number">2</span> <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>（2）如果比较的是字符串和数值类型数据，则会将字符串转换为数值后再进行比较，如果转换后的数值是相等的则返回<code>true</code>,否则返回<code>false</code>.</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>==<span class="string">&#x27;1&#x27;</span> <span class="comment">//true</span></span><br><span class="line"><span class="string">&#x27;222&#x27;</span>==<span class="number">222</span> <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>（3）如果比较的时候，有一方的类型是<code>boolean</code>类型，会将<code>boolean</code>类型进行转换，<code>true</code>转换为1,<code>false</code>转换0，然后在进行比较。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;1&#x27;</span>==<span class="literal">true</span></span><br><span class="line"><span class="string">&#x27;2&#x27;</span>==<span class="literal">true</span> <span class="comment">//false</span></span><br><span class="line"><span class="string">&#x27;0&#x27;</span>==<span class="literal">false</span> <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="2-2-typeof运算符"><a href="#2-2-typeof运算符" class="headerlink" title="2.2 typeof运算符"></a>2.2 typeof运算符</h3><p><code>typeof</code>运算符用于返回对应的数据类型，</p><p>基本的使用方式</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typeof operator</span><br><span class="line">typeof (operator)</span><br></pre></td></tr></table></figure><p><code>operator</code>表示要返回类型的操作数，可以是引用类型，也可以是基本数据类型。</p><p>括号有时候是必须的，如果不加上括号将会因为优先级的问题，而得不到我们想要的结果。</p><p>下面我们看一下<code>typeof</code>的使用场景</p><p>（1）处理<code>Undefined</code>类型</p><p>我们知道<code>Undefined</code>类型的值只有一个<code>undefined</code>,<code>typeof</code>运算符在处理如下情况的时候，返回的结果都是<code>undefined</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">处理undefined本身</span><br><span class="line">未声明的变量</span><br><span class="line">已经声明但是没有初始化的变量</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span> <span class="comment">//&quot;undefined&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> abc <span class="comment">//&quot;undefined&quot; ,未声明的变量abc，通过typeof返回的是undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum</span><br><span class="line"><span class="keyword">typeof</span> sum <span class="comment">//undefined  已经声明但是没有初始化的变量</span></span><br></pre></td></tr></table></figure><p>(2)处理<code>Boolean</code>类型的值</p><p><code>Boolean</code>类型的值有两个，分别是<code>true</code>和<code>false</code>,<code>typeof</code>运算符在处理这两个值的时候返回都是<code>boolean</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> b=<span class="literal">true</span></span><br><span class="line"><span class="keyword">typeof</span> b <span class="comment">//&quot;boolean&quot;</span></span><br></pre></td></tr></table></figure><p>(3) 处理<code>Number</code>类型的值</p><p>对于<code>Number</code>类型的数，<code>typeof</code>运算符在处理时会返回<code>number</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">666</span> <span class="comment">//number</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">66.66</span> <span class="comment">//number</span></span><br></pre></td></tr></table></figure><p>（4）处理<code>String</code>类型的值</p><p>字符串类型，<code>typeof</code>返回的是<code>string</code>,包括空字符串。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="string">&#x27;aaa&#x27;</span> <span class="comment">//string</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&#x27;&#x27;</span> <span class="comment">//string</span></span><br></pre></td></tr></table></figure><p>(5)处理<code>Function</code>类型的值</p><p>函数的定义，包括函数的声明，<code>typeof</code>返回的值<code>function</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="keyword">typeof</span> fun <span class="comment">// &quot;function&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fun2=<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="keyword">typeof</span> fun2 <span class="comment">// &quot;function&quot;</span></span><br></pre></td></tr></table></figure><p>关于通过<code>class</code>关键字定义的类，通过<code>typoef</code>计算返回的值也是<code>function</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Obj</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">Obj</span> <span class="comment">// &quot;function&quot;</span></span><br></pre></td></tr></table></figure><p><code>class</code>是在<code>ES6</code>中新增的一个关键字，原理依旧是原型继承，也就是说本质上仍然是一个<code>Function</code></p><p>(6) 处理<code>Object</code>类型的值</p><p>对象字面量的形式，返回的是<code>object</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;<span class="attr">userName</span>:<span class="string">&#x27;zhangsan&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">typeof</span> obj <span class="comment">//&quot;object&quot;</span></span><br></pre></td></tr></table></figure><p>数组，通过<code>typeof</code>计算返回的值是<code>object</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">typeof</span> arr <span class="comment">// &quot;object&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2=<span class="keyword">new</span> <span class="title class_">Array</span>()</span><br><span class="line"><span class="keyword">typeof</span> arr2 <span class="comment">//&quot;object&quot;</span></span><br></pre></td></tr></table></figure><p>(7) <code>typeof</code>运算符对<code>null</code>的处理</p><p><code>typeof</code>运算符对<code>null</code>的处理，返回的是<code>object</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">//object</span></span><br></pre></td></tr></table></figure><p>注意：在前面我们提到过，在使用<code>typeof</code>的时候，括号有时候是必须的，如果不加上括号会因为优先级问题，得不到我们想要的结果。</p><p>例如如下代码所示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">123</span></span><br><span class="line"><span class="keyword">typeof</span> (num + <span class="string">&#x27;hello&#x27;</span>)<span class="comment">// string</span></span><br><span class="line"><span class="keyword">typeof</span> num + <span class="string">&quot; hello&quot;</span>  <span class="comment">//&quot;number hello&quot;</span></span><br></pre></td></tr></table></figure><p>通过上面的代码，我们知道<code>typeof</code>运算符的优先级要高于字符串的拼接运算符<code>(+)</code>,但是优先级低于小括号，所以在未使用括号时，会优先处理<code>typeof num</code>, 返回的是<code>number</code>,然后与<code>hello</code>字符串进行拼接，得到的最终的结果就是<code>number hello</code></p><p>下面，我们再来看一段代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">6</span>/<span class="number">2</span> <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，会先执行<code>typeof 6</code> 得到的结果为<code>number</code>,然后除以2，一个字符串除以2，得到的结果为<code>NaN</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> (<span class="number">6</span>/<span class="number">2</span>) <span class="comment">//&quot;number&quot;</span></span><br></pre></td></tr></table></figure><p>这里会先计算括号中的内容，然后在通过<code>typeof</code>进行计算。</p><h2 id="3、常用的判空方法"><a href="#3、常用的判空方法" class="headerlink" title="3、常用的判空方法"></a>3、常用的判空方法</h2><p>在<code>JavaScript</code>中判断一个变量是否为空，我们往往会想到对变量取反，然后判断是否为<code>true</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!x)&#123; &#125;</span><br></pre></td></tr></table></figure><p>这是一个非常简单的判断变量是否为空的方法，但是其实涉及到的场景却很多，这里我们就分情况来看一下。</p><p><strong>（1）判断变量为空对象</strong></p><p> <strong>判断变量为<code>null</code>或者为<code>undefined</code></strong></p><p>判断一个变量是否为空时，可以直接将变量与<code>null</code>或者是<code>undefined</code>进行比较，需要注意的是双等号和三等好直接的区别。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(obj==<span class="literal">null</span>) <span class="comment">//可以判断null或者是undefined的情况</span></span><br><span class="line"><span class="keyword">if</span>(obj===<span class="literal">undefined</span>) <span class="comment">//只能判断undefined的情况    </span></span><br></pre></td></tr></table></figure><p><strong>判断变量为空对象<code>&#123; &#125;</code></strong></p><p>判断一个变量是否为空对象时，可以通过<code>for...in</code>语句遍历变量的属性，然后调用<code>hasOwnProperty( )</code>函数，判断是否有自身存在的属性，如果存在就不是空对象，如果不存在自身的属性（不包括继承的属性），那么变量为空对象。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isEmpty</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">          <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="attr">username</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isEmpty</span>(obj));<span class="comment">// false,表明obj这个对象是有自己的属性，所以不是空对象</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isEmpty</span>(obj));<span class="comment">//true,这里将obj对象的属性去掉了，返回的值为true,表明没有自己的属性，表示空对象</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这里通过构造函数的形式创建对象，并且指定了age属性</span></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">20</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isEmpty</span>(p));<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>下面看一下另外一种情况</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">      <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">userName</span> = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">      <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isEmpty</span>(p)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，变量<code>p</code>是通过<code>new</code>操作符得到的<code>Person</code>对象的实例，所以<code>p</code>会继承<code>Person</code>原型链上的<code>userName</code>属性，但是因为不是自身的属性，所以会被判断为空，所以返回<code>true</code>.</p><p><strong>(2)判断变量为空数组</strong></p><p>判断变量是否为空数组时，首先要判断变量是否为数组，然后通过数组的<code>length</code>属性确定。(<strong><code>instanceof</code> 用于判断一个变量是否某个对象的实例</strong>)</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=<span class="keyword">new</span> <span class="title class_">Array</span>()</span><br><span class="line">arr <span class="keyword">instanceof</span> <span class="title class_">Array</span> &amp;&amp; arr.<span class="property">length</span>===<span class="number">0</span></span><br></pre></td></tr></table></figure><p>以上两个条件都满足时，变量就是一个空数组。</p><p><strong>(3) 判断变量为空字符串</strong></p><p>判断变量是否为空字符串时，可以直接将其与空字符串进行比较，或者调用<code>trim()</code>函数去掉前后的空格以后，在去判断字符串的长度。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str==<span class="string">&#x27;&#x27;</span>||str.<span class="title function_">trim</span>().<span class="property">length</span>==<span class="number">0</span></span><br></pre></td></tr></table></figure><p>当满足以上两个条件中的任意一个时，变量就是一个空字符串。</p><p><strong>（4）判断变量为0或者<code>NaN</code></strong></p><p>当一个变量为<code>Number</code>类型时，判断变量是否为0或者<code>NaN</code>,因为<code>NaN</code>与任何值比较都是<code>false</code>,所以这里我们通过取非来完成判断。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">!(<span class="title class_">Number</span>(num)&amp;&amp;num)==<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>当上述代码返回的结果为<code>true</code>，表明变量为0或者是<code>NaN</code></p><p>（5）</p><p>在最开始的时候，我们提到的</p><p>在<code>JavaScript</code>中判断一个变量是否为空，我们往往会想到对变量取反，然后判断是否为<code>true</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!x)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式会包含多种情况，下面我们总结一下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">变量为<span class="literal">null</span></span><br><span class="line">变量为<span class="literal">undefined</span></span><br><span class="line">变量为空字符串<span class="string">&#x27;&#x27;</span></span><br><span class="line">变量为数字<span class="number">0</span></span><br><span class="line">变量为<span class="title class_">NaN</span></span><br></pre></td></tr></table></figure><h2 id="4、流程控制"><a href="#4、流程控制" class="headerlink" title="4、流程控制"></a>4、流程控制</h2><p>关于流程控制这块内容，这里我们重点看一下<code>Switch</code>结构</p><p>看一下如下代码执行的结果</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getStringValue</span>(<span class="params">str</span>) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (str) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;3&quot;</span>:</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">getStringValue</span>(<span class="string">&quot;2&quot;</span>); <span class="comment">//b</span></span><br><span class="line">    <span class="title function_">getStringValue</span>(<span class="string">&quot;5&quot;</span>); <span class="comment">//d</span></span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>以上的代码非常简单。分别输出的是<code>b</code>和<code>d</code></p><p>但是，这里我们把对<code>getStringValue</code>函数的调用修改成如下的形式：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getStringValue</span>(<span class="number">3</span>) <span class="comment">//d</span></span><br></pre></td></tr></table></figure><p>这里将参数修改成数字3，得到的结果是<code>d</code>.原因是：在<code>JavaScript</code>中的关于<code>case</code>的比较是采用严格相等的方式(&#x3D;&#x3D;&#x3D;)。在上面的函数调用中，传递的是数字类型的3，而在<code>case</code>中比较的是<code>String</code>字符串的’3’,两者按照严格方式进行对比，是不相等的。所以只能执行<code>default</code>,输出字母<code>d</code>.</p><p>下面，再来看如下的调用</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getStringValue</span>(<span class="title class_">String</span>(<span class="string">&quot;3&quot;</span>)); <span class="comment">//c</span></span><br></pre></td></tr></table></figure><p>上面调用的结果是<code>c</code>.</p><p>在前面的课程中，我们讲解过：字符串的字面量和直接调用<code>String( )</code>函数生成的字符串都是基本的字符串，它们在本质上都是一样的。</p><p>所以在严格模式下进行比较是相等的。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">String</span>(<span class="string">&#x27;3&#x27;</span>)===<span class="string">&#x27;3&#x27;</span> <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>下面再来看另外一种调用方式</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getStringValue</span>(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;3&quot;</span>)); <span class="comment">//d</span></span><br></pre></td></tr></table></figure><p>通过<code>new</code>关键字创建的是字符串对象，这里采用严格模式进行比较，比较的是字符串对象的内存地址是否相同。而当与字符串的字面量进行比较时，会返回<code>false</code>.</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;3&#x27;</span>)===<span class="string">&#x27;3&#x27;</span> <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>所以在运行整个<code>getStringValue</code>整个函数的时候，得到的结果为<code>d</code>.</p><h1 id="二、引用数据类型"><a href="#二、引用数据类型" class="headerlink" title="二、引用数据类型"></a>二、引用数据类型</h1><p>引用类型有<code>Object</code>,<code>Function</code>,<code>Array</code>,<code>Date</code>，<code>Math</code>等。</p><p>引用类型与基本数据类型的区别:</p><p>(1)引用数据类型的实例需要通过<code>new</code>关键字创建。</p><p>(2)将引用数据类型赋值给变量，实际上赋值的是内存地址</p><p>(3)引用数据类型的比较是对内存地址的比较，而基本数据类型的比较是对值的比较。</p><h2 id="1、Object类型"><a href="#1、Object类型" class="headerlink" title="1、Object类型"></a>1、Object类型</h2><p><code>Object</code>类型是<code>JavaScript</code>中使用最多的一个类型。</p><p>大部分的引用数据类型都是<code>Object</code>类型。</p><p>由于引用数据类型的实例都是通过<code>new</code>关键字来创建的，所以我们先来探讨有关<code>new</code>操作相关的问题。</p><h3 id="1-1-new-操作符的作用"><a href="#1-1-new-操作符的作用" class="headerlink" title="1.1  new 操作符的作用"></a>1.1  new 操作符的作用</h3><p><code>new</code>操作符在执行过程中会改变<code>this</code>的指向，所以下面我们先来看一下<code>this</code>的用法。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">userName, age</span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">userName</span> = userName;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">20</span>));</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>执行上面的代码，发现输出的是一个<code>Person</code>对象，包含了<code>userName</code>和<code>age</code>的数据。</p><p>但是，问题是，在构造函数<code>Person</code>中，我们没有添加<code>return</code>,为什么会有返回值呢？</p><p>其实就是<code>this</code>这个关键字起作用。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">userName, age</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">//输出的是Person&#123; &#125;对象</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">userName</span> = userName;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">20</span>);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>执行上面的代码，我们可以看到<code>this</code> 这里就是一个<code>Person</code>的空对象，后面的两行代码就相当于给<code>Person</code>对象添加了<code>userName</code>和<code>age</code>这两个属性。</p><p>下面我们把代码修改成如下的形式：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">     <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">userName, age</span>) &#123;</span><br><span class="line">       <span class="keyword">var</span> <span class="title class_">Person</span> = &#123;&#125;;</span><br><span class="line">       <span class="title class_">Person</span>.<span class="property">userName</span> = userName;</span><br><span class="line">       <span class="title class_">Person</span>.<span class="property">age</span> = age;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">20</span>));</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>以上打印的结果中，输出的是<code>Person&#123;&#125;</code>，并没有包含<code>userName</code>和<code>age</code>,原因是什么呢？</p><p>因为在 构造函数中如果没有添加<code>return</code>,则默认返回的是<code>return this</code>.</p><p>修改后的代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">userName, age</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> <span class="title class_">Person</span> = &#123;&#125;;</span><br><span class="line">      <span class="title class_">Person</span>.<span class="property">userName</span> = userName;</span><br><span class="line">      <span class="title class_">Person</span>.<span class="property">age</span> = age;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Person</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">20</span>));</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>对<code>this</code>有了一个简单的了解以后，下面重点看如下代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person= <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure><p>从上面的代码中，主要的作用就是创建一个<code>Person</code>对象，然后赋值给了<code>person</code>这个变量，该变量中包含了<code>Person</code>对象中的属性和函数。</p><p>其实，在<code>new</code>操作符做了如下3件事情。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;&#125;; <span class="comment">// 创建一个空对象</span></span><br><span class="line">person.<span class="property">__proto__</span>=<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>; <span class="comment">// 将__proto__属性绑定到原型链上</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="title function_">call</span>(person) <span class="comment">// 将this指向新对象</span></span><br></pre></td></tr></table></figure><h3 id="1-2-原型对象理解"><a href="#1-2-原型对象理解" class="headerlink" title="1.2 原型对象理解"></a>1.2 原型对象理解</h3><h4 id="函数对象的-prototype-属性"><a href="#函数对象的-prototype-属性" class="headerlink" title="函数对象的 prototype 属性"></a>函数对象的 prototype 属性</h4><p>我们创建的每一个函数都有一个 <code>prototype</code> 属性，这个属性是一个指针，指向一个对象。这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法，简单来说，该函数实例化的所有对象的<code>__proto__</code>的属性指向这个对象，它是该函数所有实例化对象的原型。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为原型对象添加方法</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面我们来看一下它们之间的关系。</p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/prototype.png"></p><p><strong>简易图</strong></p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2%5C%E7%AE%80%E6%98%93prototype.png"></p><h4 id="constructor-属性"><a href="#constructor-属性" class="headerlink" title="constructor 属性"></a>constructor 属性</h4><p>当函数创建，<code>prototype </code>属性指向一个原型对象时，在默认情况下，这个原型对象将会获得一个 constructor 属性，这个属性是一个指针，指向 <code>prototype</code> 所在的函数对象。</p><p>拿前面的一个例子来说 <code>Person.prototype.constructor</code> 就指向 <code>Person </code>函数对象。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> == <span class="title class_">Person</span>) </span><br></pre></td></tr></table></figure><p>下面我们来更新一下它们之间的关系图。</p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2%5Cconstructor.png"></p><pre><code>  **简易图**</code></pre><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2%5Cconstructor.jpg"></p><h4 id="对象的-proto-属性"><a href="#对象的-proto-属性" class="headerlink" title="对象的 __proto__ 属性"></a>对象的 <code>__proto__ </code>属性</h4><p>当我们调用构造函数创建一个新实例后，在这个实例的内部将包含一个指针，指向构造函数的原型对象.</p><p>根据前面的 <code>Person</code> 构造函数我们新建一个实例</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从上面我们可以看出，这个连接是存在与实例与构造函数的原型对象之间的，而不是存在于实例和构造函数之间的。 </p><p>下面我们来看一下现在这几个对象之间的关系</p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/proto.png"></p><p><code>isPrototypeOf()</code> 方法用于测试一个对象是否存在于另一个对象的原型链上。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(student)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>简易图</strong></p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2%5Cproto.jpg"></p><h3 id="1-3-原型属性"><a href="#1-3-原型属性" class="headerlink" title="1.3 原型属性"></a>1.3 原型属性</h3><h5 id="属性访问"><a href="#属性访问" class="headerlink" title="属性访问"></a>属性访问</h5><p>每当代码读取对象的某个属性时，首先会在对象本身搜索这个属性，如果找到该属性就返回该属性的值，如果没有找到，则继续搜索该对象对应的原型对象，以此类推下去。</p><p>因为这样的搜索过程，因此我们如果在实例中添加一个属性时，这个属性就会屏蔽原型对象中保存的同名属性，因为在实例中搜索到该属性后就不会再向后搜索了。</p><h5 id="属性判断"><a href="#属性判断" class="headerlink" title="属性判断"></a>属性判断</h5><p>既然一个属性既可能是实例本身的，也有可能是其原型对象的，那么我们该如何来判断呢？</p><p>在属性确认存在的情况下，我们可以使用 <code>hasOwnProperty() </code>方法来判断一个属性是存在与实例中，还是存在于原型中</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&quot;laker&quot;</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="property">name</span>); <span class="comment">// laker</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;name&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">student.<span class="property">name</span> = <span class="string">&quot;xiaoming&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="property">name</span>); <span class="comment">//xiaoming 屏蔽了原型对象中的 name 属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;name&quot;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hasPrototypeProperty</span>(<span class="params">object, name</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> !object.<span class="title function_">hasOwnProperty</span>(name) &amp;&amp; (name <span class="keyword">in</span> object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="所有属性获取"><a href="#所有属性获取" class="headerlink" title="所有属性获取"></a>所有属性获取</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;KXY&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">        <span class="attr">job</span>: <span class="string">&quot;student&quot;</span>,</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> kxy = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(kxy, <span class="string">&quot;sex&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&quot;female&quot;</span>,</span><br><span class="line">        <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(kxy)); <span class="comment">//[&quot;name&quot;] //无法获取不可枚举的属性与原型链上继承的属性</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(kxy));<span class="comment">//[&quot;name&quot;, &quot;sex&quot;]</span></span><br><span class="line"><span class="comment">//for...in能获取原型链上继承的属性，无法获取不可枚举的属性</span></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> pro <span class="keyword">in</span> kxy) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;kxy.&quot;</span> + pro + <span class="string">&quot; = &quot;</span> + kxy[pro]);<span class="comment">// kxy.name = KXY</span></span><br><span class="line">        <span class="comment">//kxy.job = student</span></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p><strong>怎样判断属性是否为实例属性并且是否可枚举</strong></p><p>如果想判断指定名称的属性是否为实例属性并且是否可枚举的，可以使用<code>propertyIsEnumerable</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">userName</span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">userName</span> = userName;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHello</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span> + <span class="variable language_">this</span>.<span class="property">userName</span>);</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="keyword">var</span> stu = <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(stu.<span class="title function_">propertyIsEnumerable</span>(<span class="string">&quot;userName&quot;</span>)); <span class="comment">//true:userName为自身定义的实例属性</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(stu.<span class="title function_">propertyIsEnumerable</span>(<span class="string">&quot;age&quot;</span>)); <span class="comment">// false:age属性不存在，返回false</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(stu.<span class="title function_">propertyIsEnumerable</span>(<span class="string">&quot;sayHello&quot;</span>)); <span class="comment">// false :sayHello属于原型上的函数</span></span><br><span class="line">     <span class="comment">//将userName属性设置为不可枚举</span></span><br><span class="line">     <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(stu, <span class="string">&quot;userName&quot;</span>, &#123;</span><br><span class="line">       <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">     &#125;);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(stu.<span class="title function_">propertyIsEnumerable</span>(<span class="string">&quot;userName&quot;</span>)); <span class="comment">// false: userName设置了不可枚举</span></span><br></pre></td></tr></table></figure><h3 id="1-4-Object-create-方法"><a href="#1-4-Object-create-方法" class="headerlink" title="1.4 Object.create( )方法"></a>1.4 <code>Object.create( )</code>方法</h3><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>该函数的主要作用是创建并返回一个指定原型和指定属性的新对象，语法格式如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">create</span>(prototype,propertyDescriptor)</span><br></pre></td></tr></table></figure><p><code>prototype</code>属性为对象的原型（必须），可以为<code>null</code>,如果为<code>null</code>，则对象的原型为<code>undefined</code>.</p><p><code>propertyDescriptor</code>表示的是属性描述符（可选），具体的格式如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">propertyName</span>:&#123;</span><br><span class="line">    <span class="attr">value</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">writable</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">enumerable</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>:<span class="literal">true</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本实现：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">     <span class="keyword">const</span> person = &#123;</span><br><span class="line">       <span class="attr">userName</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">       <span class="attr">sayHello</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello &quot;</span> + <span class="variable language_">this</span>.<span class="property">userName</span>);</span><br><span class="line">       &#125;,</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="keyword">const</span> stu = <span class="title class_">Object</span>.<span class="title function_">create</span>(person);</span><br><span class="line">     stu.<span class="property">userName</span> = <span class="string">&quot;lisi&quot;</span>;</span><br><span class="line">     stu.<span class="title function_">sayHello</span>(); <span class="comment">//hello lisi  覆盖了person中的userName属性原有的值</span></span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>通过以上的代码，可以看到<code>stu</code>对象的原型是<code>person</code>.也就是<code>stu.__proto__===person</code></p><p>下面再来看一个案例：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>, &#123;</span><br><span class="line">        <span class="attr">userName</span>: &#123;</span><br><span class="line">          <span class="attr">value</span>: <span class="string">&quot;wangwu&quot;</span>,</span><br><span class="line">          <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">age</span>: &#123;</span><br><span class="line">          <span class="attr">value</span>: <span class="number">23</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">userName</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>); </span><br><span class="line">      obj.<span class="property">age</span> = <span class="number">26</span>;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>); </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> o <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(o);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">delete</span> obj.<span class="property">userName</span>;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">userName</span>); </span><br><span class="line">      <span class="keyword">delete</span> obj.<span class="property">age</span>;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>); </span><br></pre></td></tr></table></figure><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>通过如下的伪代码来查看对应的实现原理</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property">create</span>=<span class="keyword">function</span>(<span class="params">proto,propertiesObject</span>)&#123;</span><br><span class="line">    <span class="comment">//省略了其它判断操作</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">    F.<span class="property"><span class="keyword">prototype</span></span>=proto;</span><br><span class="line">    <span class="keyword">if</span>(propertiesObject)&#123; <span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(F, propertiesObject)&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以上的代码，我们可以得出如下的结论：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f=<span class="keyword">new</span> <span class="title function_">F</span>()</span><br><span class="line">f.<span class="property">__proto__</span>===F.<span class="property"><span class="keyword">prototype</span></span></span><br></pre></td></tr></table></figure><p>下面我们可以通过一个例子来验证一下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">x</span>: <span class="number">12</span>, <span class="attr">y</span>: <span class="number">13</span> &#125;;</span><br><span class="line">     <span class="keyword">var</span> test = <span class="title class_">Object</span>.<span class="title function_">create</span>(obj);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(test); </span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(test.<span class="property">x</span>); </span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(test.<span class="property">__proto__</span>.<span class="property">x</span>);</span><br></pre></td></tr></table></figure><p><strong>最后，这里演示一下<code>Object.defineProperties</code>方法的基本使用</strong></p><p>该方法的主要作用就是添加或修改对象的属性。</p><p>如下代码所示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;&#125;;</span><br><span class="line">     </span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(person, &#123;</span><br><span class="line">        <span class="attr">userName</span>: &#123;</span><br><span class="line">          <span class="attr">value</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">          <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">age</span>: &#123;</span><br><span class="line">          <span class="attr">value</span>: <span class="number">12</span>,</span><br><span class="line">          <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> person) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(p); </span><br><span class="line">      &#125;</span><br><span class="line">      person.<span class="property">age</span> = <span class="number">20</span>;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">age</span>); </span><br></pre></td></tr></table></figure><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p>对于<code>Object.create</code>方法很重要的一个应用场景是用来实现继承</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, sex</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getInfo</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;getInfo: [name:&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;, sex:&quot;</span> + <span class="variable language_">this</span>.<span class="property">sex</span> + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;jojo&quot;</span>, <span class="string">&quot;femal&quot;</span>);</span><br><span class="line">      <span class="keyword">var</span> b = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">name</span>); </span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">name</span>); </span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">getInfo</span>); </span><br></pre></td></tr></table></figure><p>下面看一下怎样实现完整的继承操作。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, sex</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getInfo</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;getInfo: [name:&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;, sex:&quot;</span> + <span class="variable language_">this</span>.<span class="property">sex</span> + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name, sex, age</span>) &#123;</span><br><span class="line">        <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name, sex); </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>); </span><br><span class="line">      <span class="keyword">var</span> s = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;coco&quot;</span>, <span class="string">&quot;femal&quot;</span>, <span class="number">25</span>);</span><br><span class="line">      s.<span class="title function_">getInfo</span>();</span><br></pre></td></tr></table></figure><p>下面，我们简单的分析一下，上面的代码。</p><p>对象<code>s</code>的<code>__proto__</code>指向的是<code>s</code>的构造函数<code>Student</code>的<code>prototype</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">s.<span class="property">__proto__</span>===<span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> </span><br></pre></td></tr></table></figure><p>那么<code>Student.prototype</code>的<code>__proto__</code>指向什么呢？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>===<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> </span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">s.<span class="property">__proto__</span>.<span class="property">__proto__</span>===<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> </span><br></pre></td></tr></table></figure><p>而我们知道对象<code>s</code>是有<code>Student</code> 创建的，所以其构造函数为<code>Student</code>,所以我们在修改了原型以后，这里应该重新修正构造函数。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, sex</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getInfo</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;getInfo: [name:&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;, sex:&quot;</span> + <span class="variable language_">this</span>.<span class="property">sex</span> + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name, sex, age</span>) &#123;</span><br><span class="line">        <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name, sex); </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">      <span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Student</span>;     </span><br><span class="line">      <span class="keyword">var</span> s = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;coco&quot;</span>, <span class="string">&quot;femal&quot;</span>, <span class="number">25</span>);</span><br><span class="line">      s.<span class="title function_">getInfo</span>();</span><br></pre></td></tr></table></figure><h3 id="1-5-Object-create-与new-Object-的区别"><a href="#1-5-Object-create-与new-Object-的区别" class="headerlink" title="1.5 Object.create( )与new Object()的区别"></a>1.5 <code>Object.create( )</code>与<code>new Object()</code>的区别</h3><h3 id="1-6-模拟new操作符的实现"><a href="#1-6-模拟new操作符的实现" class="headerlink" title="1.6 模拟new操作符的实现"></a>1.6 模拟<code>new</code>操作符的实现</h3><p>在前面我们介绍了<code>new</code>操作符所做的三件事情，下面我们来模拟实现一下。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">function</span> <span class="title function_">New</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">           <span class="keyword">var</span> res = <span class="title class_">Person</span>.<span class="title function_">apply</span>(obj, <span class="variable language_">arguments</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">typeof</span> res === <span class="string">&quot;object&quot;</span> ? res : obj;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">New</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">19</span>));</span><br></pre></td></tr></table></figure><h3 id="1-7-原型链理解"><a href="#1-7-原型链理解" class="headerlink" title="1.7 原型链理解"></a>1.7 原型链理解</h3><p>下面我们通过一个案例来看一个简单的原型链过程。初步代码如下</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> A=<span class="keyword">function</span>(<span class="params"></span>)&#123; &#125;</span><br><span class="line"><span class="keyword">var</span> a=<span class="keyword">new</span> <span class="title function_">A</span>( );</span><br></pre></td></tr></table></figure><p>通过<code>a</code> 实例沿着原型链第一次的追溯，<code>__proto__</code>属性指向<code>A()</code>构造函数的原型对象。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a.<span class="property">__proto__</span>===A.<span class="property"><span class="keyword">prototype</span></span> </span><br></pre></td></tr></table></figure><p><code>a</code>实例沿着原型链第二次的追溯，<code>A</code>原型对象的<code>__proto__</code>属性指向<code>Object</code>类型的原型对象.</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a.<span class="property">__proto__</span>.<span class="property">__proto__</span>===A.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> </span><br><span class="line">A.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>===<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span></span><br></pre></td></tr></table></figure><p><code>a</code> 实例沿着原型链第三次追溯，<code>Object</code>类型的原型对象的<code>__proto__</code>属性为<code>null</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span>===<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>===<span class="literal">null</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>具体的图如下所示：</p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/%E5%8E%9F%E5%9E%8B%E9%93%BE1.png"></p><p>下面，我们再来看一个案例：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Super</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Middle</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Sub</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Middle</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Super</span>();</span><br><span class="line"><span class="title class_">Sub</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Middle</span>();</span><br><span class="line"><span class="keyword">var</span> suber = <span class="keyword">new</span> <span class="title class_">Sub</span>();</span><br></pre></td></tr></table></figure><p>对应的原型链如下图所示：</p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/%E5%8E%9F%E5%9E%8B%E9%93%BE2.png"></p><p>上面的图其实并不完整，因为漏掉了<code>Object</code>.所以完整的图如下</p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/%E5%8E%9F%E5%9E%8B%E9%93%BE3.png"></p><p>通过以上内容的讲解，我们对原型链有了更加深入的理解。</p><h3 id="1-8-原型链特点"><a href="#1-8-原型链特点" class="headerlink" title="1.8 原型链特点"></a>1.8 原型链特点</h3><p>关于原型链的特点，主要有两个</p><p>第一个特点：由于原型链的存在，属性查找的过程不再只是查找自身的原型对象，而是会沿着整个原型链一直向上，直到追溯到<code>Object.prototype</code>.也就是说，当<code>js</code>引擎在查找对象的属性时，先查找对象本身是否存在该属性，如果不存在，会在原型链上查找，直到<code>Object.prototype</code>.如果<code>Object.prototype</code>上也找不到该属性，则返回<code>undefined</code>,如果期间在对象本身找到了或者是某个原型对象上找到了该属性，则会返回对应的结果。</p><p>由于这个特点，我们在自定义的对象中，可以调用某些未在自定义构造函数中定义的函数，例如<code>toString( )</code>函数。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123; &#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p.<span class="title function_">toString</span>(); <span class="comment">// 实际上调用的是Object.prototype.toString( )</span></span><br></pre></td></tr></table></figure><p>第二个特点：由于属性查找会经历整个原型链，因此查找的链路越长，对性能的影响越大。</p><h3 id="1-9-属性的区分"><a href="#1-9-属性的区分" class="headerlink" title="1.9 属性的区分"></a>1.9 属性的区分</h3><p>对象属性的查找往往会涉及到整个原型链，那么应该怎样区分属性是实例自身的还是从原型链中继承的呢？</p><p>关于这个问题，前面我们也已经讲解过，是通过<code>hasOwnProperty( )</code>函数来完成的，这里我们在简单的复习强调一下。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//在对象的原型上添加age属性</span></span><br><span class="line">     <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">21</span>;</span><br><span class="line">     <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;name&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;age&quot;</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p><code>name</code>属性为实例属性，在调用<code>hasOwnProperty</code>方法时，会返回<code>true</code>。<code>age</code>属性为原型对象上的属性，在调用<code>hasOwnProperty</code>函数时，会返回<code>false</code>.</p><p>在使用<code>for...in</code>运算符，遍历对象的属性时，一般可以配合<code>hasOwnProperty</code>方法一起使用，检测某个属性是否为对象自身的属性，如果是，可以做相应的处理。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> p <span class="keyword">in</span> person)&#123;</span><br><span class="line">    <span class="keyword">if</span>(person.<span class="title function_">hasOwnProperty</span>(p))&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、Array类型"><a href="#2、Array类型" class="headerlink" title="2、Array类型"></a>2、Array类型</h2><p><code>Array</code>类型中提供了丰富的函数用于对数组进行处理，例如，过滤，去重，遍历等等操作。</p><h3 id="2-1-怎样-判断一个变量是数组还是对象"><a href="#2-1-怎样-判断一个变量是数组还是对象" class="headerlink" title="2.1 怎样 判断一个变量是数组还是对象"></a>2.1 怎样 判断一个变量是数组还是对象</h3><p>这里，我们可能会想到使用<code>typeof</code>运算符，因为<code>typeof</code>运算符是专门用于检测数据类型的，但是<code>typeof</code>运算符能够满足我们的需求吗？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> a); </span><br></pre></td></tr></table></figure><h4 id="2-1-1-instanceof运算符"><a href="#2-1-1-instanceof运算符" class="headerlink" title="2.1.1 instanceof运算符"></a>2.1.1 <code>instanceof</code>运算符</h4><p><code>instanceof</code>运算符用于通过查找原型链来检查某个变量是否为某个类型数据的实例，使用<code>instanceof</code>运算符可以判断一个变量是数组还是对象。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// true</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a <span class="keyword">instanceof</span> <span class="title class_">Object</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> userInfo = &#123; <span class="attr">userName</span>: <span class="string">&quot;zhangsan&quot;</span> &#125;;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(userInfo <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// false</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(userInfo <span class="keyword">instanceof</span> <span class="title class_">Object</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>这里我们可以封装一个函数，用于判断变量是数组类型还是对象类型。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getType</span>(<span class="params">o</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (o <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Array&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o <span class="keyword">instanceof</span> <span class="title class_">Object</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Object&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;参数类型不是Array也不是Object&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(a));</span><br></pre></td></tr></table></figure><h4 id="2-1-2-通过构造函数来判断"><a href="#2-1-2-通过构造函数来判断" class="headerlink" title="2.1.2  通过构造函数来判断"></a>2.1.2  通过构造函数来判断</h4><p>判断一个变量是否是数组还是对象，其实就是判断变量的构造函数是<code>Array</code>类型还是<code>Object</code>类型。</p><p>因为一个对象的实例都是通过构造函数创建的。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">__proto__</span>.<span class="property">constructor</span> === <span class="title class_">Array</span>); </span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">__proto__</span>.<span class="property">constructor</span> === <span class="title class_">Object</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>同样这里，这里我们也可以封装一个函数，来判断变量是数组类型还是对象类型。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getType</span>(<span class="params">o</span>) &#123;</span><br><span class="line">    <span class="comment">//获取构造函数</span></span><br><span class="line">    <span class="keyword">var</span> constructor = o.<span class="property">__proto__</span>.<span class="property">constructor</span>;</span><br><span class="line">    <span class="keyword">if</span> (constructor === <span class="title class_">Array</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Array&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (constructor === <span class="title class_">Object</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Object&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;参数类型不是Array也不是Object&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(a));</span><br></pre></td></tr></table></figure><h4 id="2-1-3-通过toString-函数来判断"><a href="#2-1-3-通过toString-函数来判断" class="headerlink" title="2.1.3 通过toString( )函数来判断"></a>2.1.3 通过<code>toString( )</code>函数来判断</h4><p>我们知道，每种引用类型都会直接或间接继承<code>Object</code>类型，因此它们都包含<code>toString( )</code>函数。</p><p>不同数据类型的<code>toString( )</code>函数返回值也不一样，所以通过<code>toString( )</code>函数就可以判断一个变量是数组还是对象，当然，这里我们需要用到<code>call</code>方法来调用<code>Object</code>原型上的<code>toString( )</code>函数来完成类型的判断。</p><p>如下所示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">     <span class="keyword">var</span> obj = &#123; <span class="attr">userName</span>: <span class="string">&quot;zhangsan&quot;</span> &#125;;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(arr)); <span class="comment">//[object Array]</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj)); <span class="comment">// [object Object]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">toString</span>()); <span class="comment">// 1,2,3</span></span><br></pre></td></tr></table></figure><h4 id="2-1-4-通过Array-isArray-函数来判断"><a href="#2-1-4-通过Array-isArray-函数来判断" class="headerlink" title="2.1.4  通过Array.isArray( )函数来判断"></a>2.1.4  通过<code>Array.isArray( )</code>函数来判断</h4><p><code>Array.isArray</code> 方法用来判断变量是否为数组。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">  <span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;zhangsan&quot;</span> &#125;;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(<span class="number">1</span>)); <span class="comment">//false</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)); <span class="comment">//true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h3 id="2-2-怎样过滤数组中满足条件的数据"><a href="#2-2-怎样过滤数组中满足条件的数据" class="headerlink" title="2.2 怎样过滤数组中满足条件的数据"></a>2.2 怎样过滤数组中满足条件的数据</h3><p>对数组中的数据进行过滤，我们使用比较多的是<code>filter</code>方法。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">      <span class="keyword">var</span> fn = <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x % <span class="number">2</span> !== <span class="number">0</span>;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">78</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line">      <span class="keyword">var</span> result = arr.<span class="title function_">filter</span>(fn);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>下面，我们再来看一下针对复杂类型数组的过滤。</p><p>下面案例是查找出年龄大于16的男生的信息。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">       &#123; <span class="attr">gender</span>: <span class="string">&quot;男&quot;</span>, <span class="attr">age</span>: <span class="number">15</span> &#125;,</span><br><span class="line">       &#123; <span class="attr">gender</span>: <span class="string">&quot;男&quot;</span>, <span class="attr">age</span>: <span class="number">17</span> &#125;,</span><br><span class="line">       &#123; <span class="attr">gender</span>: <span class="string">&quot;女&quot;</span>, <span class="attr">age</span>: <span class="number">15</span> &#125;,</span><br><span class="line">     ];</span><br><span class="line">     <span class="keyword">var</span> fn = <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> obj.<span class="property">gender</span> === <span class="string">&quot;男&quot;</span> &amp;&amp; obj.<span class="property">age</span> &gt; <span class="number">16</span>;</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="keyword">const</span> result = arr.<span class="title function_">filter</span>(fn);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><h3 id="2-3-怎样对数组元素做累加处理"><a href="#2-3-怎样对数组元素做累加处理" class="headerlink" title="2.3 怎样对数组元素做累加处理"></a>2.3 怎样对数组元素做累加处理</h3><p>对数组中的元素做累加的处理，可以通过<code>reduce</code>函数来完成。</p><p><code>reduce</code>函数最主要的作用就是做累加的操作，该函数接收一个函数作为累加器，将数组中的每个元素从左到右依次执行累加器，返回最终的处理结果。</p><p><code>reduce</code>函数的语法如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">reduce</span>(<span class="title function_">callback</span>(accumulator, currentValue[, index[, array]])[, initialValue])</span><br></pre></td></tr></table></figure><p>求出数组中所有元素累加的和</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">     <span class="keyword">var</span> sum = arr.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">accumulator, currentValue</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> accumulator + currentValue;</span><br><span class="line">     &#125;, <span class="number">0</span>);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span><br></pre></td></tr></table></figure><h3 id="2-4-怎样求数组中的最大值与最小值"><a href="#2-4-怎样求数组中的最大值与最小值" class="headerlink" title="2.4 怎样求数组中的最大值与最小值"></a>2.4 怎样求数组中的最大值与最小值</h3><p>关于查询出数组中的最大值与最小值的实现方式有很多种，下面我们来看一下具体的实现。</p><p>第一：通过<code>prototype</code>属性扩展<code>min</code>函数和<code>max</code>函数来实现求最小值与最大值</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//最小值</span></span><br><span class="line"> <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">min</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">var</span> min = <span class="variable language_">this</span>[<span class="number">0</span>];</span><br><span class="line">   <span class="keyword">var</span> len = <span class="variable language_">this</span>.<span class="property">length</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="variable language_">this</span>[i] &lt; min) &#123;</span><br><span class="line">       min = <span class="variable language_">this</span>[i];</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> min;</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="comment">//最大值</span></span><br><span class="line"> <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">max</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">var</span> max = <span class="variable language_">this</span>[<span class="number">0</span>];</span><br><span class="line">   <span class="keyword">var</span> len = <span class="variable language_">this</span>.<span class="property">length</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="variable language_">this</span>[i] &gt; max) &#123;</span><br><span class="line">       max = <span class="variable language_">this</span>[i];</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> max;</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">90</span>, <span class="number">23</span>];</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">min</span>()); <span class="comment">// 1</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">max</span>()); <span class="comment">// 90</span></span><br></pre></td></tr></table></figure><p>第二：通过数组的<code>reduce</code>函数来完成。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">max</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">preValue, currentValue</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> preValue &gt; currentValue ? preValue : currentValue; <span class="comment">//返回最大的值</span></span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">min</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">preValue, currentValue</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> preValue &lt; currentValue ? preValue : currentValue; <span class="comment">// 返回最小的值</span></span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">90</span>, <span class="number">23</span>];</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">min</span>()); <span class="comment">//</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">max</span>()); <span class="comment">//</span></span><br></pre></td></tr></table></figure><p>第三：通过<code>ES6</code>中的扩展运算符来实现</p><p>这里我们可以通过<code>ES6</code>中的扩展运算符(…)来实现。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">90</span>, <span class="number">23</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">min</span>(...arr)); <span class="comment">//</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(...arr));</span><br></pre></td></tr></table></figure><h3 id="2-5-数组遍历的方式有哪些"><a href="#2-5-数组遍历的方式有哪些" class="headerlink" title="2.5 数组遍历的方式有哪些"></a>2.5 数组遍历的方式有哪些</h3><p>数组遍历是我们针对数组最频繁的操作。下面我们看一下常见的数组的遍历方式。</p><h4 id="通过for循环"><a href="#通过for循环" class="headerlink" title="通过for循环"></a>通过for循环</h4><p>这时最基本的实现方式</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用forEach-函数"><a href="#使用forEach-函数" class="headerlink" title="使用forEach( )函数"></a>使用<code>forEach( )</code>函数</h4><p><code>forEach</code>函数也是我们遍历数组用的比较多的方法，<code>forEach( )</code>函数接收一个回调函数，参数分别表示当前执行的元素的值，当前值的索引和数组本身。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">90</span>, <span class="number">23</span>];</span><br><span class="line">     arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">element, index, array</span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(index + <span class="string">&quot;:&quot;</span> + element);</span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure><h4 id="使用map-函数"><a href="#使用map-函数" class="headerlink" title="使用map( )函数"></a>使用<code>map( )</code>函数</h4><p>&#96;m</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">90</span>, <span class="number">23</span>];</span><br><span class="line">  <span class="keyword">var</span> result = arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">element, index, array</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line">    <span class="keyword">return</span> element * element;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result: ===&quot;</span>, result);</span><br></pre></td></tr></table></figure><p>在使用<code>map</code>函数的时候一定要注意：在<code>map( )</code>函数的回调函数中需要通过<code>return</code>将处理后的值进行返回，否则会返回<code>undefined</code>.</p><p>如下所示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">90</span>, <span class="number">23</span>];</span><br><span class="line">    <span class="keyword">var</span> result = arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">element, index, array</span>) &#123;</span><br><span class="line">      <span class="comment">// console.log(index);</span></span><br><span class="line">      element * element;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result: ===&quot;</span>, result);</span><br></pre></td></tr></table></figure><p>在上面的计算中，将<code>return</code>关键字省略了，最终返回的结果是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>]</span><br></pre></td></tr></table></figure><h4 id="使用some-函数与every-函数"><a href="#使用some-函数与every-函数" class="headerlink" title="使用some( )函数与every( )函数"></a>使用<code>some( )</code>函数与<code>every( )</code>函数</h4><p><code>some( )</code>函数与<code>every( )</code>函数的相似之处都是在对数组进行遍历的过程中，判断数组中是否有满足条件的元素，如果有满足条件的就返回<code>true</code>,否则返回<code>false</code>.</p><p><code>some()</code>与<code>every()</code>的区别在于:<code>some( )</code>函数只要数组中某个元素满足条件就返回<code>true</code>,不会在对后面的元素进行判断。而<code>every( )</code>函数是数组中每个元素都要满足条件时才会返回<code>true</code>.</p><p>例如：要判断数组中是否有大于6的元素的时候，可以通过<code>some( )</code>函数来处理。</p><p>而要判断数组中是否所有的元素都大于6，则需要通过<code>every( )</code>函数来处理。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">element, index, array</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> element &gt; <span class="number">6</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">var</span> result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].<span class="title function_">some</span>(fn); <span class="comment">//false</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>].<span class="title function_">some</span>(fn);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><p>下面测试一下<code>every( )</code>函数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">element, index, array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> element &gt; <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>].<span class="title function_">every</span>(fn); <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><p>下面修改一下数组中的元素。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">element, index, array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> element &gt; <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = [<span class="number">7</span>, <span class="number">8</span>].<span class="title function_">every</span>(fn); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><p>现在数组中的元素的值都是大于6，所以返回的结果为<code>true</code>.</p><h4 id="使用find-函数"><a href="#使用find-函数" class="headerlink" title="使用find( )函数"></a>使用<code>find( )</code>函数</h4><p><code>find( )</code> 函数用于数组的遍历，当找到第一个满足条件的元素值时，则直接返回该元素值，如果都找不到满足条件的，则返回<code>undefined</code>.</p><p><code>find( )</code>方法的参数与<code>forEach</code>是一样的。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">90</span>, <span class="number">23</span>];</span><br><span class="line">  <span class="keyword">const</span> result = arr.<span class="title function_">find</span>(<span class="keyword">function</span> (<span class="params">element, index, array</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> element &gt; <span class="number">6</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 90                                                                   </span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">90</span>, <span class="number">23</span>];</span><br><span class="line">  <span class="keyword">const</span> result = arr.<span class="title function_">find</span>(<span class="keyword">function</span> (<span class="params">element, index, array</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> element &gt; <span class="number">100</span>; <span class="comment">//undefined</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><p>以上就是我们比较常用的数组遍历的方式。当然还有我们前面讲解过的<code>filter</code>，<code>reduce</code>函数。</p><h3 id="2-6-手动实现find方法"><a href="#2-6-手动实现find方法" class="headerlink" title="2.6 手动实现find方法"></a>2.6 手动实现<code>find</code>方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> &lt;script&gt;</span><br><span class="line">      <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">findTest</span> = <span class="keyword">function</span> (<span class="params">fn</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">          <span class="keyword">var</span> f = <span class="title function_">fn</span>(<span class="variable language_">this</span>[i]);<span class="comment">//把数组元素传递到函数中</span></span><br><span class="line">          <span class="keyword">if</span> (f) &#123; <span class="comment">//如果函数的返回值为true</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>[i]; <span class="comment">//则返回对应的数组元素</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">90</span>, <span class="number">23</span>];</span><br><span class="line">      <span class="keyword">var</span> result = arr.<span class="title function_">findTest</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> item &gt; <span class="number">6</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="2-7-手动实现filter方法"><a href="#2-7-手动实现filter方法" class="headerlink" title="2.7  手动实现filter方法"></a>2.7  手动实现filter方法</h3><p><code>filter</code>函数内部需要一个回调函数，数组中的每个元素都会执行该回调函数，在执行回调函数时会将数组中的每个元素传递给回调函数的参数，在回调函数的函数体内进行判断，如果返回的是<code>true</code>,那么将该元素放到新数组<code>arr</code>中，如果判断的结果为<code>false</code>，则数据不会放到新数组<code>arr</code>中。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模拟实现filter函数</span></span><br><span class="line">     <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">filterOne</span> = <span class="keyword">function</span> (<span class="params">fn</span>) &#123;</span><br><span class="line">       <span class="keyword">var</span> newArray = [];</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">         <span class="keyword">var</span> f = <span class="title function_">fn</span>(<span class="variable language_">this</span>[i]);</span><br><span class="line">         <span class="keyword">if</span> (f) &#123;</span><br><span class="line">           newArray.<span class="title function_">push</span>(<span class="variable language_">this</span>[i]);</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> newArray;</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="keyword">var</span> array = [<span class="number">65</span>, <span class="number">56</span>, <span class="number">89</span>, <span class="number">53</span>];</span><br><span class="line">     <span class="keyword">var</span> arr = array.<span class="title function_">filterOne</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> item &gt;= <span class="number">60</span>;</span><br><span class="line">     &#125;);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arr=&quot;</span>, arr);</span><br></pre></td></tr></table></figure><h3 id="2-8-手动实现some函数"><a href="#2-8-手动实现some函数" class="headerlink" title="2.8 手动实现some函数"></a>2.8 手动实现some函数</h3><p><code>some()</code> 方法让数组中的每一个元素执行一次回调函数，在该回调函数中执行一些操作，只要有一个操作结果为真，就会返回true。不会在对后面的元素进行判断,否则返回false。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//手动模式some方法</span></span><br><span class="line">   <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">someTest</span> = <span class="keyword">function</span> (<span class="params">fn</span>) &#123;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">       <span class="keyword">let</span> f = <span class="title function_">fn</span>(<span class="variable language_">this</span>[i]);</span><br><span class="line">       <span class="keyword">if</span> (f) &#123;</span><br><span class="line">         <span class="keyword">return</span> f;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">90</span>];</span><br><span class="line">   <span class="keyword">let</span> result = array.<span class="title function_">someTest</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> item &gt; <span class="number">10</span>;</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result=&quot;</span>, result);</span><br></pre></td></tr></table></figure><h3 id="2-9-手动实现every函数"><a href="#2-9-手动实现every函数" class="headerlink" title="2.9  手动实现every函数"></a>2.9  手动实现every函数</h3><p>该方法与<code>some()</code>方法不同，<code>some()</code>方法只要有一个符合条件就返回true,而 <code>every()</code> 方法是数组中所有元素都要符合指定的条件，才会返回true.</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//手动模拟实现`every`方法</span></span><br><span class="line">    <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">everyTest</span> = <span class="keyword">function</span> (<span class="params">fn</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> f = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> f = <span class="title function_">fn</span>(<span class="variable language_">this</span>[i]);</span><br><span class="line">        <span class="keyword">if</span> (!f) &#123;</span><br><span class="line">          <span class="comment">//只要有一个不符合，就立即返回false.</span></span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> f;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> array = [<span class="number">11</span>, <span class="number">31</span>, <span class="number">5</span>, <span class="number">71</span>, <span class="number">90</span>];</span><br><span class="line">    <span class="keyword">let</span> result = array.<span class="title function_">everyTest</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> item &gt; <span class="number">10</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result=&quot;</span>, result); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h3 id="2-10-手动实现map方法"><a href="#2-10-手动实现map方法" class="headerlink" title="2.10 手动实现map方法"></a>2.10 手动实现map方法</h3><p><code>map( )</code>函数在对数据进行遍历的时候，会将数组中的每个元素做相应的处理，然后得到新的元素，<strong>并返回一个新的数组</strong>。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//手动实现map方法</span></span><br><span class="line">      <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">mapTest</span> = <span class="keyword">function</span> (<span class="params">fn</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> newArray = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">          <span class="keyword">let</span> f = <span class="title function_">fn</span>(<span class="variable language_">this</span>[i], i, <span class="variable language_">this</span>);</span><br><span class="line">          newArray.<span class="title function_">push</span>(f);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newArray;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">90</span>, <span class="number">23</span>];</span><br><span class="line">      <span class="keyword">var</span> result = arr.<span class="title function_">mapTest</span>(<span class="keyword">function</span> (<span class="params">element, index, array</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line">        <span class="keyword">return</span> element * element;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result: ===&quot;</span>, result);</span><br></pre></td></tr></table></figure><h3 id="2-11-手动实现reduce方法"><a href="#2-11-手动实现reduce方法" class="headerlink" title="2.11 手动实现reduce方法"></a>2.11 手动实现reduce方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">reduceTest</span> = <span class="keyword">function</span> (<span class="params">fn, initialValue</span>) &#123;</span><br><span class="line">       <span class="comment">//如果没有传递initialValue,我们将使用数组的第一项作为initialValue的值</span></span><br><span class="line">       <span class="keyword">let</span> hasInitialValue = initialValue !== <span class="literal">undefined</span>;</span><br><span class="line">       <span class="keyword">let</span> value = hasInitialValue ? initialValue : <span class="variable language_">this</span>[<span class="number">0</span>];</span><br><span class="line">       <span class="comment">//如果没有传递initialValue,则索引从1开始，否则从0开始</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">let</span> i = hasInitialValue ? <span class="number">0</span> : <span class="number">1</span>, len = <span class="variable language_">this</span>.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">         value = <span class="title function_">fn</span>(value, <span class="variable language_">this</span>[i], i, <span class="variable language_">this</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> value;</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">     <span class="keyword">var</span> sum = arr.<span class="title function_">reduceTest</span>(<span class="keyword">function</span> (<span class="params">accumulator, currentValue</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> accumulator + currentValue;</span><br><span class="line">     &#125;, <span class="number">0</span>);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span><br></pre></td></tr></table></figure><h3 id="2-12-怎样实现数组的去重"><a href="#2-12-怎样实现数组的去重" class="headerlink" title="2.12 怎样实现数组的去重"></a>2.12 怎样实现数组的去重</h3><p>数组去重是指当数组中出现重复的元素的时候，通过一定的方式，将重复的元素去掉。</p><h4 id="利用数组遍历去重"><a href="#利用数组遍历去重" class="headerlink" title="利用数组遍历去重"></a>利用数组遍历去重</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组去重</span></span><br><span class="line">     <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">array</span>) &#123;</span><br><span class="line">       <span class="keyword">var</span> newArray = [];</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">         <span class="keyword">if</span> (newArray.<span class="title function_">indexOf</span>(array[i]) === -<span class="number">1</span>) &#123;</span><br><span class="line">           newArray.<span class="title function_">push</span>(array[i]);</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> newArray;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(arr));</span><br></pre></td></tr></table></figure><h4 id="利用键值对去重"><a href="#利用键值对去重" class="headerlink" title="利用键值对去重"></a>利用键值对去重</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">array</span>) &#123;</span><br><span class="line">     <span class="keyword">var</span> obj = &#123;&#125;,</span><br><span class="line">       result = [],</span><br><span class="line">       val;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">       val = array[i];</span><br><span class="line">       <span class="keyword">if</span> (!obj[val]) &#123;<span class="comment">//根据key获取obj对象中的值</span></span><br><span class="line">         obj[val] = <span class="string">&quot;ok&quot;</span>; <span class="comment">//表示该元素已经出现了</span></span><br><span class="line">         result.<span class="title function_">push</span>(val);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(arr));</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">array</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;,</span><br><span class="line">    result = [],</span><br><span class="line">    val,</span><br><span class="line">    type;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    val = array[i];</span><br><span class="line">    type = <span class="keyword">typeof</span> val;</span><br><span class="line">    <span class="keyword">if</span> (!obj[val]) &#123;</span><br><span class="line">      obj[val] = [type];</span><br><span class="line">      result.<span class="title function_">push</span>(val);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj[val].<span class="title function_">indexOf</span>(type) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      obj[val].<span class="title function_">push</span>(type);</span><br><span class="line">      result.<span class="title function_">push</span>(val);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="string">&quot;6&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(arr));</span><br></pre></td></tr></table></figure><h4 id="使用Set数据结构去重"><a href="#使用Set数据结构去重" class="headerlink" title="使用Set数据结构去重"></a>使用<code>Set</code>数据结构去重</h4><p>具体的代码如下所示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="string">&quot;6&quot;</span>]));</span><br></pre></td></tr></table></figure><h3 id="2-13-怎样获取数组中最多的元素"><a href="#2-13-怎样获取数组中最多的元素" class="headerlink" title="2.13 怎样获取数组中最多的元素"></a>2.13 怎样获取数组中最多的元素</h3><h4 id="利用键值对实现"><a href="#利用键值对实现" class="headerlink" title="利用键值对实现"></a>利用键值对实现</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">        <span class="comment">//如果数组中没有值，直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (!arr.<span class="property">length</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//如果只有一个值，返回1，表示出现了1次</span></span><br><span class="line">        <span class="keyword">if</span> (arr.<span class="property">length</span> === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">var</span> result = &#123;&#125;;</span><br><span class="line">        <span class="comment">//对数组进行遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!result[arr[i]]) &#123;</span><br><span class="line">            result[arr[i]] = <span class="number">1</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result[arr[i]]++;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历result对象</span></span><br><span class="line">        <span class="keyword">var</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(result);</span><br><span class="line">        <span class="keyword">var</span> maxNum = <span class="number">0</span>,</span><br><span class="line">          maxElement;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; keys.<span class="property">length</span>; i++) &#123;</span><br><span class="line">          <span class="keyword">if</span> (result[keys[i]] &gt; maxNum) &#123;</span><br><span class="line">            maxNum = result[keys[i]];</span><br><span class="line">            maxElement = keys[i];</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          <span class="string">&quot;在数组中出现最多的元素是&quot;</span> + maxElement + <span class="string">&quot;,共出现了&quot;</span> + maxNum + <span class="string">&quot;次&quot;</span></span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(array));</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="算法优化"><a href="#算法优化" class="headerlink" title="算法优化"></a>算法优化</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">array</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> result = &#123;&#125;;</span><br><span class="line">      <span class="keyword">var</span> maxNum = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">var</span> maxElement = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> val = array[i];</span><br><span class="line">        result[val] === <span class="literal">undefined</span> ? (result[val] = <span class="number">1</span>) : result[val]++;</span><br><span class="line">        <span class="keyword">if</span> (result[val] &gt; maxNum) &#123;</span><br><span class="line">          maxNum = result[val];</span><br><span class="line">          maxElement = val;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="string">&quot;在数组中出现最多的元素是&quot;</span> + maxElement + <span class="string">&quot;,共出现了&quot;</span> + maxNum + <span class="string">&quot;次&quot;</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(array));</span><br></pre></td></tr></table></figure><h1 id="三、函数"><a href="#三、函数" class="headerlink" title="三、函数"></a>三、函数</h1><h2 id="1、函数定义有哪几种实现方式"><a href="#1、函数定义有哪几种实现方式" class="headerlink" title="1、函数定义有哪几种实现方式"></a>1、函数定义有哪几种实现方式</h2><p>在使用函数前，先需要对函数进行定义。关于函数的定义总体上可以分为三类。</p><p>第一类是函数声明。</p><p>第二类是函数表达式</p><p>第三类是通过<code>Function</code>构造函数来完成函数的定义。</p><p>首先来看一下<strong>函数的声明</strong>。</p><p>函数声明是直接通过<code>function</code>关键字接一个函数名，同时可以接收参数。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>)&#123;</span><br><span class="line">     <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>函数表达式</strong></p><p>函数表达式的形式类似于普通变量的初始化，只不过这个变量初始化的值是一个函数。如下代码所示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum =  <span class="keyword">function</span> (<span class="params">num1,num2</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数表达式没有名称，属于匿名函数表达式。</p><p><strong><code>Function( )</code>构造函数</strong></p><p>使用<code>new</code>操作符，调用<code>Function( )</code>构造函数，传入参数，也可以定义一个函数。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;num1&#x27;</span>,<span class="string">&#x27;num2&#x27;</span>, <span class="string">&#x27;return a+b &#x27;</span>)</span><br></pre></td></tr></table></figure><p>其中的参数，除了最后一个参数是要执行的函数体，其它的参数都是函数的形参。</p><h2 id="2、Function-构造函数定义函数的问题"><a href="#2、Function-构造函数定义函数的问题" class="headerlink" title="2、Function( )构造函数定义函数的问题"></a>2、Function( )构造函数定义函数的问题</h2><p>但是，我们在实际的应用中很少使用<code>Function( )</code>构造函数来实现对函数的定义。</p><p>原因是：</p><p>第一：<code>Function( )</code> 构造函数每次执行时，都会解析函数体，并创建一个新的函数对象，所以当在一个循环或者是一个频繁执行的函数中去使用<code>Function( )</code>构造函数的时候，相对来说性能是比较低的。</p><p>第二：通过<code>Function( )</code> 构造函数创建的函数，并不遵循典型的作用域。</p><p>如下代码所示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;12&quot;</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">&quot;11&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;return a&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fun</span>()());</span><br></pre></td></tr></table></figure><h2 id="3、函数表达式的应用场景"><a href="#3、函数表达式的应用场景" class="headerlink" title="3、函数表达式的应用场景"></a>3、函数表达式的应用场景</h2><p>关于函数表达式非常典型的应用就是实现了块级作用域</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> _name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">getName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> _name;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">setName</span>: <span class="keyword">function</span> (<span class="params">userName</span>) &#123;</span><br><span class="line">          _name = userName;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line">    person.<span class="title function_">setName</span>(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">getName</span>());</span><br></pre></td></tr></table></figure><h2 id="4、函数声明与函数表达式有什么区别"><a href="#4、函数声明与函数表达式有什么区别" class="headerlink" title="4、函数声明与函数表达式有什么区别"></a>4、函数声明与函数表达式有什么区别</h2><p>函数声明与函数表达式虽然是两种定义函数的方式，但是两者之间还是有区别的。</p><p>第一点就是：函数名称</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数声明，函数名称sum是必须的</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span> (num1,num2)&#123;</span><br><span class="line"><span class="keyword">return</span> num1 + num2 </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 没有函数名称的匿名函数表达式</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="keyword">function</span> (<span class="params">num1,num2</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二点就是关于：函数提升</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">3</span>, <span class="number">6</span>)); <span class="comment">// Uncaught TypeError: sum is not a function</span></span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数表达式</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="keyword">function</span> (<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5、函数常见的调用模式有哪些"><a href="#5、函数常见的调用模式有哪些" class="headerlink" title="5、函数常见的调用模式有哪些"></a>5、函数常见的调用模式有哪些</h2><p><strong>函数调用模式</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> num1 + num2;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 函数表达式</span></span><br><span class="line">     <span class="keyword">var</span> sum = <span class="keyword">function</span> (<span class="params">num1, num2</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> num1 + num2;</span><br><span class="line">     &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">3</span>, <span class="number">6</span>));</span><br></pre></td></tr></table></figure><p><strong>方法调用模式</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">   <span class="attr">userName</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">   <span class="attr">getUserName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">userName</span>;</span><br><span class="line">   &#125;,</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">getUserName</span>());</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">       <span class="attr">userName</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">       <span class="attr">getUserName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">userName</span>;</span><br><span class="line">       &#125;,</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="comment">// console.log(obj.getUserName());</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="string">&quot;getUserName&quot;</span>]());</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">     <span class="attr">userName</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">     <span class="attr">getUserName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">userName</span>;</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attr">setUserName</span>: <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">userName</span> = name;</span><br><span class="line">       <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">     &#125;,</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">setUserName</span>(<span class="string">&quot;lisi&quot;</span>).<span class="title function_">getUserName</span>());<span class="comment">// lisi</span></span><br></pre></td></tr></table></figure><p><strong>构造器(构造函数)调用模式</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义构造函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">userName</span> = name; <span class="comment">//定义属性</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在原型上定义函数</span></span><br><span class="line">    <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getUserName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">userName</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 通过new来创建实例</span></span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">    <span class="comment">// 调用原型上的方法</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="title function_">getUserName</span>());</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> num1 + num2;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//定义一个对象</span></span><br><span class="line">   <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">   <span class="comment">//通过call()和apply( )函数调用sum( )函数</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(sum.<span class="title function_">call</span>(obj, <span class="number">2</span>, <span class="number">6</span>));</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(sum.<span class="title function_">apply</span>(obj, [<span class="number">3</span>, <span class="number">6</span>]));</span><br></pre></td></tr></table></figure><p><strong>匿名函数调用模式</strong></p><p>所谓的匿名函数，就是没有函数名称的函数。匿名函数的调用有两种方式，一种是通过函数表达式定义函数，并赋值给变量，通过变量进行调用。如下所示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过函数表达式定义匿名函数，并赋值给变量sum</span></span><br><span class="line"><span class="keyword">var</span> sum =funciton (num1,num2)&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通过sum来进行调用</span></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">2</span>,<span class="number">6</span>)</span><br></pre></td></tr></table></figure><p>另外一种是使用小括号<code>()</code>将匿名函数括起来，然后在后面使用小括号<code>( )</code>,传递对应的参数从而完成对应的调用。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params">num1, num2</span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(num1 + num2);</span><br><span class="line">     &#125;)(<span class="number">2</span>, <span class="number">6</span>);</span><br></pre></td></tr></table></figure><h2 id="6、实参与形参有哪些区别"><a href="#6、实参与形参有哪些区别" class="headerlink" title="6、实参与形参有哪些区别"></a>6、实参与形参有哪些区别</h2><p>第一：在函数的调用过程中，数据传递是单向的，也就是只能把实参的值传递给形参，而不能把形参的值反向传递给实参</p><p>第二：当实参是基本数据类型的值的时候，在向形参传递的时候，实际上是将实参的值复制一份传递给形参，在函数运行结束以后</p><p>形参释放，而实参中的值不会发生变化。当实参是引用类型的值的时候，实际是将实参的内存地址传递给形参，即实参与形参都指向了</p><p>相同的内存地址，此时形参可以修改实参的值。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123; <span class="attr">age</span>: <span class="number">21</span> &#125;;</span><br><span class="line">     <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">       obj.<span class="property">age</span> = <span class="number">22</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title function_">fn</span>(person);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">age</span>);</span><br></pre></td></tr></table></figure><p>第三：函数可以不用定义形参，在函数体中可以通过<code>arguments</code>对象获取传递过来的实参的值，并进行处理。</p><p>第四：在函数定义形参时，形参的个数并一定要和实参的个数相同，实参与形参会按照从前向后的顺序进行匹配，没有匹配到的形参被当作<code>undefined</code>来处理。</p><p>第五：实参并不需要与形参的数据类型一致，因为形参的数据类型只能在执行的时候才能够被确定，因为会通过隐式数据类型的转换。</p><h2 id="7、介绍一下arguments对象"><a href="#7、介绍一下arguments对象" class="headerlink" title="7、介绍一下arguments对象"></a>7、介绍一下arguments对象</h2><p><code>arguments</code>对象是所有函数都具有的一个内置的局部变量，表示的是函数实际接收到的参数，是一个类似数组的结构。</p><p>下面我们说一下<code>arguments</code>对象都具有哪些性质。</p><p>第一：<code>arguments</code>对象只能在函数内部使用，无法在函数的外部访问到<code>arguments</code>对象。同时<code>arguments</code>对象存在于函数级的作用域中。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>); <span class="comment">//Uncaught ReferenceError: arguments is not defined</span></span><br><span class="line">     <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>.<span class="property">length</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>第二：可以通过索引来访问<code>arguments</code>对象中的内容，因为<code>arguments</code>对象类似数组结构。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>]); <span class="comment">// 1</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">1</span>]); <span class="comment">// 2</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">2</span>]); <span class="comment">// undefined</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>第三：<code>arguments</code> 对象的值由实参决定，不是由形参决定。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">num1, num2, num3</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>.<span class="property">length</span>); <span class="comment">// 2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>因为<code>arguments</code>对象的<code>length</code>属性是由实际传递的实参的个数决定的，所以这里输出的是2.</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">num1, num2, num3</span>) &#123;</span><br><span class="line">    <span class="variable language_">arguments</span>[<span class="number">0</span>] = <span class="number">23</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;num1=&quot;</span>, num1); <span class="comment">//23</span></span><br><span class="line">    num2 = <span class="number">33</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">1</span>]); <span class="comment">// 33</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">num1, num2, num3</span>) &#123;</span><br><span class="line">  <span class="comment">// arguments[0] = 23;</span></span><br><span class="line">  <span class="comment">// console.log(&quot;num1=&quot;, num1); //23</span></span><br><span class="line">  <span class="comment">// num2 = 33;</span></span><br><span class="line">  <span class="comment">// console.log(arguments[1]); // 33</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">arguments</span>[<span class="number">2</span>] = <span class="number">19</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num3); <span class="comment">//undefined</span></span><br><span class="line">  num3 = <span class="number">10</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">2</span>]); <span class="comment">// 19</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">num1, num2, num3</span>) &#123;</span><br><span class="line">       <span class="comment">// arguments[0] = 23;</span></span><br><span class="line">       <span class="comment">// console.log(&quot;num1=&quot;, num1); //23</span></span><br><span class="line">       <span class="comment">// num2 = 33;</span></span><br><span class="line">       <span class="comment">// console.log(arguments[1]); // 33</span></span><br><span class="line"></span><br><span class="line">       <span class="variable language_">arguments</span>[<span class="number">2</span>] = <span class="number">19</span>;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(num3); <span class="comment">//undefined</span></span><br><span class="line">       num3 = <span class="number">10</span>;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">2</span>]); <span class="comment">// 19</span></span><br><span class="line"></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>.<span class="property">length</span>); <span class="comment">// 2 长度还是2</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><h2 id="8、arguments对象有哪些应用场景"><a href="#8、arguments对象有哪些应用场景" class="headerlink" title="8、arguments对象有哪些应用场景"></a>8、arguments对象有哪些应用场景</h2><p>第一：进行参数个数的判断。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">num1, num2, num3</span>) &#123;</span><br><span class="line">      <span class="comment">// 判断传递的参数个数是否正确</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> !== <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(</span><br><span class="line">          <span class="string">&quot;希望传递3个参数，实际传递的参数个数为:&quot;</span> + <span class="variable language_">arguments</span>.<span class="property">length</span></span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>第二：对任意个数参数的处理，也就是说只会对函数中前几个参数做特定处理，后面的参数不论传递多少个都会统一进行处理，这种情况我们可以使用<code>arguments</code>对象来完成。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">sep</span>) &#123;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">var</span> arr = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="number">1</span>);</span><br><span class="line">      <span class="comment">// console.log(arr); // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span><br><span class="line">      <span class="keyword">return</span> arr.<span class="title function_">join</span>(sep);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>));</span><br></pre></td></tr></table></figure><p>第三：模拟函数的重载</p><p>什么是函数的重载呢？</p><p>函数的重载指的是在函数名称相同的情况下，函数的形参的类型不同或者是个数不同。</p><p>但是在<code>JavaScript</code>中没有函数的重载。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">num1, num2, num3</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2 + num3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="comment">//将arguments对象转换成数组</span></span><br><span class="line">     <span class="keyword">var</span> arr = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">     <span class="comment">// console.log(arr);  // [1,2]</span></span><br><span class="line">    <span class="comment">//调用数组中的reduce方法完成数据的计算</span></span><br><span class="line">     <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">pre, currentValue</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> pre + currentValue;</span><br><span class="line">     &#125;);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>));</span><br></pre></td></tr></table></figure><h2 id="9、说一下普通函数与构造函数的区别"><a href="#9、说一下普通函数与构造函数的区别" class="headerlink" title="9、说一下普通函数与构造函数的区别"></a>9、说一下普通函数与构造函数的区别</h2><p>在<code>JavaScript</code>的函数中，有一类比较特殊的函数：’构造函数’。当我们创建对象的时候，经常会使用构造函数。</p><p>构造函数与普通函数的区别：</p><p>第一：构造函数的函数名的第一字母通常会大写。</p><p>第二：在构造函数的函数体内可以使用<code>this</code>关键字，表示创生成的对象实例。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">userName</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">userName</span> = userName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br></pre></td></tr></table></figure><p>第三：在使用构造函数的时候，必须与<code>new</code>操作符配合使用。</p><p>第四：构造函数的执行过程与普通函数也是不一样的。</p><p>代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">userName</span>) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">userName</span> = userName;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">username</span>);</span><br><span class="line">   &#125;;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"> <span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">sayHi</span> === p2.<span class="property">sayHi</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">userName</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">userName</span> = userName;</span><br><span class="line">    <span class="comment">// this.sayHi = function () &#123;</span></span><br><span class="line">    <span class="comment">//   console.log(this.username);</span></span><br><span class="line">    <span class="comment">// &#125;;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">username</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">sayHi</span> === p2.<span class="property">sayHi</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="10、什么是变量提升，什么是函数提升"><a href="#10、什么是变量提升，什么是函数提升" class="headerlink" title="10、什么是变量提升，什么是函数提升"></a>10、什么是变量提升，什么是函数提升</h2><p>在<code>javascript</code>中存在一些比较奇怪的现象。在一个函数体内，变量在定义之前就可以被访问到，而不会抛出异常。</p><p>如下所示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// undefined</span></span><br><span class="line">   <span class="keyword">var</span> num = <span class="number">2</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure><p>同样函数在定义之前也可以被调用，而不会抛出异常。</p><p>如下代码所示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fn</span>();</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>导致出现以上情况的原因是，在<code>javascript</code>中存在变量提升与函数提升的机制。</p><p>在讲解变量提升之前，先来说以作用域的问题。</p><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>在<code>JavaScript</code>中，一个变量的定义与调用都是在一个固定的范围内的，这个范围我们称之为作用域。</p><p>作用域可以分为全局的作用域，局部作用域(函数作用域)和块级作用域。</p><p>如下程序：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">var</span> userName = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(userName);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title function_">fn</span>(); <span class="comment">//zhangsan</span></span><br></pre></td></tr></table></figure><p>下面，再看如下代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> userName = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(userName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn</span>(); <span class="comment">//zhangsan</span></span><br></pre></td></tr></table></figure><p>综上两个案例，我们可以总结出，<strong>作用域本质就是一套规则，用于确定在何处以及如何查找变量的规则。</strong></p><p>下面，我们再来看一个比较复杂的结构图，来体验一下作用域</p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/%E4%BD%9C%E7%94%A8%E5%9F%9F.png"></p><ul><li>作用域链</li></ul><p>下面，我们再来看一下前面的代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> userName = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(userName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn</span>(); <span class="comment">//zhangsan</span></span><br></pre></td></tr></table></figure><p>我们在查找<code>userName</code>这个变量的时候，现在函数的作用域中进行查找，没有找到，再去全局作用域中查找。你会注意到，这是一个往外层查找的过程，即顺着一条链条从下往上查找变量。这个链条，我们就称之为作用域链。</p><p>如下图所示：</p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE.png"></p><p>对应的代码如下：</p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE2.png"></p><h3 id="面试中关于作用域与作用域链的问题"><a href="#面试中关于作用域与作用域链的问题" class="headerlink" title="面试中关于作用域与作用域链的问题"></a>面试中关于作用域与作用域链的问题</h3><p>  第一题：以下代码的执行结果是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">var</span> a = <span class="number">4</span>;</span><br><span class="line">       <span class="title function_">fn2</span>();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">     <span class="keyword">return</span> fn3;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">var</span> fn = <span class="title function_">fn1</span>();</span><br><span class="line">   <span class="title function_">fn</span>(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>第二题：以下代码的执行结果是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> a = <span class="number">4</span>;</span><br><span class="line">      <span class="title function_">fn2</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> fn3;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> fn = <span class="title function_">fn1</span>();</span><br><span class="line">  <span class="title function_">fn</span>(); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>第三题：以下代码的输出结果为</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> a;</span><br><span class="line">        <span class="title function_">fn2</span>();</span><br><span class="line">        a = <span class="number">4</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">return</span> fn3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> fn = <span class="title function_">fn1</span>();</span><br><span class="line">    <span class="title function_">fn</span>(); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>第四题：以下代码的输出结果为：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line">     <span class="title function_">bar</span>(); <span class="comment">//10</span></span><br><span class="line">     <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">var</span> x = <span class="number">30</span>;</span><br><span class="line">       <span class="title function_">foo</span>();</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>第五题： 以下代码的输出结果为：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line">    <span class="title function_">bar</span>(); <span class="comment">//30</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> x = <span class="number">30</span>;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">foo</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>第六题：以下代码的输出结果为:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line">   <span class="title function_">bar</span>(); <span class="comment">//30</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">var</span> x = <span class="number">30</span>;</span><br><span class="line">     (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">     &#125;)();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><p>所谓变量提升，是将变量的声明提升到函数顶部的位置，也就是将变量声明提升到变量所在的作用域的顶端，而变量的赋值并不会被提升。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">      <span class="keyword">var</span> str = <span class="string">&quot;hello vue&quot;</span>;</span><br><span class="line">    &#125;)(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> str; <span class="comment">//变量的声明得到提升</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">  str = <span class="string">&quot;hello vue&quot;</span>; <span class="comment">// 变量的赋值没有得到提升</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>如下代码所示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">    str = <span class="string">&quot;hello vue&quot;</span>;</span><br><span class="line">  &#125;)(); <span class="comment">// str is not defined</span></span><br></pre></td></tr></table></figure><p>以下代码的执行结果是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//1</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">//undefined</span></span><br><span class="line">      <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure><p>上面的代码等价于</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a;</span><br><span class="line">  <span class="keyword">var</span> b;</span><br><span class="line">  a = <span class="number">1</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// undefined</span></span><br><span class="line">  b = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure><h3 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h3><p>不仅通过<code>var</code>定义的变量会出现提升的情况，使用函数声明方式定义的函数也会出现提升。</p><p>如下代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">foo</span>(); <span class="comment">// 函数提升</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">//&#x27;hello&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">foo</span>(); <span class="comment">// foo is not a function</span></span><br><span class="line">   <span class="keyword">var</span> foo = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure><p>看一下如下程序的执行结果：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="title function_">bar</span>();</span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">9</span>;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">foo</span>()); <span class="comment">// 9</span></span><br></pre></td></tr></table></figure><p>如下程序的执行结果：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;</span><br><span class="line">    <span class="title function_">foo</span>();</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (a) &#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">20</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// undefined</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>以上的代码的执行过程如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">a = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    <span class="keyword">if</span>(a)&#123;</span><br><span class="line">        a=<span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>()</span><br></pre></td></tr></table></figure><p>如下程序的执行结果：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">v</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title function_">v</span>(); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>下面我们再来看一段代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> foo); <span class="comment">// function</span></span><br><span class="line">       <span class="keyword">var</span> foo = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> foo); <span class="comment">// string</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure><p>执行上面的代码，首先打印的是<code>function</code>,然后是<code>string</code>.</p><p>上面的代码实际上可以修改成如下的代码段。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 变量提升到函数的顶部</span></span><br><span class="line">        <span class="keyword">var</span> foo;</span><br><span class="line">        <span class="comment">// 函数提升，但是优先级低，所以出现在变量声明的后面。</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> foo); <span class="comment">//function</span></span><br><span class="line">        foo = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> foo); <span class="comment">//string</span></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>下面，我们再来看一段代码，看一下对应的输出结果是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">         a = <span class="number">10</span>;</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">         <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="title function_">b</span>();</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title function_">foo</span>(); <span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>上面的代码可以修改成如下的代码。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//变量a提升</span></span><br><span class="line">       <span class="keyword">var</span> a;</span><br><span class="line">    <span class="comment">//函数声明b的提升</span></span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="comment">//内部的函数声明a的提升</span></span><br><span class="line">         <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">           <span class="comment">//全局变量</span></span><br><span class="line">         a = <span class="number">10</span>;</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       a = <span class="number">1</span>;</span><br><span class="line">       <span class="title function_">b</span>();</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(a);<span class="comment">//在当前的作用域中，可以找到变量a，不需要获取全局变量a,所以其值为1，所以打印结果为1，</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure><h2 id="11、闭包"><a href="#11、闭包" class="headerlink" title="11、闭包"></a>11、闭包</h2><p>在正常的情况下，如果定义了一个函数，就会产生一个函数作用域，在函数体中的局部变量会在这个函数的作用域中使用。</p><p>一旦函数执行完毕后，函数所占用的空间就会被回收，存在于函数体中的局部变量同样也会被回收，回收后将不能被访问。</p><p>如果我们期望在函数执行完毕以后，函数中的局部变量仍然可以被访问到，应该怎样实现呢？</p><p>这里我们可以通过闭包来实现。</p><p>在讲解闭包的问题之前，我们先说一个概念，执行上下文环境。</p><h3 id="执行上下文环境"><a href="#执行上下文环境" class="headerlink" title="执行上下文环境"></a>执行上下文环境</h3><p><code>JavaScript</code>的每段代码的执行都会存在于一个执行上下文环境中。</p><p>执行上下文有且只有三类，全局执行上下文，函数上下文，与<code>eval</code>上下文；由于<code>eval</code>一般不会使用，这里不做讨论</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">f2</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">f3</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f3</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f1</span>();<span class="comment">//3 2 1</span></span><br></pre></td></tr></table></figure><p>为了方便理解，我们假设执行栈是一个数组，在代码执行初期一定会创建全局执行上下文并压入栈，因此过程大致如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码执行前创建全局执行上下文</span></span><br><span class="line"><span class="title class_">ECStack</span> = [globalContext];</span><br><span class="line"><span class="comment">// f1调用</span></span><br><span class="line"><span class="title class_">ECStack</span>.<span class="title function_">push</span>(<span class="string">&#x27;f1 functionContext&#x27;</span>);</span><br><span class="line"><span class="comment">// f1又调用了f2，f2执行完毕之前无法console 1</span></span><br><span class="line"><span class="title class_">ECStack</span>.<span class="title function_">push</span>(<span class="string">&#x27;f2 functionContext&#x27;</span>);</span><br><span class="line"><span class="comment">// f2又调用了f3，f3执行完毕之前无法console 2</span></span><br><span class="line"><span class="title class_">ECStack</span>.<span class="title function_">push</span>(<span class="string">&#x27;f3 functionContext&#x27;</span>);</span><br><span class="line"><span class="comment">// f3执行完毕，输出3并出栈</span></span><br><span class="line"><span class="title class_">ECStack</span>.<span class="title function_">pop</span>();</span><br><span class="line"><span class="comment">// f2执行完毕，输出2并出栈</span></span><br><span class="line"><span class="title class_">ECStack</span>.<span class="title function_">pop</span>();</span><br><span class="line"><span class="comment">// f1执行完毕，输出1并出栈</span></span><br><span class="line"><span class="title class_">ECStack</span>.<span class="title function_">pop</span>();</span><br><span class="line"><span class="comment">// 此时执行栈中只剩下一个全局执行上下文</span></span><br></pre></td></tr></table></figure><h3 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h3><p>关于闭包的官方概念：一个拥有许多变量和绑定了这些变量执行上下文环境的表达式，通常是一个函数。</p><p>简单的理解就是：闭包就是能够读取其它函数内部变量的函数。由于在<code>JavaScript</code>语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成“定义在一个函数内部的函数”。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span> () &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">inner</span> () &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p><p>闭包有两个比较显著的特点：</p><p>第一：函数拥有的外部变量的引用，在函数返回时，该变量仍然处于活跃状态。</p><p>第二：闭包作为一个函数返回时，其执行上下文环境不会销毁，仍然处于执行上下文环境中。</p><p>在<code>JavaScript</code>中存在一种内部函数，即函数声明和函数表达式可以位于另一个函数的函数体内，在内部函数中可以访问外部函数声明的变量，当这个内部函数在包含它们外部函数之外被调用时，就会形成闭包。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">makeFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;Mozilla&quot;</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">displayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> displayName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myFunc = <span class="title function_">makeFunc</span>();</span><br><span class="line"><span class="title function_">myFunc</span>();</span><br></pre></td></tr></table></figure><p>下面，我们再来看另外一段代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> max = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params">x</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (x &gt; max) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> f1 = <span class="title function_">fn</span>();</span><br><span class="line">  <span class="title function_">f1</span>(<span class="number">11</span>); <span class="comment">// 11</span></span><br></pre></td></tr></table></figure><h3 id="闭包的应用场景"><a href="#闭包的应用场景" class="headerlink" title="闭包的应用场景"></a>闭包的应用场景</h3><p> <strong>应用缓存</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cacheApp = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">var</span> cache = &#123;&#125;;</span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">       <span class="attr">getResult</span>: <span class="keyword">function</span> (<span class="params">id</span>) &#123;</span><br><span class="line">         <span class="comment">// 如果在内存中，则直接返回</span></span><br><span class="line">         <span class="keyword">if</span> (id <span class="keyword">in</span> cache) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;得到的结果为:&quot;</span> + cache[id];</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//经过耗时函数的处理</span></span><br><span class="line">         <span class="keyword">var</span> result = <span class="title function_">timeFn</span>(id);</span><br><span class="line">         <span class="comment">//更新缓存</span></span><br><span class="line">         cache[id] = result;</span><br><span class="line">         <span class="comment">//返回计算的结果</span></span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;得到的结果为:&quot;</span> + result;</span><br><span class="line">       &#125;,</span><br><span class="line">     &#125;;</span><br><span class="line">   &#125;)();</span><br><span class="line">   <span class="comment">//耗时函数</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">timeFn</span>(<span class="params">id</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;这是一个非常耗时的任务&quot;</span>);</span><br><span class="line">     <span class="keyword">return</span> id;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(cacheApp.<span class="title function_">getResult</span>(<span class="number">23</span>));</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(cacheApp.<span class="title function_">getResult</span>(<span class="number">23</span>));</span><br></pre></td></tr></table></figure><p><strong>代码封装</strong></p><p>在编程的时候，我们提倡将一定特征的代码封装到一起，只需要对外暴露对应的方法就可以，从而不用关心内部逻辑的实现。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">     <span class="keyword">var</span> stack = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       <span class="comment">//使用数组模拟栈</span></span><br><span class="line">       <span class="keyword">var</span> arr = [];</span><br><span class="line">       <span class="keyword">return</span> &#123;</span><br><span class="line">         <span class="attr">push</span>: <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">           arr.<span class="title function_">push</span>(value);</span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="attr">pop</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> arr.<span class="title function_">pop</span>();</span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="attr">size</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> arr.<span class="property">length</span>;</span><br><span class="line">         &#125;,</span><br><span class="line">       &#125;;</span><br><span class="line">     &#125;)();</span><br><span class="line">     stack.<span class="title function_">push</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">     stack.<span class="title function_">push</span>(<span class="string">&quot;def&quot;</span>);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(stack.<span class="title function_">size</span>()); <span class="comment">// 2</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(stack.<span class="title function_">pop</span>()); <span class="comment">// def</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(stack.<span class="title function_">size</span>()); <span class="comment">// 1</span></span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="闭包常见面试题"><a href="#闭包常见面试题" class="headerlink" title="闭包常见面试题"></a>闭包常见面试题</h3><p>第一：如下程序执行的结果为：</p><p>获取所单击的<code>li</code>元素的索引值</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>b<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>c<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>d<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>e<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对应的<code>js</code>代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取所单击的`li`元素的索引值</span></span><br><span class="line">    <span class="keyword">var</span> list = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;ul&quot;</span>)[<span class="number">0</span>].<span class="property">children</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      list[i].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以采用闭包解决这个问题：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;ul&quot;</span>)[<span class="number">0</span>].<span class="property">children</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      (<span class="keyword">function</span> (<span class="params">index</span>) &#123;</span><br><span class="line">        list[index].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;)(i);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>第二：如下程序输出结果是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码修改后的内容为：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  (<span class="keyword">function</span> (<span class="params">index</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[index]);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三：以下程序打印结果是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> userName = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">userName</span>: <span class="string">&quot;lisi&quot;</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">userName</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">method</span>()()); <span class="comment">//zhangsan</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> userName = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> person = &#123;</span><br><span class="line">      <span class="attr">userName</span>: <span class="string">&quot;lisi&quot;</span>,</span><br><span class="line">      <span class="attr">method</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="variable language_">this</span>; <span class="comment">//用that保存person的this</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> that.<span class="property">userName</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">method</span>()());</span><br></pre></td></tr></table></figure><p>第四：以下程序的输出结果</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">create</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> fn = <span class="title function_">create</span>();</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">200</span>;</span><br><span class="line">  <span class="title function_">fn</span>(); <span class="comment">// 100</span></span><br></pre></td></tr></table></figure><p>第五：以下程序的输出结果：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">     <span class="keyword">var</span> a = <span class="number">200</span>;</span><br><span class="line">     <span class="title function_">fn</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 100</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title function_">print</span>(fn);</span><br></pre></td></tr></table></figure><h3 id="闭包优缺点"><a href="#闭包优缺点" class="headerlink" title="闭包优缺点"></a>闭包优缺点</h3><p>闭包的优点：</p><p>第一：保护函数内变量的安全，实现封装，防止变量流入其它环境发生命名冲突，造成环境污染。</p><p>第二：在适当的时候，可以在内存中维护变量并缓存，提高执行效率</p><p>闭包的缺点：</p><p>消耗内存：通常来说，函数的活动对象会随着执行上下文环境一起被销毁，但是由于闭包引用的是外部函数的活动对象，因此这个活动对象无法被销毁，所以说，闭包比一般的函数需要消耗更多的内存。</p><h2 id="12、this指向"><a href="#12、this指向" class="headerlink" title="12、this指向"></a>12、this指向</h2><h3 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h3><p>我们知道，当我们创建一个构造函数的实例的时候，需要通过<code>new</code>操作符来完成创建，当创建完成后，函数体中的<code>this</code>指向了这个实例。</p><p>如下代码所示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">userName</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">userName</span> = userName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">userName</span>);</span><br></pre></td></tr></table></figure><p>如果，我们将上面的<code>Person</code>函数当作一个普通函数来调用执行，那么对应的<code>this</code>会指向谁呢？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">userName</span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">userName</span> = userName;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title class_">Person</span>(<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">userName</span>);</span><br></pre></td></tr></table></figure><p>通过上面的程序，我们可以总结出，<code>this</code>指向的永远是函数的调用者。</p><p>第一：如下程序的输出结果：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">120</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> bar = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>); <span class="comment">// 10</span></span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="title function_">bar</span>();<span class="comment">//这里是通过window对象完成bar方法的调用</span></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">method</span>()); <span class="comment">// 120</span></span><br></pre></td></tr></table></figure><p>第二：如下程序的输出结果是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="comment">//给全局变量重新赋值</span></span><br><span class="line">     num = <span class="number">20</span>;</span><br><span class="line">     <span class="comment">// 实例变量</span></span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">num</span> = <span class="number">30</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getNum</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">num</span>;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">getNum</span>()); <span class="comment">// 30</span></span><br></pre></td></tr></table></figure><p>第三：如下程序的输出结果是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">fn</span>: fn,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">fn</span>(); <span class="comment">//window</span></span><br><span class="line">  obj.<span class="title function_">fn</span>(); <span class="comment">//obj</span></span><br></pre></td></tr></table></figure><p>第四：如下程序的输出结果是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fullName = <span class="string">&quot;language&quot;</span>;</span><br><span class="line">     <span class="keyword">var</span> obj = &#123;</span><br><span class="line">       <span class="attr">fullName</span>: <span class="string">&quot;javascript&quot;</span>,</span><br><span class="line">       <span class="attr">prop</span>: &#123;</span><br><span class="line">         <span class="attr">getFullName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">fullName</span>;</span><br><span class="line">         &#125;,</span><br><span class="line">       &#125;,</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">prop</span>.<span class="title function_">getFullName</span>()); <span class="comment">// undefined</span></span><br><span class="line">     <span class="keyword">var</span> test = obj.<span class="property">prop</span>.<span class="property">getFullName</span>; <span class="comment">// language</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">test</span>());</span><br></pre></td></tr></table></figure><p>第五：如下程序的输出结果是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> val = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> json = &#123;</span><br><span class="line">  <span class="attr">val</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">dbl</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    val *= <span class="number">2</span>; <span class="comment">//这里由于前面没有添加this,也就是没有写成this.val,所以这里的val指向了全局变量</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">json.<span class="title function_">dbl</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(json.<span class="property">val</span> + val); <span class="comment">// 12</span></span><br></pre></td></tr></table></figure><p>如果将上面的题目修改成如下的形式：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> val = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> json = &#123;</span><br><span class="line">  <span class="attr">val</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">dbl</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">val</span> *= <span class="number">2</span> <span class="comment">//20</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">json.<span class="title function_">dbl</span>() </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(json.<span class="property">val</span> + val)<span class="comment">//21  20+1=21</span></span><br></pre></td></tr></table></figure><p>第六，如下程序的输出结果是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123; <span class="attr">num</span>: <span class="number">20</span> &#125;;</span><br><span class="line">    obj.<span class="property">fn</span> = (<span class="keyword">function</span> (<span class="params">num</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">num</span> = num * <span class="number">3</span>;</span><br><span class="line">      num++;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">num</span> += n;</span><br><span class="line">        num++;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;)(obj.<span class="property">num</span>);</span><br><span class="line">    <span class="keyword">var</span> fn = obj.<span class="property">fn</span>;</span><br><span class="line">    <span class="title function_">fn</span>(<span class="number">5</span>);</span><br><span class="line">    obj.<span class="title function_">fn</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num, obj.<span class="property">num</span>);</span><br></pre></td></tr></table></figure><p>第七：<code>this</code> 指向<code>call()</code>函数，<code>apply()</code>函数，<code>bind()</code>函数调用后重新绑定的对象。</p><p>我们知道通过<code>call()</code>函数，<code>apply()</code>函数，<code>bind()</code>函数可以改变函数执行的主体，如果函数中存在<code>this</code>关键字，则<code>this</code>指向<code>call()</code>函数，<code>apply()</code>函数，<code>bind()</code>函数处理后的对象。</p><p>代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局变量</span></span><br><span class="line">     <span class="keyword">var</span> value = <span class="number">10</span>;</span><br><span class="line">     <span class="keyword">var</span> obj = &#123;</span><br><span class="line">       <span class="attr">value</span>: <span class="number">20</span>,</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="comment">// 全局函数 </span></span><br><span class="line">     <span class="keyword">var</span> method = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="title function_">method</span>(); <span class="comment">// 10</span></span><br><span class="line">     method.<span class="title function_">call</span>(obj); <span class="comment">// 20</span></span><br><span class="line">     method.<span class="title function_">apply</span>(obj); <span class="comment">// 20</span></span><br><span class="line">     <span class="keyword">var</span> newMethod = method.<span class="title function_">bind</span>(obj);</span><br><span class="line">     <span class="title function_">newMethod</span>(); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><p>下面我们再来看一段代码，看一下对应的执行结果：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>获取用户信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> userInfo = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: [</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">userName</span>: <span class="string">&quot;zhangsan&quot;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">userName</span>: <span class="string">&quot;lisi&quot;</span>, <span class="attr">age</span>: <span class="number">21</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        ],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">getUserInfo</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">var</span> index = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">data</span>[index].<span class="property">userName</span> + <span class="string">&quot; &quot;</span> + <span class="variable language_">this</span>.<span class="property">data</span>[index].<span class="property">age</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      btn.<span class="property">onclick</span> = userInfo.<span class="property">getUserInfo</span>;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改后的代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line">   <span class="comment">//   btn.onclick = userInfo.getUserInfo;</span></span><br><span class="line">   btn.<span class="property">onclick</span> = userInfo.<span class="property">getUserInfo</span>.<span class="title function_">bind</span>(userInfo);</span><br></pre></td></tr></table></figure><p>第八、如下程序的输出结果是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button id=<span class="string">&quot;btn&quot;</span>&gt;获取用户信息&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> userInfo = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#123; <span class="attr">userName</span>: <span class="string">&quot;zhangsan&quot;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#123; <span class="attr">userName</span>: <span class="string">&quot;lisi&quot;</span>, <span class="attr">age</span>: <span class="number">21</span> &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">getUserInfo</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">p</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//   btn.onclick = userInfo.getUserInfo;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  btn.<span class="property">onclick</span> = userInfo.<span class="property">getUserInfo</span>.<span class="title function_">bind</span>(userInfo);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>修改后的代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">      <span class="keyword">var</span> userInfo = &#123;</span><br><span class="line">        <span class="attr">data</span>: [</span><br><span class="line">          &#123; <span class="attr">userName</span>: <span class="string">&quot;zhangsan&quot;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">userName</span>: <span class="string">&quot;lisi&quot;</span>, <span class="attr">age</span>: <span class="number">21</span> &#125;,</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">getUserInfo</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> that = <span class="variable language_">this</span>;<span class="comment">//保存this</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">p</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(that);<span class="comment">//这里的that 指的就是当前的userInfo对象。</span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line">      <span class="comment">//   btn.onclick = userInfo.getUserInfo;</span></span><br><span class="line">      btn.<span class="property">onclick</span> = userInfo.<span class="property">getUserInfo</span>.<span class="title function_">bind</span>(userInfo);</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>或者是修改成箭头函数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> userInfo = &#123;</span><br><span class="line">   <span class="attr">data</span>: [</span><br><span class="line">     &#123; <span class="attr">userName</span>: <span class="string">&quot;zhangsan&quot;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">     &#123; <span class="attr">userName</span>: <span class="string">&quot;lisi&quot;</span>, <span class="attr">age</span>: <span class="number">21</span> &#125;,</span><br><span class="line">   ],</span><br><span class="line">   <span class="attr">getUserInfo</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="comment">//   var that = this;</span></span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">p</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">     &#125;);</span><br><span class="line">   &#125;,</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line"> <span class="comment">//   btn.onclick = userInfo.getUserInfo;</span></span><br><span class="line"> btn.<span class="property">onclick</span> = userInfo.<span class="property">getUserInfo</span>.<span class="title function_">bind</span>(userInfo);</span><br></pre></td></tr></table></figure><h2 id="13、call-函数，apply-函数，bind-函数的使用与区别"><a href="#13、call-函数，apply-函数，bind-函数的使用与区别" class="headerlink" title="13、call()函数，apply( )函数，bind( )函数的使用与区别"></a>13、call()函数，apply( )函数，bind( )函数的使用与区别</h2><p>在前面我们简单的说过<code>call( )</code>函数，<code>apply( )</code>函数，<code>bind( )</code>函数，的作用。</p><p><code>call( )</code>函数，<code>apply( )</code>函数，<code>bind( )</code>函数,的作用都是改变<code>this</code>的指向，但是在使用方式上是有一定的区别的。</p><p>下面我们分别来看一下它们各自的使用方式：</p><h3 id="call-函数的基本使用"><a href="#call-函数的基本使用" class="headerlink" title="call( )函数的基本使用"></a><code>call( )</code>函数的基本使用</h3><p>基本语法如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>.<span class="title function_">call</span>(thisObj,arg1,arg2,...)</span><br></pre></td></tr></table></figure><p><code>function</code>表示的是：需要调用的函数。</p><p><code>thisObj</code>表示：<code>this</code>指向的对象，也就是<code>this</code>将指向<code>thisObj</code>这个参数，如果<code>thisObj</code>的值为<code>null</code>或者是<code>undefined</code>,则<code>this</code>指向的是全局对象。</p><p><code>arg1,arg2,..</code>表示：调用的函数需要的参数。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">sub</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(a - b);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   add.<span class="title function_">call</span>(sub, <span class="number">3</span>, <span class="number">1</span>);<span class="comment">// 调用add方法，但是add方法中的this指向的是sub,最终的输出结果是4</span></span><br></pre></td></tr></table></figure><h3 id="apply-函数的基本使用"><a href="#apply-函数的基本使用" class="headerlink" title="apply( )函数的基本使用"></a><code>apply( )</code>函数的基本使用</h3><p><code>apply()</code>函数的作用与<code>call()</code>函数的作用是一样的，不同的是在传递参数的时候有一定的差别</p><p>语法格式如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>.<span class="title function_">apply</span>(thisObj,[argsArray])</span><br></pre></td></tr></table></figure><p><code>function</code>表示的是：需要调用的函数。</p><p><code>thisObj</code>:<code>this</code>指向的对象，也就是<code>this</code>将指向<code>thisObj</code>这个参数，如果<code>thisObj</code>的值为<code>null</code>或者是<code>undefined</code>,则<code>this</code>指向的是全局对象。</p><p><code>[argsArray]</code>:表示的是函数需要的参数会通过数组的形式进行传递,如果传递的不是数组或者是arguments对象，会抛出异常。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// 这里指向的是sub</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">sub</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(a - b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    add.<span class="title function_">apply</span>(sub, [<span class="number">3</span>, <span class="number">1</span>]); </span><br></pre></td></tr></table></figure><h3 id="bind函数的基本使用"><a href="#bind函数的基本使用" class="headerlink" title="bind函数的基本使用"></a><code>bind</code>函数的基本使用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>.<span class="title function_">bind</span>(thisObj,arg1,arg2,...)</span><br></pre></td></tr></table></figure><p>通过上面语法格式，可以看出<code>bind</code>函数与<code>call</code>函数的参数是一样的。</p><p>不同 的是<code>bind</code>函数会返回一个新的函数，可以在任何时候进行调用。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// 这里指向的是sub</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sub</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a - b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newFun = add.<span class="title function_">bind</span>(sub, <span class="number">3</span>, <span class="number">1</span>); <span class="comment">//bind 返回的是一个新的函数。</span></span><br><span class="line"><span class="title function_">newFun</span>();<span class="comment">//完成对add函数的调用，同时this指向了sub</span></span><br></pre></td></tr></table></figure><h3 id="三个函数的比较"><a href="#三个函数的比较" class="headerlink" title="三个函数的比较"></a>三个函数的比较</h3><p>通过前面对三个函数的基本使用，可以看出，它们共同点就是改变<code>this</code>的指向。</p><p>不同点：</p><p><code>call()</code>函数与<code>apply()</code>函数，会立即执行函数的调用，而<code>bind</code>返回的是一个新的函数，可以在任何时候进行调用。</p><p><code>call()</code>函数与<code>bind</code>函数的参数是一样的，而<code>apply</code>函数第二个参数是一个数组或者是<code>arguments</code>对象。</p><h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><p>这里，我们重点看一下，关于<code>call()</code>函数，<code>bind()</code>函数，<code>apply()</code>函数的应用场景。</p><p><strong>求数组中的最大值与最小值</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">9</span>];</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, arr));</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">min</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, arr));</span><br></pre></td></tr></table></figure><p><strong>将<code>arguments</code>转换成数组</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">var</span> arr = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">     arr.<span class="title function_">push</span>(<span class="number">6</span>);</span><br><span class="line">     <span class="keyword">return</span> arr;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure><p><strong>继承的实现</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">userName, userAge</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">userName</span> = userName;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">userAge</span> = userAge;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name, age, gender</span>) &#123;</span><br><span class="line">        <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name, age);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">gender</span> = gender;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> student = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">20</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">        <span class="string">&quot;userName=&quot;</span> +</span><br><span class="line">          student.<span class="property">userName</span> +</span><br><span class="line">          <span class="string">&quot;,userAge=&quot;</span> +</span><br><span class="line">          student.<span class="property">userAge</span> +</span><br><span class="line">          <span class="string">&quot;,gender=&quot;</span> +</span><br><span class="line">          student.<span class="property">gender</span></span><br><span class="line">      );</span><br></pre></td></tr></table></figure><p><strong>改变匿名函数的<code>this</code>指向</strong></p><p>首先看一下如下程序的执行结果：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">userName</span>: <span class="string">&quot;zhangsan&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">userName</span>: <span class="string">&quot;lisi&quot;</span> &#125;,</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; person.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      (<span class="keyword">function</span> (<span class="params">i</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">print</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">id</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">print</span>();</span><br><span class="line">      &#125;)(i);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>具体的实现方式如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">userName</span>: <span class="string">&quot;zhangsan&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">userName</span>: <span class="string">&quot;lisi&quot;</span> &#125;,</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; person.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    (<span class="keyword">function</span> (<span class="params">i</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">print</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">id</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">print</span>();</span><br><span class="line">    &#125;.<span class="title function_">call</span>(person[i], i));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="手写call、apply及bind函数"><a href="#手写call、apply及bind函数" class="headerlink" title="手写call、apply及bind函数"></a>手写call、apply及bind函数</h3><p><strong><code>call</code>方法的实现</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">var</span> args = [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line">  context = context || <span class="variable language_">window</span>;</span><br><span class="line">  </span><br><span class="line">  context.<span class="property">fn</span> = <span class="variable language_">this</span>;</span><br><span class="line">     </span><br><span class="line">  <span class="keyword">var</span> result = context.<span class="title function_">fn</span>(...args);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Add</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num1 + num2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Sub</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num1 - num2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Add</span>.<span class="title function_">myCall</span>(<span class="title class_">Sub</span>, <span class="number">6</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p><strong><code>apply</code>函数的实现</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">       <span class="keyword">var</span> result = <span class="literal">null</span>;</span><br><span class="line">       context = context || <span class="variable language_">window</span>;</span><br><span class="line">       context.<span class="property">fn</span> = <span class="variable language_">this</span>;</span><br><span class="line">       <span class="keyword">if</span> (<span class="variable language_">arguments</span>[<span class="number">1</span>]) &#123;</span><br><span class="line">         <span class="comment">// console.log(&quot;arguments=&quot;, arguments[1]);// arguments= (2) [6, 3]</span></span><br><span class="line">         result = context.<span class="title function_">fn</span>(...<span class="variable language_">arguments</span>[<span class="number">1</span>]);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         result = context.<span class="title function_">fn</span>();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="keyword">function</span> <span class="title function_">Add</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(num1 + num2);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">function</span> <span class="title function_">Sub</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(num1 - num2);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title class_">Add</span>.<span class="title function_">myApply</span>(<span class="title class_">Sub</span>, [<span class="number">6</span>, <span class="number">3</span>]);</span><br></pre></td></tr></table></figure><p><strong><code>bind</code>函数的实现</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">     <span class="comment">// 获取参数</span></span><br><span class="line">     <span class="keyword">var</span> args = [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>), <span class="comment">// [1,5]</span></span><br><span class="line">       fn = <span class="variable language_">this</span>;</span><br><span class="line">     <span class="comment">// console.log(this);//Add</span></span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">Fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="comment">// console.log(this); //Window</span></span><br><span class="line">       <span class="keyword">return</span> fn.<span class="title function_">apply</span>(context, args);</span><br><span class="line">     &#125;;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">Add</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(num1 + num2);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">Sub</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(num1 - num2);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">var</span> newFun = <span class="title class_">Add</span>.<span class="title function_">myBind</span>(<span class="title class_">Sub</span>, <span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">   <span class="title function_">newFun</span>();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// 这里指向的是sub</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">sub</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(a - b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> newFun = add.<span class="title function_">bind</span>(sub, <span class="number">3</span>); <span class="comment">//bind 返回的是一个新的函数。</span></span><br><span class="line">    <span class="title function_">newFun</span>(<span class="number">2</span>); <span class="comment">//完成对add函数的调用，同时this指向了sub</span></span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>下面，我们就实现一下关于<code>myBind</code>方法参数的模拟。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取参数</span></span><br><span class="line">    <span class="keyword">var</span> args = [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>),</span><br><span class="line">      fn = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="comment">// console.log(this);//Add</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">Fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// console.log(this); //Window</span></span><br><span class="line">      <span class="comment">//这里是调用bind函数的时候传递的参数，将其转换成数组</span></span><br><span class="line">      <span class="keyword">var</span> bindArgs = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">      <span class="comment">//下面完成参数的拼接</span></span><br><span class="line">      <span class="keyword">return</span> fn.<span class="title function_">apply</span>(context, args.<span class="title function_">concat</span>(bindArgs));</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Add</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num1 + num2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Sub</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num1 - num2);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> newFun = <span class="title class_">Add</span>.<span class="title function_">myBind</span>(<span class="title class_">Sub</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">newFun</span>(<span class="number">8</span>));</span><br></pre></td></tr></table></figure><h2 id="14、回调函数有什么缺点"><a href="#14、回调函数有什么缺点" class="headerlink" title="14、回调函数有什么缺点"></a>14、回调函数有什么缺点</h2><p>在<code>JavaScript</code>编程过程中，我们经常会写回调函数。</p><p>我们知道在<code>JavaScript</code>中函数也是一种对象，对象可以作为参数传递给函数，因此函数也可以作为参数传递给另外一个函数，这个作为参数的函数就是回调函数。</p><p>例如，如下的代码示例：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> btn=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>回调函数有一个比较严重的问题，就是很容易出现回调地狱的问题。也就是实现了回调函数不断的嵌套。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line">        &#125;,<span class="number">3000</span>)</span><br><span class="line">    </span><br><span class="line">    &#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上的代码就是典型的回调地狱的问题，这样的代码是非常不利于阅读和维护的。</p><p>所以在<code>ES6</code>中提供了<code>Promise</code>以及<code>async/await</code>来解决地狱回调的问题。关于这块内容</p><h2 id="15、-为什么函数被称为一等公民？"><a href="#15、-为什么函数被称为一等公民？" class="headerlink" title="15、 为什么函数被称为一等公民？"></a>15、 为什么函数被称为一等公民？</h2><p>JavaScript 语言将函数看作一种值，与其它值（数值、字符串、布尔值等等）地位相同。凡是可以使用值的地方，就能使用函数。比如，可以把<strong>函数赋值给变量和对象的属性</strong>，也可以当作<strong>参数传入其他函数</strong>，或者<strong>作为函数的结果返回</strong>。</p><p>同时函数还可以作为类的构造函数，完成对象实例的创建。所以说，这种多重身份让<code>JavaScript</code>中的函数变得非常重要，所以说函数被称为一等公民。</p><h1 id><a href="#" class="headerlink" title></a></h1><h1 id="四、对象"><a href="#四、对象" class="headerlink" title="四、对象"></a>四、对象</h1><h2 id="1、对象的属性"><a href="#1、对象的属性" class="headerlink" title="1、对象的属性"></a>1、对象的属性</h2><p>给对象添加属性非常的简单如下所示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">    <span class="attr">userName</span>:<span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想修改属性的特性，可以通过<code>Object.defineProperty()</code>来完成。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">      <span class="attr">userName</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&quot;userName&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    person.<span class="property">userName</span> = <span class="string">&quot;lisi&quot;</span>; <span class="comment">//无法完成值的修改</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">userName</span>); <span class="comment">//zhangsan</span></span><br></pre></td></tr></table></figure><p>我们可以给<code>Object.defineProperty</code>添加<code>getter()</code>函数和<code>setter( )</code>函数，这两个函数可以实现对象的私有属性，私有属性不对外公布，如果想要对私有属性进行读取和写入，可以通过<code>getter()</code>函数和<code>setter( )</code>函数。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">       <span class="attr">_age</span>: <span class="number">20</span>, <span class="comment">// _age表示私有属性</span></span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&quot;age&quot;</span>, &#123;</span><br><span class="line">       <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_age</span>;</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="comment">//在给私有属性赋值的时候，完成对应的校验功能</span></span><br><span class="line">       <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (value &gt;= <span class="number">18</span>) &#123;</span><br><span class="line">           <span class="variable language_">this</span>.<span class="property">_age</span> = value;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;可以浏览该网站&quot;</span>);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;不可以浏览该网站&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">     &#125;);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">age</span>); <span class="comment">//20</span></span><br><span class="line">     person.<span class="property">age</span> = <span class="number">12</span>;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">age</span>); <span class="comment">//20</span></span><br><span class="line">     person.<span class="property">age</span> = <span class="number">30</span>;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">age</span>); <span class="comment">// 30</span></span><br></pre></td></tr></table></figure><p>关于<code>Object.defineProperty</code>更详细的内容，可以参考<code>vue</code>响应式原理的课程。</p><h2 id="2、属性访问方式的区别"><a href="#2、属性访问方式的区别" class="headerlink" title="2、属性访问方式的区别"></a>2、属性访问方式的区别</h2><p>我们知道访问对象中的属性，有两种方式。</p><p>第一种方式:通过‘.’来访问。</p><p>第二种方式:通过‘[ ]’来访问属性。</p><p>两种方式有什么区别呢？</p><p>第一：使用方括号来访问属性，可以借助于变量来实现。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">userName</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> myName = <span class="string">&quot;userName&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(person[myName]);</span><br></pre></td></tr></table></figure><p>第二：使用方括号来访问属性，也可以通过数字来做属性。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;&#125;;</span><br><span class="line">    person[<span class="number">1</span>] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><h2 id="3、创建对象有哪几种方式"><a href="#3、创建对象有哪几种方式" class="headerlink" title="3、创建对象有哪几种方式"></a>3、创建对象有哪几种方式</h2><p><strong>字面量方式创建对象</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> userInfo = &#123;</span><br><span class="line">       <span class="attr">userName</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">       <span class="attr">userAge</span>: <span class="number">18</span>,</span><br><span class="line">       <span class="attr">getUserInfo</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">userName</span> + <span class="string">&quot;:&quot;</span> + <span class="variable language_">this</span>.<span class="property">userAge</span>);</span><br><span class="line">       &#125;, </span><br><span class="line">     &#125;;</span><br><span class="line">     userInfo.<span class="title function_">getUserInfo</span>();</span><br></pre></td></tr></table></figure><p>字面量创建对象比较简单，但是问题也比较突出，每次只能创建一个对象，复用性比较差，如果需要创建多个对象，代码冗余比较高。</p><p><strong>通过工厂模式创建对象</strong></p><p>工厂模式是一个比较重要的设计模式，该模式提供了一个函数，在该函数中完成对象的创建。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createUser</span>(<span class="params">userName, userAge</span>) &#123;</span><br><span class="line">       <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">       o.<span class="property">userName</span> = userName;</span><br><span class="line">       o.<span class="property">userAge</span> = userAge;</span><br><span class="line">       o.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">userName</span> + <span class="string">&quot;:&quot;</span> + <span class="variable language_">this</span>.<span class="property">userAge</span>);</span><br><span class="line">       &#125;;</span><br><span class="line">       <span class="keyword">return</span> o;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">var</span> user1 = <span class="title function_">createUser</span>(<span class="string">&quot;wangwu&quot;</span>, <span class="number">20</span>);</span><br><span class="line">     <span class="keyword">var</span> user2 = <span class="title function_">createUser</span>(<span class="string">&quot;lisi&quot;</span>, <span class="number">20</span>);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(user1.<span class="property">userName</span> + <span class="string">&quot;:&quot;</span> + user2.<span class="property">userName</span>);</span><br></pre></td></tr></table></figure><p>通过工厂模式创建对象，解决了字面量创建对象的问题，也就是当创建多个相似对象的时候代码重复的问题。</p><p>但是问题是，所创建的所有对象都是<code>Object</code>类型，无法进一步的区分对象的具体类型是什么。</p><p><strong>通过构造函数创建对象</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">userName, userAge</span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">userName</span> = userName;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">userAge</span> = userAge;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">userName</span> + <span class="string">&quot;:&quot;</span> + <span class="variable language_">this</span>.<span class="property">userAge</span>);</span><br><span class="line">       &#125;;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">19</span>);</span><br><span class="line">     p.<span class="title function_">sayHi</span>();</span><br></pre></td></tr></table></figure><p>构造函数创建对象的优点：解决了工厂模式中对象类型无法识别的问题，也就是说通过构造函数创建的对象可以确定其所属的类型。</p><p>但是通过构造函数创建对象的问题：</p><p>在使用构造函数创建对象的时候，每个方法都会在创建对象时重新创建一遍，也就是说，根据<code>Person</code>构造函数每创建一个对象，我们就会创建一个<code>sayHi</code>方法，但它们做的事情是一样的，因此会造成内存的浪费。</p><p><strong>通过原型模式创建对象</strong></p><p>我们知道，每个函数都有一个<code>prototype</code>属性，这个属性指向函数的原型对象，而所谓的通过原型模式创建对象就是将属性和方法添加到<code>prototype</code>属性上。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">    <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">userName</span> = <span class="string">&quot;wangwu&quot;</span>;</span><br><span class="line">    <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">userAge</span> = <span class="number">20</span>;</span><br><span class="line">    <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">userName</span> + <span class="string">&quot;:&quot;</span> + <span class="variable language_">this</span>.<span class="property">userAge</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    person1.<span class="title function_">sayHi</span>();</span><br><span class="line">    <span class="keyword">var</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">sayHi</span> === person2.<span class="property">sayHi</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>通过上面的代码，我们可以发现，使用基于原型模式创建的对象，它的属性和方法都是相等的，也就是说不同的对象会共享原型上的属性和方法，这样我们就解决了<code>构造函数</code>创建对象的问题。</p><p>但是这种方式创建的对象也是有问题的，因为所有的对象都是共享相同的属性，所以改变一个对象的属性值，会引起其他对象属性值的改变。而这种情况是我们不允许的，因为这样很容易造成数据的混乱。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">   <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">userName</span> = <span class="string">&quot;wangwu&quot;</span>;</span><br><span class="line">   <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">userAge</span> = <span class="number">20</span>;</span><br><span class="line">   <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">arr</span> = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">   <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">userName</span> + <span class="string">&quot;:&quot;</span> + <span class="variable language_">this</span>.<span class="property">userAge</span>);</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">   <span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">userName</span>);</span><br><span class="line">   p2.<span class="property">userName</span> = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">userName</span>); <span class="comment">//wangwu,基本数据类型不受影响</span></span><br><span class="line">   p1.<span class="property">arr</span>.<span class="title function_">push</span>(<span class="number">3</span>);</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">arr</span>); <span class="comment">// [1,2,3]</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(p2.<span class="property">arr</span>); <span class="comment">// [1,2,3]</span></span><br><span class="line">   <span class="comment">//引用类型受影响</span></span><br></pre></td></tr></table></figure><p><strong>组合使用构造函数模式和原型模式</strong></p><p>通过构造函数和原型模式创建对象是比较常用的一种方式。</p><p>在构造函数中定义对象的属性，而在原型对象中定义对象共享的属性和方法。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在构造函数中定义对象的属性</span></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">userName, userAge</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">userName</span> = userName;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">userAge</span> = userAge;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//在原型对象中添加共享的方法</span></span><br><span class="line">      <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">userName</span>;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">21</span>);</span><br><span class="line">      <span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;lisi&quot;</span>, <span class="number">22</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="title function_">sayHi</span>());</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="title function_">sayHi</span>());</span><br><span class="line">      <span class="comment">// 不同对象共享相同的函数，所以经过比较发现是相等的。</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">sayHi</span> === p1.<span class="property">sayHi</span>);</span><br><span class="line">      <span class="comment">//修改p对象的userName属性的值，但是不会影响到p1对象的userName属性的值</span></span><br><span class="line">      p.<span class="property">userName</span> = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="title function_">sayHi</span>());</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="title function_">sayHi</span>());</span><br></pre></td></tr></table></figure><p>通过构造函数与原型模式组合创建对象的好处就是：每个对象都有自己的属性值，也就是拥有一份自己的实例属性的副本，同时又共享着方法的引用，最大限度的节省了内存。</p><p><strong>使用动态原型模式创建对象</strong></p><p>所谓的使用动态原型模式创建对象，其实就是将所有的内容都封装到构造函数中，而在构造函数中通过判断只初始化一次原型。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">userName, userAge</span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">userName</span> = userName;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">userAge</span> = userAge;</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span>.<span class="property">sayHi</span> !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;abc&quot;</span>); <span class="comment">//只输出一次</span></span><br><span class="line">         <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">userName</span>);</span><br><span class="line">         &#125;;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">21</span>);</span><br><span class="line">     <span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">21</span>);</span><br><span class="line">     person.<span class="title function_">sayHi</span>();</span><br><span class="line">     person1.<span class="title function_">sayHi</span>();</span><br></pre></td></tr></table></figure><p>通过上面的代码可以看出，我们将所有的内容写在了构造函数中，并且在构造函数中通过判断只初始化一次原型，而且只在第一次生成实例的时候进行原型的设置。这种方式创建的对象与构造函数和原型混合模式创建的对象功能上是相同的。</p><h2 id="4、对象拷贝"><a href="#4、对象拷贝" class="headerlink" title="4、对象拷贝"></a>4、对象拷贝</h2><p>拷贝指的就是将某个变量的值复制给另外一个变量的过程，关于拷贝可以分为浅拷贝与深拷贝。</p><p>针对不同的数据类型，浅拷贝与深拷贝会有不同的表现，主要表现于基本数据类型和引用数据类型在内存中存储的值不同。</p><p>对于基本数据类型，变量存储的是值本身，</p><p>对于引用数据类型，变量存储的是值在内存中的地址，如果有多个变量同时指向同一个内存地址，其中对一个变量的值进行修改以后，其它的变量也会受到影响。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">23</span>,<span class="number">33</span>]</span><br><span class="line"><span class="keyword">var</span> arr2=arr</span><br><span class="line">arr2[<span class="number">0</span>]=<span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">//  [10, 23, 33]</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，我们把<code>arr</code>赋值给了<code>arr2</code>,然后修改<code>arr2</code>的值，但是<code>arr</code>也受到了影响。</p><p>正是由于数据类型的不同，导致在进行浅拷贝与深拷贝的时候首先的效果是不一样的。</p><p><strong>基本数据类型不管是浅拷贝还是深拷贝都是对值的本身的拷贝。对拷贝后值的修改不会影响到原始的值。</strong></p><p><strong>对于引用数据类型进行浅拷贝，拷贝后的值的修改会影响到原始的值，如果执行的是深拷贝，则拷贝的对象和原始对象之间相互独立，互不影响。</strong></p><p>所以，这里我们可以总结出什么是浅拷贝，什么是深拷贝。</p><p>浅拷贝：如果一个对象中的属性是基本数据类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址，也就是拷贝后的内容与原始内容指向了同一个内存地址，这样拷贝后的值的修改会影响到原始的值。</p><p>深拷贝：如果一个对象中的属性是基本数据类型，拷贝的也是基本类型的值，如果属性是引用类型，就将其从内存中完整的拷贝一份出来，并且会在堆内存中开辟出一个新的区域存来进行存放，而且拷贝的对象和原始对象之间相互独立，互不影响。</p><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>下面我们先来看一下<strong>浅拷贝</strong>的内容</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">arr</span>: [<span class="number">2</span>, <span class="number">3</span>], <span class="attr">o</span>: &#123; <span class="attr">name</span>: <span class="string">&quot;zhangsan&quot;</span> &#125; &#125;;</span><br><span class="line">     <span class="keyword">var</span> shallowObj = <span class="title function_">shallowCopy</span>(obj);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">function</span> <span class="title function_">shallowCopy</span>(<span class="params">src</span>) &#123;</span><br><span class="line">       <span class="keyword">var</span> dst = &#123;&#125;;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> src) &#123;</span><br><span class="line">         <span class="keyword">if</span> (src.<span class="title function_">hasOwnProperty</span>(prop)) &#123;</span><br><span class="line">           dst[prop] = src[prop];</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> dst;</span><br><span class="line">     &#125;</span><br><span class="line">     obj.<span class="property">o</span>.<span class="property">name</span> = <span class="string">&quot;lisi&quot;</span>;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(shallowObj.<span class="property">o</span>.<span class="property">name</span>); <span class="comment">//lisi,值受到了影响</span></span><br><span class="line">     obj.<span class="property">arr</span>[<span class="number">0</span>] = <span class="number">20</span>;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(shallowObj.<span class="property">arr</span>[<span class="number">0</span>]); <span class="comment">//20，值受到了影响</span></span><br><span class="line">     obj.<span class="property">a</span> = <span class="number">10</span>;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(shallowObj.<span class="property">a</span>); <span class="comment">// 1,值没有收到影响</span></span><br></pre></td></tr></table></figure><p>除了以上方式实现浅拷贝以外，还可以通过<code>ES6</code>中的<code>Object.assign()</code>函数来实现，该函数可以将源对象中的可枚举的属性复制到目标对象中。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">arr</span>: [<span class="number">2</span>, <span class="number">3</span>], <span class="attr">o</span>: &#123; <span class="attr">name</span>: <span class="string">&quot;zhangsan&quot;</span> &#125; &#125;;</span><br><span class="line">     <span class="keyword">var</span> result = &#123;&#125;;</span><br><span class="line">     <span class="comment">//将obj对象拷贝给result对象</span></span><br><span class="line">     <span class="title class_">Object</span>.<span class="title function_">assign</span>(result, obj);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">     obj.<span class="property">a</span> = <span class="number">10</span>;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">a</span>); <span class="comment">// 1，不受影响</span></span><br><span class="line">     obj.<span class="property">arr</span>[<span class="number">0</span>] = <span class="number">20</span>;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">arr</span>[<span class="number">0</span>]); <span class="comment">//20 受影响</span></span><br><span class="line">     obj.<span class="property">o</span>.<span class="property">name</span> = <span class="string">&quot;lisi&quot;</span>;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">o</span>.<span class="property">name</span>); <span class="comment">// lisi 受影响</span></span><br></pre></td></tr></table></figure><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>下面，我们来看一下<strong>深拷贝</strong>内容</p><p>这里，我们可以使用</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>());</span><br></pre></td></tr></table></figure><p>来实现深拷贝。</p><p><code>JSON.stringify()</code>可以将对象转换为字符串</p><p><code>JSON.parse()</code>可以将字符串反序列为一个对象</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">arr</span>: [<span class="number">2</span>, <span class="number">3</span>], <span class="attr">o</span>: &#123; <span class="attr">name</span>: <span class="string">&quot;zhangsan&quot;</span> &#125; &#125;;</span><br><span class="line">     <span class="keyword">var</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj);</span><br><span class="line">     <span class="keyword">var</span> resultObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(str);</span><br><span class="line">     obj.<span class="property">a</span> = <span class="number">10</span>;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(resultObj.<span class="property">a</span>); <span class="comment">// 1 不受影响</span></span><br><span class="line">     obj.<span class="property">arr</span>[<span class="number">0</span>] = <span class="number">20</span>;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(resultObj.<span class="property">arr</span>[<span class="number">0</span>]); <span class="comment">// 2 不受影响</span></span><br><span class="line">     obj.<span class="property">o</span>.<span class="property">name</span> = <span class="string">&quot;lisi&quot;</span>;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(resultObj.<span class="property">o</span>.<span class="property">name</span>); <span class="comment">// zhangsan 不受影响</span></span><br></pre></td></tr></table></figure><p>以上通过<code>JSON</code>对象，虽然能够实现深拷贝，但是还是有一定的问题的。</p><p>第一：无法实现对函数的拷贝</p><p>第二：如果对象中存在循环引用，会抛出异常。</p><p>第三：对象中的构造函数会指向<code>Object</code>,原型链关系被破坏。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">userName</span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">userName</span> = userName;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">     <span class="keyword">var</span> obj = &#123;</span><br><span class="line">       <span class="attr">fn</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="comment">// 属性o的值为某个对象</span></span><br><span class="line">       <span class="attr">o</span>: person,</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="keyword">var</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj);</span><br><span class="line">     <span class="keyword">var</span> resultObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(str);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;resultObj=&quot;</span>, resultObj); <span class="comment">// 这里丢失了fn属性。因为该属性的值为函数</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(resultObj.<span class="property">o</span>.<span class="property">constructor</span>); <span class="comment">//指向了Object,导致了原型链关系的破坏。</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">o</span>.<span class="property">constructor</span>); <span class="comment">// 这里指向Person构造函数，没有问题</span></span><br></pre></td></tr></table></figure><p>下面我们再来看一下循环引用的情况：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">      <span class="attr">userName</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    obj.<span class="property">a</span> = obj;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br></pre></td></tr></table></figure><p>以上的内容会抛出异常。</p><p><strong>自己模拟实现深拷贝</strong></p><p>这里，我们实现一个简单的深拷贝，当然也可以使用第三方库中的方法来实现深拷贝，例如：可以使用<code>jQuery</code>中的<code>$.extend()</code></p><p>在浅拷贝中，我们通过循环将源对象中属性依次添加到目标对象中，而在深拷贝中，需要考虑对象中的属性是否有嵌套的情况（属性的值是否还是一个对象），如果有嵌套可以通过递归的方式来实现，直到属性为基本类型，也就是说，我们需要将源对象各个属性所包含的对象依次采用递归的方式复制到<strong>新对象</strong>上。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clone</span>(<span class="params">target</span>) &#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">typeof</span> target === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">         <span class="keyword">let</span> objTarget = &#123;&#125;;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> target) &#123;</span><br><span class="line">             <span class="comment">//通过递归完成拷贝</span></span><br><span class="line">           objTarget[key] = <span class="title function_">clone</span>(target[key]);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> objTarget;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> target;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">var</span> obj = &#123;</span><br><span class="line">       <span class="attr">userName</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">       <span class="attr">a</span>: &#123;</span><br><span class="line">         <span class="attr">a1</span>: <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">       &#125;,</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="keyword">var</span> result = <span class="title function_">clone</span>(obj);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><p>以上就是一个最简单的深拷贝功能，但是在这段代码中我们只考虑了普通的<code>object</code>,还没有实现数组，所以将上面的代码修改一下，让其能够兼容到数组。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clone</span>(<span class="params">target</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">typeof</span> target === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">       <span class="comment">//判断target是否为数组</span></span><br><span class="line">       <span class="keyword">let</span> objTarget = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(target) ? [] : &#123;&#125;;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> target) &#123;</span><br><span class="line">         objTarget[key] = <span class="title function_">clone</span>(target[key]);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> objTarget;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> target;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">var</span> obj = &#123;</span><br><span class="line">     <span class="attr">userName</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">     <span class="attr">a</span>: &#123;</span><br><span class="line">       <span class="attr">a1</span>: <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="comment">//添加数组</span></span><br><span class="line">     <span class="attr">arr</span>: [<span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">var</span> result = <span class="title function_">clone</span>(obj);</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><p>在上面的代码中，添加了<code>  let objTarget = Array.isArray(target) ? [] : &#123;&#125;;</code>判断<code>target</code>是否为数组。</p><p>下面我们来看一下循环引用的情况：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clone</span>(<span class="params">target</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">typeof</span> target === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">       <span class="comment">//判断target是否为数组</span></span><br><span class="line">       <span class="keyword">let</span> objTarget = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(target) ? [] : &#123;&#125;;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> target) &#123;</span><br><span class="line">         objTarget[key] = <span class="title function_">clone</span>(target[key]);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> objTarget;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> target;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">var</span> obj = &#123;</span><br><span class="line">     <span class="attr">userName</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">     <span class="attr">a</span>: &#123;</span><br><span class="line">       <span class="attr">a1</span>: <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="comment">//添加数组</span></span><br><span class="line">     <span class="attr">arr</span>: [<span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">   &#125;;</span><br><span class="line">   obj.<span class="property">o</span> = obj; <span class="comment">//构成了循环引用</span></span><br><span class="line">   <span class="keyword">var</span> result = <span class="title function_">clone</span>(obj);</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><p>在上面的代码中，添加了<code>obj.o=obj</code>.然后出现了<code>Maximum call stack size exceeded</code></p><p>以上的错误表明了递归进入了死循环导致栈内存溢出。</p><p>原因是：对象存在循环引用的情况，也就是对象的属性间接或直接引用了自身的情况。</p><p>解决的方法：这里我们可以额外开辟一个存储空间，在这个存储空间中存储当前对象和拷贝对象之间的对应关系。</p><p>当需要拷贝当前的对象的时候，先去这个存储空间中进行查找，如果没有拷贝过这个对象，执行拷贝操作。如果已经拷贝过这个对象，直接返回，这样就可以解决循环引用的问题。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">clone</span>(<span class="params">target</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">typeof</span> target === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">       <span class="comment">//判断target是否为数组</span></span><br><span class="line">       <span class="keyword">let</span> objTarget = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(target) ? [] : &#123;&#125;;</span><br><span class="line">       <span class="comment">// 如果有直接返回</span></span><br><span class="line">       <span class="keyword">if</span> (map.<span class="title function_">get</span>(target)) &#123;</span><br><span class="line">         <span class="keyword">return</span> target;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//存储当前对象与拷贝对象的对应关系</span></span><br><span class="line">       map.<span class="title function_">set</span>(target, objTarget);</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> target) &#123;</span><br><span class="line">         objTarget[key] = <span class="title function_">clone</span>(target[key]);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> objTarget;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> target;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">var</span> obj = &#123;</span><br><span class="line">     <span class="attr">userName</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">     <span class="attr">a</span>: &#123;</span><br><span class="line">       <span class="attr">a1</span>: <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="comment">//添加数组</span></span><br><span class="line">     <span class="attr">arr</span>: [<span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">   &#125;;</span><br><span class="line">   obj.<span class="property">o</span> = obj; <span class="comment">//构成了循环引用</span></span><br><span class="line">   <span class="keyword">var</span> result = <span class="title function_">clone</span>(obj);</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><p>以上就是一个基本的深拷贝的案例。</p><h2 id="5、重写原型对象的问题"><a href="#5、重写原型对象的问题" class="headerlink" title="5、重写原型对象的问题"></a>5、重写原型对象的问题</h2><p><strong>原型对象</strong></p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/constructor.png"></p><p>在前面的课程中，我们讲解过原型对象，我们知道每个函数在创建的时候都会有一个<code>prototype</code>属性，它指向函数的原型对象。</p><p>在这个对象中可以包含所有实例共享的属性和方法。例如上图中的<code>sayName</code>方法。</p><p>同时在每个原型对象上都会增加一个<code>constructor</code>属性，该属性指向<code>prototype</code>属性所在的构造函数，如上图所示。</p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/proto.png"></p><p>当我们通过<code>new</code>操作符创建一个实例的时候，该实例就有了一个<code>__proto__</code>属性，该属性指向了构造函数的原型对象，如上图所示：</p><p>所以说，<code>__proto__</code>属性可以看作是一个连接实例与构造函数的原型对象的桥梁。</p><p><strong>所以三者的关系是，每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。</strong>通俗点说就是，实例通过内部指针可以访问到原型对象，原型对象通过constructor指针，又可以找到构造函数。也就是上图体现的内容。</p><p>下面我们来看一个问题：<strong>重写原型对象</strong></p><p>我们在前面写代码的时候，每次都是为原型对象添加一个属性或者函数时，都是直接给<code>Person.prototype</code>上添加，这种写法比较冗余。</p><p>我们可以将属性和方法写成一个字面量对象的形式，然后在赋值给<code>prototype</code>属性。</p><p>如下代码所示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">   <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">     <span class="attr">userName</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">     <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">     <span class="attr">sayHi</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">userName</span>);</span><br><span class="line">     &#125;,</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">   person.<span class="title function_">sayHi</span>(); <span class="comment">//zhangsan</span></span><br></pre></td></tr></table></figure><p>通过执行的结果，依然可以获取到原型对象上属性的值。</p><p>当我们把一个字面量对象赋值给<code>prototype</code>属性以后，实际上就是重写了原型对象。</p><p>但是这时候，我们打印<code>Person.prototype.constructor</code>的时候，发现不在指向<code>Person</code>这个构造函数,而是指向了<code>Object</code>构造函数。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">    <span class="attr">userName</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">sayHi</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">userName</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">  person.<span class="title function_">sayHi</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>); <span class="comment">// Object</span></span><br></pre></td></tr></table></figure><p>原因是：在重写<code>prototype</code>的时候，我们使用字面量创建了一个新的对象，并且这个新的对象中少了<code>constructor</code>属性，</p><p>如下图所示</p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E9%87%8D%E5%86%99.png"></p><p>而我们可以看到在字面量对象中有一个<code>__proto__</code>属性，指向了<code>Object</code>的原型对象,这时，只能去<code>Object</code>原型对象中查找是否有<code>constructor</code>属性，而<code>Object</code>原型对象中的<code>constructor</code>指向的还是<code>Object</code>.所以最终输出结果为<code>Object</code>.</p><p>我们怎样避免这种情况呢？</p><p>可以在重写原型对象的时候添加<code>constructor</code>属性。这样就不用在去新对象的原型对象中查找<code>constructor</code>属性了。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">      <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">        <span class="attr">constructor</span>: <span class="title class_">Person</span>, <span class="comment">//添加constructor</span></span><br><span class="line">        <span class="attr">userName</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="attr">sayHi</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">userName</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">      person.<span class="title function_">sayHi</span>();</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>);<span class="comment">// Person</span></span><br></pre></td></tr></table></figure><p>重写了原型对象以后，还需要注意一个问题，就是在重写原型对象之前，已经生成的对象的实例，无法获取新的原型对象中的属性和方法。</p><p>如下代码所示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();<span class="comment">//在重写原型对象之前，生成对象的实例</span></span><br><span class="line">    <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">      <span class="attr">constructor</span>: <span class="title class_">Person</span>, <span class="comment">//添加constructor</span></span><br><span class="line">      <span class="attr">userName</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">      <span class="attr">sayHi</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">userName</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//   var person = new Person();</span></span><br><span class="line">    person.<span class="title function_">sayHi</span>(); <span class="comment">//  person.sayHi is not a function,无法获取sayHi函数。</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>造成上面错误的原因是：<code>person</code>这个对象指向的是最初的原型对象，而最初的原型对象中是没有<code>sayHi</code>这个方法的。</p><p>所以在执行的时候会抛出异常。</p><h2 id="6、继承的实现方式有哪些"><a href="#6、继承的实现方式有哪些" class="headerlink" title="6、继承的实现方式有哪些"></a>6、继承的实现方式有哪些</h2><p>关于继承的实现方式，在前面，我们也已经讲解过，这里做一个汇总。</p><h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><p>代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">      <span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">superType</span> = <span class="string">&quot;Animal&quot;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name || <span class="string">&quot;动物&quot;</span>;</span><br><span class="line">        <span class="comment">//实例方法</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sleep</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;正在睡觉!!&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//原型上的函数</span></span><br><span class="line">      <span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params">food</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;正在吃:&quot;</span> + food);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">Dog</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 改变Dog的prototype指向，指向了一个Animal实例，实现了原型继承</span></span><br><span class="line">      <span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">      <span class="keyword">var</span> doggie = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;wangcai&quot;</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(doggie.<span class="property">superType</span>);</span><br><span class="line">      doggie.<span class="title function_">sleep</span>();</span><br><span class="line">      doggie.<span class="title function_">eat</span>(<span class="string">&quot;狗粮&quot;</span>);</span><br></pre></td></tr></table></figure><p>在上面的代码中，将<code>Animal</code>的实例赋值给了<code>Dog</code>的原型对象，这样就实现了原型的继承，所以<code>Dog</code>的实例可以获取父类<code>Animal</code>中的<code>superType</code>属性，调用父类中的实例方法，原型上的函数。</p><p>下面，可以通过一张图来理解一下：</p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF1.png"></p><p>原来的构造函数<code>Dog</code>的<code>prototype</code>指向的是<code>Dog</code>的原型对象，但是现在指向了<code>Animal</code>的实例对象。也就是说构造函数<code>Dog</code>的原型对象为<code>Animal</code>的实例对象。</p><p>这样会出现什么样的效果呢？</p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF2.png"></p><p>注意：上面我们所写的代码还是有一个小的问题的。</p><p><code>Dog.prototype.constructor</code>指向了<code>Animal</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>===<span class="title class_">Animal</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>这里，还是要求<code>Dog.prototype.constructor</code>指向<code>Dog</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">superType</span> = <span class="string">&quot;Animal&quot;</span>;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">name</span> = name || <span class="string">&quot;动物&quot;</span>;</span><br><span class="line">       <span class="comment">//实例方法</span></span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">sleep</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;正在睡觉!!&quot;</span>);</span><br><span class="line">       &#125;;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params">food</span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;正在吃:&quot;</span> + food);</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="keyword">function</span> <span class="title function_">Dog</span>(<span class="params">name</span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 改变Dog的prototype指向，指向了一个Animal实例，实现了原型继承</span></span><br><span class="line">     <span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">     <span class="comment">// 将Dog的构造函数指向自身</span></span><br><span class="line">     <span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Dog</span>;</span><br><span class="line">     <span class="keyword">var</span> doggie = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;wangcai&quot;</span>);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(doggie.<span class="property">superType</span>);</span><br><span class="line">     doggie.<span class="title function_">sleep</span>();</span><br><span class="line">     doggie.<span class="title function_">eat</span>(<span class="string">&quot;狗粮&quot;</span>);</span><br></pre></td></tr></table></figure><p>原型继承的优点：</p><p>第一：实现起来非常简单</p><p>只要设置子类的<code>portotype</code>属性为父类的实例即可。</p><p>第二：可以通过子类的实例直接访问父类原型链中的属性和函数。</p><p>原型继承的缺点：</p><p>第一：我们知道子类的所有实例将共享父类的属性，这样就会导致一个问题：如果父类中的某个属性的值为引用类型，某个子类的实例去修改这个属性的值，就会影响到其它实例的值。</p><p>如下代码所示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">emotion</span> = [<span class="string">&quot;吃饭&quot;</span>, <span class="string">&quot;睡觉&quot;</span>, <span class="string">&quot;学习&quot;</span>]; <span class="comment">// 爱好</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Studnet</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span> = id; <span class="comment">// 学号</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title class_">Studnet</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">  <span class="title class_">Studnet</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Studnet</span>;</span><br><span class="line">  <span class="keyword">var</span> stu1 = <span class="keyword">new</span> <span class="title class_">Studnet</span>(<span class="number">1001</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(stu1.<span class="property">emotion</span>); <span class="comment">// [&quot;吃饭&quot;, &quot;睡觉&quot;, &quot;学习&quot;]</span></span><br><span class="line">  stu1.<span class="property">emotion</span>.<span class="title function_">push</span>(<span class="string">&quot;玩游戏&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(stu1.<span class="property">emotion</span>); <span class="comment">// [&quot;吃饭&quot;, &quot;睡觉&quot;, &quot;学习&quot;, &quot;玩游戏&quot;]</span></span><br><span class="line">  <span class="comment">//创建 stu2对象</span></span><br><span class="line">  <span class="keyword">var</span> stu2 = <span class="keyword">new</span> <span class="title class_">Studnet</span>(<span class="number">1002</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(stu2.<span class="property">emotion</span>); <span class="comment">// [&quot;吃饭&quot;, &quot;睡觉&quot;, &quot;学习&quot;, &quot;玩游戏&quot;]</span></span><br></pre></td></tr></table></figure><p>通过上面的代码，我们可以看到<code>stu1</code>对象向数组<code>emotion</code>数组中添加了一项以后，<code>stu2</code>对象也收到了影响。</p><p>第二：在创建子类的实例的时候，无法向父类的构造函数中传递参数。</p><p>在通过<code>new</code>操作符创建子类的实例的时候，会调用子类的构造函数，而在子类的构造函数中并没有设置与父类的关联操作，所以无法向父类的构造函数中传递参数。</p><p>第三：在给子类的原型对象上添加属性或者是方法的时候，一定要放在<code>Student.prototype=new Person</code>语句的后面。</p><p>如下代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">emotion</span> = [<span class="string">&quot;吃饭&quot;</span>, <span class="string">&quot;睡觉&quot;</span>, <span class="string">&quot;学习&quot;</span>]; <span class="comment">// 爱好</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">Studnet</span>(<span class="params">id</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">id</span> = id; <span class="comment">// 学号</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//在Studnet.prototype = new Person();代码前给Student的prototype添加study方法。</span></span><br><span class="line">      <span class="title class_">Studnet</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">study</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;好好学习，天天向上&quot;</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="title class_">Studnet</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">      <span class="title class_">Studnet</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Studnet</span>;</span><br><span class="line">      <span class="keyword">var</span> stu1 = <span class="keyword">new</span> <span class="title class_">Studnet</span>(<span class="number">1001</span>);</span><br><span class="line">      stu1.<span class="title function_">study</span>();</span><br></pre></td></tr></table></figure><p>指向上面的代码，会出现<code>stu1.study is not a function</code>的错误。</p><p>原因：后面通过<code>Studnet.prototype = new Person();</code>这行代码对<code>Student</code>的原型对象进行了重写，所以导致<code>study</code>方法无效了。</p><p>修改后的代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">      <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">emotion</span> = [<span class="string">&quot;吃饭&quot;</span>, <span class="string">&quot;睡觉&quot;</span>, <span class="string">&quot;学习&quot;</span>]; <span class="comment">// 爱好</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">Studnet</span>(<span class="params">id</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">id</span> = id; <span class="comment">// 学号</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="title class_">Studnet</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">      <span class="title class_">Studnet</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Studnet</span>;</span><br><span class="line"><span class="comment">//放在了Studnet.prototype=new Person语句的后面</span></span><br><span class="line">      <span class="title class_">Studnet</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">study</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;好好学习，天天向上&quot;</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">var</span> stu1 = <span class="keyword">new</span> <span class="title class_">Studnet</span>(<span class="number">1001</span>);</span><br><span class="line">      stu1.<span class="title function_">study</span>();</span><br></pre></td></tr></table></figure><h3 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h3><p>在子类的构造函数中，通过<code>apply()</code>方法或者是<code>call()</code>方法，调用父类的构造函数，从而实现继承功能。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">emotion</span> = [<span class="string">&quot;吃饭&quot;</span>, <span class="string">&quot;睡觉&quot;</span>, <span class="string">&quot;学习&quot;</span>]; <span class="comment">// 爱好</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Studnet</span>(<span class="params">id</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">id</span> = id; <span class="comment">// 学号</span></span><br><span class="line">      <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> stu1 = <span class="keyword">new</span> <span class="title class_">Studnet</span>(<span class="number">1001</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(stu1.<span class="property">emotion</span>);</span><br></pre></td></tr></table></figure><p>如下代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">emotion</span> = [<span class="string">&quot;吃饭&quot;</span>, <span class="string">&quot;睡觉&quot;</span>, <span class="string">&quot;学习&quot;</span>]; <span class="comment">// 爱好</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">Studnet</span>(<span class="params">id</span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">id</span> = id; <span class="comment">// 学号</span></span><br><span class="line">     <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">var</span> stu1 = <span class="keyword">new</span> <span class="title class_">Studnet</span>(<span class="number">1001</span>);</span><br><span class="line">   <span class="keyword">var</span> stu2 = <span class="keyword">new</span> <span class="title class_">Studnet</span>(<span class="number">1002</span>);</span><br><span class="line">   stu1.<span class="property">emotion</span>.<span class="title function_">push</span>(<span class="string">&quot;玩游戏&quot;</span>);</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(stu1.<span class="property">emotion</span>); <span class="comment">// [&quot;吃饭&quot;, &quot;睡觉&quot;, &quot;学习&quot;, &quot;玩游戏&quot;]</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(stu2.<span class="property">emotion</span>); <span class="comment">// [&quot;吃饭&quot;, &quot;睡觉&quot;, &quot;学习&quot;]</span></span><br></pre></td></tr></table></figure><p>通过上面的代码，可以看到<code>stu1</code>对象向<code>emotion</code>数组中添加数据，并不会影响到<code>stu2</code>对象。</p><p><strong>构造函数继承的优点</strong></p><p>第一：由于在子类的构造中通过<code>call</code>改变了父类中的<code>this</code>指向，导致了在父类构造函数中定义的属性或者是方法都赋值给了子类，这样生成的每个子类的实例中都具有了这些属性和方法。而且它们之间是互不影响的，及时是引用类型。</p><p>第二：创建子类的实例的时候，可以向父类的构造函数中传递参数。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//传递age参数   </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">age</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">emotion</span> = [<span class="string">&quot;吃饭&quot;</span>, <span class="string">&quot;睡觉&quot;</span>, <span class="string">&quot;学习&quot;</span>]; </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//传递age参数</span></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">Studnet</span>(<span class="params">id, age</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">id</span> = id; </span><br><span class="line">         <span class="comment">// 传递age参数</span></span><br><span class="line">        <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, age);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> stu1 = <span class="keyword">new</span> <span class="title class_">Studnet</span>(<span class="number">1001</span>, <span class="number">20</span>);<span class="comment">//传递年龄</span></span><br><span class="line">      <span class="keyword">var</span> stu2 = <span class="keyword">new</span> <span class="title class_">Studnet</span>(<span class="number">1002</span>, <span class="number">21</span>);</span><br><span class="line">      stu1.<span class="property">emotion</span>.<span class="title function_">push</span>(<span class="string">&quot;玩游戏&quot;</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(stu1.<span class="property">emotion</span>); <span class="comment">// [&quot;吃饭&quot;, &quot;睡觉&quot;, &quot;学习&quot;, &quot;玩游戏&quot;]</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(stu2.<span class="property">emotion</span>); <span class="comment">// [&quot;吃饭&quot;, &quot;睡觉&quot;, &quot;学习&quot;]</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(stu1.<span class="property">age</span>); <span class="comment">// 20</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(stu2.<span class="property">age</span>); <span class="comment">// 21</span></span><br></pre></td></tr></table></figure><p><strong>构造函数继承的缺点</strong></p><p>第一：子类只能继承父类中实例的属性和方法，无法继承父类原型对象上的属性和方法。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">age</span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">emotion</span> = [<span class="string">&quot;吃饭&quot;</span>, <span class="string">&quot;睡觉&quot;</span>, <span class="string">&quot;学习&quot;</span>]; <span class="comment">// 爱好</span></span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 原型上的方法</span></span><br><span class="line">   <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">study</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;好好学习，天天向上&quot;</span>);</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">Studnet</span>(<span class="params">id, age</span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">id</span> = id; <span class="comment">// 学号</span></span><br><span class="line">     <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, age);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">var</span> stu = <span class="keyword">new</span> <span class="title class_">Studnet</span>(<span class="number">1001</span>, <span class="number">20</span>);</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(stu.<span class="property">age</span>); <span class="comment">// 20</span></span><br><span class="line">   stu.<span class="title function_">study</span>(); <span class="comment">//stu.study is not a function</span></span><br></pre></td></tr></table></figure><p>第二：在父类的构造函数中添加一个实例方法，对应的子类也就有了该实例方法，但是问题时，每创建一个子类的实例，都会有一个父类中的实例方法，这样导致的结果就是占用内存比较大。以前我们是定义在<code>prototype</code>原型上来解决这个问题的，但是在构造函数的继承中，又出现了这个。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">age</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">emotion</span> = [<span class="string">&quot;吃饭&quot;</span>, <span class="string">&quot;睡觉&quot;</span>, <span class="string">&quot;学习&quot;</span>]; <span class="comment">// 爱好</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">study</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">id</span> + <span class="string">&quot;号同学要努力学习&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">Studnet</span>(<span class="params">id, age</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">id</span> = id; <span class="comment">// 学号</span></span><br><span class="line">        <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, age);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> stu = <span class="keyword">new</span> <span class="title class_">Studnet</span>(<span class="number">1001</span>, <span class="number">20</span>);</span><br><span class="line">      stu.<span class="title function_">study</span>();</span><br><span class="line">      <span class="keyword">var</span> stu1 = <span class="keyword">new</span> <span class="title class_">Studnet</span>(<span class="number">1002</span>, <span class="number">20</span>);</span><br><span class="line">      stu1.<span class="title function_">study</span>();</span><br><span class="line"><span class="comment">//stu对象和stu1对象都单独有一个study方法。</span></span><br></pre></td></tr></table></figure><h3 id="拷贝继承"><a href="#拷贝继承" class="headerlink" title="拷贝继承"></a>拷贝继承</h3><p>所谓的拷贝继承指的是先创建父类的实例，然后通过<code>for...in</code>的方式来遍历父类实例中的所有属性和方法，并依次赋值给子类的实例，同时原型上的属性和函数也赋给子类的实例。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">age</span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">emotion</span> = [<span class="string">&quot;吃饭&quot;</span>, <span class="string">&quot;睡觉&quot;</span>, <span class="string">&quot;学习&quot;</span>]; <span class="comment">// 爱好</span></span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">study</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">id</span> + <span class="string">&quot;号同学要努力学习&quot;</span>);</span><br><span class="line">       &#125;;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">run</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">id</span> + <span class="string">&quot;号学生正在跑步,年龄是:&quot;</span> + <span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">     &#125;;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">function</span> <span class="title function_">Studnet</span>(<span class="params">id, age</span>) &#123;</span><br><span class="line">       <span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(age);</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> person) &#123;</span><br><span class="line">         <span class="keyword">if</span> (person.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">           <span class="variable language_">this</span>[key] = person[key];</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="title class_">Studnet</span>.<span class="property"><span class="keyword">prototype</span></span>[key] = person[key];</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 子类自身的属性</span></span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">id</span> = id;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">var</span> student = <span class="keyword">new</span> <span class="title class_">Studnet</span>(<span class="number">1001</span>, <span class="number">21</span>);</span><br><span class="line">     student.<span class="title function_">study</span>();</span><br><span class="line">     student.<span class="title function_">run</span>();</span><br></pre></td></tr></table></figure><p>在上面的代码中，创建了父类<code>Person</code>,并且在该类中指定了相应的实例属性和实例方法，同时为其原型对象中也添加了方法。</p><p>在<code>Studnet</code>这个子类中，首先会创建父类<code>Person</code>的实例，然后通过<code>for...in</code>来进行遍历，获取父类中的属性和方法，获取以后进行判断，如果<code>person.hasOwnProperty(key)</code>返回值为<code>false</code>，表示获取到的是父类原型对象上的属性和方法，所以也要添加到子类的<code>prototype</code>属性上，成为子类的原生对象上的属性或者是方法。</p><p>最后创建子类的实例<code>student</code>,通过子类的实例<code>student</code>,可以访问继承到的属性或者是方法。</p><p><strong>拷贝继承的优点</strong></p><p>第一：可以实现向父类中的构造方法中传递参数。</p><p>第二：能够实现让子类继承父类中的实例属性，实例方法以及原型对象上的属性和方法。</p><p><strong>拷贝继承的缺点</strong></p><p>父类的所有属性和方法，子类都需要复制拷贝一遍，所以比较消耗内存。</p><h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><p>组合继承的核心思想是将构造函数继承与原型继承两种方式组合在一起。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">age</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">emotion</span> = [<span class="string">&quot;吃饭&quot;</span>, <span class="string">&quot;睡觉&quot;</span>, <span class="string">&quot;学习&quot;</span>]; <span class="comment">// 爱好</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">study</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">id</span> + <span class="string">&quot;号同学要努力学习&quot;</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">run</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">id</span> + <span class="string">&quot;号学生正在跑步,年龄是:&quot;</span> + <span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Studnet</span>(<span class="params">id, age</span>) &#123;</span><br><span class="line">      <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, age);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">id</span> = id; <span class="comment">//子类独有的属性</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Studnet</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    <span class="title class_">Studnet</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Studnet</span>;</span><br><span class="line">    <span class="keyword">var</span> student = <span class="keyword">new</span> <span class="title class_">Studnet</span>(<span class="number">1001</span>, <span class="number">21</span>);</span><br><span class="line">    student.<span class="title function_">run</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;爱好是:&quot;</span> + student.<span class="property">emotion</span>);</span><br></pre></td></tr></table></figure><p><strong>组合继承的优点</strong></p><p>第一：通过<code>Person.call(this,ge)</code>这个行代码，可以将父类中的实例属性和方法添加到子类<code>Student</code>中，另外通过<code>Studnet.prototype = new Person();</code> 可以将父类的原型对象上的属性和函数绑定到<code>Student</code>的原型对象上。</p><p>第二：可以向父类的构造函数中传递参数。</p><p> <strong>组合继承的缺点</strong></p><p>组合继承的主要缺点是父类的实例属性会绑定两次。</p><p>第一次是在子类的构造函数中通过<code>call( )</code>函数调用了一次父类的构造函数，完成实例属性和方法的绑定操作。</p><p>第二次是在改写子类<code>prototype</code>属性的时候，我们执行了一次<code>new Person()</code>的操作，这里又将父类的构造函数调用了一次，完成了属性的绑定操作。</p><p>所以在整个组合继承的过程中，父类实例的属性和方法会进行两次的绑定操作。当然这里需要你注意的一点是：通过<code>call()</code>函数完成父类中实例属性和方法的绑定的优先级要高于通过改写子类<code>prototype</code>的方式。也就是说第一种方式会覆盖第二种方式：</p><p>如下代码所示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">age</span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">emotion</span> = [<span class="string">&quot;吃饭&quot;</span>, <span class="string">&quot;睡觉&quot;</span>, <span class="string">&quot;学习&quot;</span>]; <span class="comment">// 爱好</span></span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="comment">//实例方法</span></span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">study</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">id</span> + <span class="string">&quot;号同学要努力学习&quot;</span>);</span><br><span class="line">       &#125;;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">run</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">id</span> + <span class="string">&quot;号学生正在跑步,年龄是:&quot;</span> + <span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">     &#125;;</span><br><span class="line">   <span class="comment">// 原型方法</span></span><br><span class="line">     <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">study</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">id</span> + <span class="string">&quot;号学生需要好好学习&quot;</span>);</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="keyword">function</span> <span class="title function_">Studnet</span>(<span class="params">id, age</span>) &#123;</span><br><span class="line">       <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, age);</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">id</span> = id; <span class="comment">//子类独有的属性</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title class_">Studnet</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">     <span class="title class_">Studnet</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Student</span>;</span><br><span class="line">     <span class="keyword">var</span> student = <span class="keyword">new</span> <span class="title class_">Studnet</span>(<span class="number">1001</span>, <span class="number">21</span>);</span><br><span class="line">     student.<span class="title function_">run</span>();</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;爱好是:&quot;</span> + student.<span class="property">emotion</span>);</span><br><span class="line">     student.<span class="title function_">study</span>(); <span class="comment">//调用父类的实例方法student</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，在父类<code>Person</code>的构造函数中定义了实例方法<code>study</code>,同时在其原型对象上也定义了一个<code>study</code>方法。</p><p>通过子类的实例调用<code>study</code>方法的时候，调用的是父类的实例方法<code>study</code>.</p><h3 id="寄生式组合继承"><a href="#寄生式组合继承" class="headerlink" title="寄生式组合继承"></a>寄生式组合继承</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">age</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">emotion</span> = [<span class="string">&quot;吃饭&quot;</span>, <span class="string">&quot;睡觉&quot;</span>, <span class="string">&quot;学习&quot;</span>]; <span class="comment">// 爱好</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">study</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">id</span> + <span class="string">&quot;号同学要努力学习&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">run</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">id</span> + <span class="string">&quot;号学生正在跑步,年龄是:&quot;</span> + <span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">study</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">id</span> + <span class="string">&quot;号学生需要好好学习&quot;</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">Studnet</span>(<span class="params">id, age</span>) &#123;</span><br><span class="line">        <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, age);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">id</span> = id;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">// 定义Super构造函数</span></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">Super</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="comment">//Super.prototype原型对象指向了Person.prototype</span></span><br><span class="line">      <span class="title class_">Super</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line"><span class="comment">//Student.prototype原型对象指向了Super的实例，这样就去掉了Person父类的实例属性。</span></span><br><span class="line">      <span class="title class_">Studnet</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Super</span>();</span><br><span class="line">      <span class="title class_">Studnet</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Studnet</span>;</span><br><span class="line">      <span class="keyword">var</span> student = <span class="keyword">new</span> <span class="title class_">Studnet</span>(<span class="number">1001</span>, <span class="number">21</span>);</span><br><span class="line">      student.<span class="title function_">run</span>();</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;爱好是:&quot;</span> + student.<span class="property">emotion</span>);</span><br><span class="line">      student.<span class="title function_">study</span>();</span><br></pre></td></tr></table></figure><p>在上面的代码中，创建了一个<code>Super</code>构造函数，让<code>Super.prototype</code>的原型指向了<code>Person.prototype</code>,同时将<code>Super</code>的对象赋值给了<code>Student.prototype</code>，这样就去掉了<code>Person</code>父类的实例属性。</p><p>通过寄生式组合继承解决了组合继承的问题。</p><p>同时，在以后的应用中，可以使用组合继承，也可以使用寄生式组合继承。</p><h2 id="7、模拟jQuery实现"><a href="#7、模拟jQuery实现" class="headerlink" title="7、模拟jQuery实现"></a>7、模拟jQuery实现</h2><p>下面我们通过模拟实现一个简单的<code>jQuery</code>,来巩固原型的应用。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 为jQuery起一个别名，模仿jQuery的框架</span></span><br><span class="line">    <span class="keyword">var</span> $ = (jQuery = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;);</span><br><span class="line">    <span class="comment">// 为jQuery原型起一个别名</span></span><br><span class="line">    <span class="comment">//这里没有直接赋值给fn，否则它属于window对象，容易造成全局污染</span></span><br><span class="line">    <span class="comment">//后面要访问jquery的原型，可以直接通过jQuery.fn来实现</span></span><br><span class="line">    jQuery.<span class="property">fn</span> = jQuery.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">      <span class="attr">version</span>: <span class="string">&quot;6.1.1&quot;</span>, <span class="comment">//添加原型属性，表示jquery的版本</span></span><br><span class="line">      <span class="comment">//添加原型方法，表示返回jquery对象的长度</span></span><br><span class="line">      <span class="attr">size</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">length</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>下面，我们使用<code>jQuery</code>原型中的<code>size</code>方法和<code>version</code>属性。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为jQuery起一个别名，模仿jQuery的框架</span></span><br><span class="line">   <span class="keyword">var</span> $ = (jQuery = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;);</span><br><span class="line">   <span class="comment">// 为jQuery原型起一个别名</span></span><br><span class="line">   <span class="comment">//这里没有直接赋值给fn，否则它属于window对象，容易造成全局污染</span></span><br><span class="line">   <span class="comment">//后面要访问jquery的原型，可以直接通过jQuery.fn来实现</span></span><br><span class="line">   jQuery.<span class="property">fn</span> = jQuery.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">     <span class="attr">version</span>: <span class="string">&quot;6.1.1&quot;</span>, <span class="comment">//添加原型属性，表示jquery的版本</span></span><br><span class="line">     <span class="comment">//添加原型方法，表示返回jquery对象的长度</span></span><br><span class="line">     <span class="attr">size</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">length</span>;</span><br><span class="line">     &#125;,</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">var</span> jq = <span class="keyword">new</span> $();</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(jq.<span class="property">version</span>); <span class="comment">// 6.1.1</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(jq.<span class="title function_">size</span>()); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，我们是创建了一个<code>jquery</code>的实例，然后通过该实例完成了原型属性和方法的调用。</p><p>但是在<code>jquery</code>库中，是采用如下的方式进行调用。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$().<span class="property">version</span>;</span><br><span class="line">$().<span class="title function_">size</span>()</span><br></pre></td></tr></table></figure><p>通过以上的两行代码，我们可以看到在<code>jQuery</code>库中，并没有使用<code>new</code>操作符，而是直接使用小括号运算符完成了对<code>jQuery</code>构造函数的调用。然后后面直接访问原型成员。</p><p>那应该怎样实现这种操作？</p><p>我们想到的就是，在<code>jquery</code>的构造函数中，直接创建<code>jQuery</code>类的实例。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为jQuery起一个别名，模仿jQuery的框架</span></span><br><span class="line">   <span class="keyword">var</span> $ = (jQuery = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">jQuery</span>();</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="comment">// 为jQuery原型起一个别名</span></span><br><span class="line">   <span class="comment">//这里没有直接赋值给fn，否则它属于window对象，容易造成全局污染</span></span><br><span class="line">   <span class="comment">//后面要访问jquery的原型，可以直接通过jQuery.fn来实现</span></span><br><span class="line">   jQuery.<span class="property">fn</span> = jQuery.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">     <span class="attr">version</span>: <span class="string">&quot;6.1.1&quot;</span>, <span class="comment">//添加原型属性，表示jquery的版本</span></span><br><span class="line">     <span class="comment">//添加原型方法，表示返回jquery对象的长度</span></span><br><span class="line">     <span class="attr">size</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">length</span>;</span><br><span class="line">     &#125;,</span><br><span class="line">   &#125;;</span><br><span class="line">   $().<span class="property">version</span>;</span><br><span class="line">   <span class="comment">//   var jq = new $();</span></span><br><span class="line">   <span class="comment">//   console.log(jq.version); // 6.1.1</span></span><br><span class="line">   <span class="comment">//   console.log(jq.size());</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，给<code>jQuery</code>构造函数直接返回了<code>它的实例</code>，<code>return new jQuery();</code></p><p>然后获取原型对象中的<code>size</code>属性的值:<code>$().version</code>.</p><p>但是，出现了如下的错误：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Uncaught RangeError: Maximum call stack size exceeded</span><br></pre></td></tr></table></figure><p>以上错误的含义是栈内存溢出。</p><p>原因就是：当我们通过<code>$()</code>调用构造函数的时候，内部有执行了<code>new</code>操作，这时，又会重新执行<code>jQuery</code>的构造函数，这样就造成了死循环。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="keyword">var</span> $ = (jQuery = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> jQuery.<span class="property">fn</span>.<span class="title function_">init</span>(); <span class="comment">//调用原型中的`init方法`</span></span><br><span class="line">&#125;);</span><br><span class="line">     </span><br><span class="line">jQuery.<span class="property">fn</span> = jQuery.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">init</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>; <span class="comment">//返回jquery的原型对象</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">version</span>: <span class="string">&quot;6.1.1&quot;</span>,        </span><br><span class="line">  <span class="attr">size</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">length</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($().<span class="property">version</span>);</span><br></pre></td></tr></table></figure><p>在上面的代码中，在<code>jQuery</code>的构造方法中，调用的是原型中的<code>init</code>方法，在该方法中，返回了<code>jquery</code>的原型对象。</p><p>最后进行输出:<code>cosnole.log($().version)</code></p><p>但是，以上的处理还是隐藏一个问题，具体看如下代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $ = (jQuery = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> jQuery.<span class="property">fn</span>.<span class="title function_">init</span>(); </span><br><span class="line">     &#125;);</span><br><span class="line">     jQuery.<span class="property">fn</span> = jQuery.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">       <span class="attr">init</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">         <span class="variable language_">this</span>.<span class="property">length</span> = <span class="number">0</span>; <span class="comment">//原型属性length</span></span><br><span class="line">         <span class="variable language_">this</span>.<span class="property">_size</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="comment">//原型方法</span></span><br><span class="line">           <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">length</span>;</span><br><span class="line">         &#125;;</span><br><span class="line">         <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="attr">version</span>: <span class="string">&quot;6.1.1&quot;</span>,</span><br><span class="line">       <span class="attr">length</span>: <span class="number">1</span>, <span class="comment">// 原型属性</span></span><br><span class="line">       <span class="attr">size</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">length</span>;</span><br><span class="line">       &#125;,</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>($().<span class="property">version</span>);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>($().<span class="title function_">_size</span>()); <span class="comment">// 0</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>($().<span class="title function_">size</span>()); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，在<code>init</code>这个原型方法中添加了<code>lenght</code>属性与<code>_size</code>方法，在该方法中打印<code>length</code>的值。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $ = (jQuery = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> jQuery.<span class="property">fn</span>.<span class="title function_">init</span>(); <span class="comment">//调用原型中的`init方法`</span></span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure><p>在<code>jQuery</code>的构造函数中，通过<code>new</code>操作符创建了一个实例对象，这样<code>init()</code>方法中的<code>this</code>指向的就是<code>init</code>方法的实例，而不是<code>jQuery.prototype</code>这个原型对象了。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($().<span class="property">version</span>); <span class="comment">// 返回undefined</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>($().<span class="title function_">_size</span>()); <span class="comment">// 0</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>($().<span class="title function_">size</span>()); <span class="comment">// 抛出异常：Uncaught TypeError: $(...).size is not a function</span></span><br></pre></td></tr></table></figure><p>下面，我们来看一下怎样解决现在面临的问题。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $ = (jQuery = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> jQuery.<span class="property">fn</span>.<span class="title function_">init</span>(); <span class="comment">//调用原型中的`init方法`</span></span><br><span class="line">    &#125;);</span><br><span class="line">    jQuery.<span class="property">fn</span> = jQuery.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">      <span class="attr">init</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">length</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_size</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">length</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">version</span>: <span class="string">&quot;6.1.1&quot;</span>,</span><br><span class="line">      <span class="attr">length</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">size</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">length</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="comment">// 将`jQuery`的原型对象覆盖掉init的原型对象。</span></span><br><span class="line">    jQuery.<span class="property">fn</span>.<span class="property">init</span>.<span class="property"><span class="keyword">prototype</span></span> = jQuery.<span class="property">fn</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>($().<span class="property">version</span>); <span class="comment">//6.1.1</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>($().<span class="title function_">_size</span>()); <span class="comment">// 0</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>($().<span class="title function_">size</span>()); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，我们添加了一行代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">jQuery.<span class="property">fn</span>.<span class="property">init</span>.<span class="property"><span class="keyword">prototype</span></span> = jQuery.<span class="property">fn</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($().<span class="property">version</span>); </span><br></pre></td></tr></table></figure><p><strong>下面，要实现的是选择器功能</strong></p><p><code>jQuery</code>构造函数包括两个参数，分别是<code>selector</code>和<code>context</code>,<code>selector</code>表示的是选择器，<code>context</code>表示匹配的上下文，也就是可选择的访问，一般表示的是一个<code>DOM</code>元素。这里我们只考虑标签选择器。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">      <span class="comment">// 给构造函数传递selector,context两个参数</span></span><br><span class="line">      <span class="keyword">var</span> $ = (jQuery = <span class="keyword">function</span> (<span class="params">selector, context</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> jQuery.<span class="property">fn</span>.<span class="title function_">init</span>(selector, context); <span class="comment">//调用原型中的`init方法`</span></span><br><span class="line">      &#125;);</span><br><span class="line">      jQuery.<span class="property">fn</span> = jQuery.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">        <span class="attr">init</span>: <span class="keyword">function</span> (<span class="params">selector, context</span>) &#123;</span><br><span class="line">          selector = selector || <span class="variable language_">document</span>; <span class="comment">//初始化选择器，默认值为document</span></span><br><span class="line">          context = context || <span class="variable language_">document</span>; <span class="comment">// 初始化上下文对象，默认值为document</span></span><br><span class="line">          <span class="keyword">if</span> (selector.<span class="property">nodeType</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果是DOM元素</span></span><br><span class="line">            <span class="comment">// 把该DOM元素赋值给实例对象</span></span><br><span class="line">            <span class="variable language_">this</span>[<span class="number">0</span>] = selector;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">length</span> = <span class="number">1</span>; <span class="comment">//表示包含了1个元素</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">context</span> = selector; <span class="comment">//重新设置上下文对象</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>; <span class="comment">//返回当前实例</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> selector === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">            <span class="comment">//如果选择器是一个字符串</span></span><br><span class="line">            <span class="keyword">var</span> e = context.<span class="title function_">getElementsByTagName</span>(selector); <span class="comment">// 获取指定名称的元素</span></span><br><span class="line">            <span class="comment">//通过for循环将所有元素存储到当前的实例中</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; e.<span class="property">length</span>; i++) &#123;</span><br><span class="line">              <span class="variable language_">this</span>[i] = e[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">length</span> = e.<span class="property">length</span>; <span class="comment">//存储元素的个数</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">context</span> = context; <span class="comment">//保存上下文对象</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>; <span class="comment">//返回当前的实例</span></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">length</span> = <span class="number">0</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">context</span> = context;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//   this.length = 0;</span></span><br><span class="line">          <span class="comment">//   console.log(&quot;init==&quot;, this);</span></span><br><span class="line">          <span class="comment">//   this._size = function () &#123;</span></span><br><span class="line">          <span class="comment">//     return this.length;</span></span><br><span class="line">          <span class="comment">//   &#125;;</span></span><br><span class="line">          <span class="comment">//   return this;</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// version: &quot;6.1.1&quot;,</span></span><br><span class="line">        <span class="comment">// length: 1,</span></span><br><span class="line">        <span class="comment">// size: function () &#123;</span></span><br><span class="line">        <span class="comment">//   return this.length;</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">      &#125;;</span><br><span class="line">      jQuery.<span class="property">fn</span>.<span class="property">init</span>.<span class="property"><span class="keyword">prototype</span></span> = jQuery.<span class="property">fn</span>;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="property">length</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="comment">//   console.log($().version);</span></span><br><span class="line">      <span class="comment">//   console.log($()._size()); // 0</span></span><br><span class="line">      <span class="comment">//   console.log($().size()); // 0</span></span><br><span class="line">      <span class="comment">//   var jq = new $();</span></span><br><span class="line">      <span class="comment">//   console.log(jq.version); // 6.1.1</span></span><br><span class="line">      <span class="comment">//   console.log(jq.size());</span></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &lt;/body&gt;</span><br></pre></td></tr></table></figure><p>在上面的代码中，当页面加载完以后，这时会触发<code>onload</code>事件，在该事件对应的处理函数中，通过<code>$(&quot;div&quot;)</code>,传递的是字符串，</p><p><code>selector</code>参数表示的就是<code>div</code>这个字符串，这里没有传递<code>context</code>参数，表示的就是<code>document</code>对象。</p><p>最后打印元素的个数。</p><p>在使用<code>jQuery</code>库的时候，我们经常可以看到如下的操作：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">html</span>()</span><br></pre></td></tr></table></figure><p>以上代码的含义就是直接在<code>jQuery</code>对象上调用<code>html( )</code>方法来操作<code>jQuery</code>包含所有的<code>DOM</code>元素。</p><p><code>html()</code>方法的实现如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      // 给构造函数传递selector,context两个参数</span><br><span class="line">      var $ = (jQuery = function (selector, context) &#123;</span><br><span class="line">        return new jQuery.fn.init(selector, context); //调用原型中的`init方法`</span><br><span class="line">      &#125;);</span><br><span class="line">      jQuery.fn = jQuery.prototype = &#123;</span><br><span class="line">        init: function (selector, context) &#123;</span><br><span class="line">          selector = selector || document; //初始化选择器，默认值为document</span><br><span class="line">          context = context || document; // 初始化上下文对象，默认值为document</span><br><span class="line">          if (selector.nodeType) &#123;</span><br><span class="line">            // 如果是DOM元素</span><br><span class="line">            // 把该DOM元素赋值给实例对象</span><br><span class="line">            this[0] = selector;</span><br><span class="line">            this.length = 1; //表示包含了1个元素</span><br><span class="line">            this.context = selector; //重新设置上下文对象</span><br><span class="line">            return this; //返回当前实例</span><br><span class="line">          &#125;</span><br><span class="line">          if (typeof selector === &quot;string&quot;) &#123;</span><br><span class="line">            //如果选择器是一个字符串</span><br><span class="line">            var e = context.getElementsByTagName(selector); // 获取指定名称的元素</span><br><span class="line">            //通过for循环将所有元素存储到当前的实例中</span><br><span class="line">            for (var i = 0; i &lt; e.length; i++) &#123;</span><br><span class="line">              this[i] = e[i];</span><br><span class="line">            &#125;</span><br><span class="line">            this.length = e.length; //存储元素的个数</span><br><span class="line">            this.context = context; //保存上下文对象</span><br><span class="line">            return this; //返回当前的实例</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            this.length = 0;</span><br><span class="line">            this.context = context;</span><br><span class="line">            return this;</span><br><span class="line">          &#125;</span><br><span class="line">          //   this.length = 0;</span><br><span class="line">          //   console.log(&quot;init==&quot;, this);</span><br><span class="line">          //   this._size = function () &#123;</span><br><span class="line">          //     return this.length;</span><br><span class="line">          //   &#125;;</span><br><span class="line">          //   return this;</span><br><span class="line">        &#125;,</span><br><span class="line">        html: function (val) &#123;</span><br><span class="line">          jQuery.each(</span><br><span class="line">            this,</span><br><span class="line">            function (val) &#123;</span><br><span class="line">              this.innerHTML = val;</span><br><span class="line">            &#125;,</span><br><span class="line">            val</span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        // version: &quot;6.1.1&quot;,</span><br><span class="line">        // length: 1,</span><br><span class="line">        // size: function () &#123;</span><br><span class="line">        //   return this.length;</span><br><span class="line">        // &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line">      jQuery.fn.init.prototype = jQuery.fn;</span><br><span class="line"></span><br><span class="line">      //提供each扩展方法</span><br><span class="line">      jQuery.each = function (object, callback, args) &#123;</span><br><span class="line">        //通过for循环的方式来遍历jQuery对象中的每个DOM元素。</span><br><span class="line">        for (var i = 0; i &lt; object.length; i++) &#123;</span><br><span class="line">          // 在每个DOM元素上调用回调函数</span><br><span class="line">          callback.call(object[i], args);</span><br><span class="line">        &#125;</span><br><span class="line">        return object; //返回jQuery对象。</span><br><span class="line">      &#125;;</span><br><span class="line">      window.onload = function () &#123;</span><br><span class="line">        // console.log($(&quot;div&quot;).length);</span><br><span class="line">        $(&quot;div&quot;).html(&quot;&lt;h2&gt;hello&lt;h2&gt;&quot;);</span><br><span class="line">      &#125;;</span><br><span class="line">      //   console.log($().version);</span><br><span class="line">      //   console.log($()._size()); // 0</span><br><span class="line">      //   console.log($().size()); // 0</span><br><span class="line">      //   var jq = new $();</span><br><span class="line">      //   console.log(jq.version); // 6.1.1</span><br><span class="line">      //   console.log(jq.size());</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上面的代码中，首先添加了<code>jQuery.each</code>方法。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//提供each扩展方法</span></span><br><span class="line">  jQuery.<span class="property">each</span> = <span class="keyword">function</span> (<span class="params">object, callback, args</span>) &#123;</span><br><span class="line">    <span class="comment">//通过for循环的方式来遍历jQuery对象中的每个DOM元素。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; object.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="comment">// 在每个DOM元素上调用回调函数</span></span><br><span class="line">        <span class="comment">//这里的让回调函数中的this指向了dom元素。</span></span><br><span class="line">      callback.<span class="title function_">call</span>(object[i], args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> object; <span class="comment">//返回jQuery对象。</span></span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>在上面的代码中，通过<code>for</code>循环遍历<code>jQuery</code>对象中的每个<code>DOM</code>元素。然后执行回调函数<code>callback</code></p><p>在<code>jQuery</code>的原型对象上，添加<code>html</code>方法</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">html</span>: <span class="keyword">function</span> (<span class="params">val</span>) &#123;</span><br><span class="line">        jQuery.<span class="title function_">each</span>(</span><br><span class="line">          <span class="variable language_">this</span>, <span class="comment">//表示jQuery原型对象</span></span><br><span class="line">          <span class="keyword">function</span> (<span class="params">val</span>) &#123;</span><br><span class="line">              <span class="comment">//this表示的是dom元素，这里是div元素</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">innerHTML</span> = val;</span><br><span class="line">          &#125;,</span><br><span class="line">          val <span class="comment">//表示传递过来的`&lt;h2&gt;hello&lt;h2&gt;`</span></span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure><p>在<code>html</code>方法中完成对<code>jQuery.each</code>方法的调用。</p><p><code>window.onload</code>的方法修改成如下的形式：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// console.log($(&quot;div&quot;).length);</span></span><br><span class="line">    $(<span class="string">&quot;div&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot;&lt;h2&gt;hello&lt;h2&gt;&quot;</span>);</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h2 id="下面我们实现jQuery的扩展功能"><a href="#下面我们实现jQuery的扩展功能" class="headerlink" title="**下面我们实现jQuery的扩展功能"></a>**下面我们实现<code>jQuery</code>的扩展功能</h2><p>jQuery 提供了良好的扩展接口，方便用户自定义 jQuery 方法。根据设计习惯，如果为 jQuery 或者 jQuery.prototype 新增方法时，我们可以直接通过点语法来实现，例如上面我们扩展的<code>html</code>方法，或者在 jQuery.prototype 对象结构内增加。但是，如果分析 jQuery 源码，会发现它是通过 extend() 函数来实现功能扩展的。</p><p>通过<code>extend()</code>方法来实现扩展的好处是：方便用户快速的扩展<code>jQuery</code>功能，但不会破坏<code>jQuery</code>框架的结构。如果直接在<code>jQuery</code>源码中添加方法，这样就破坏了<code>Jquery</code>框架的结构，不方便后期的代码维护。</p><p>如果后期不需要某个功能，可以直接使用<code>Jquery</code>提供的方法删除，而不需要从源码中在对该功能进行删除。</p><p>extend() 函数的功能很简单，它只是把指定对象的方法复制给<code> jQuery</code> 对象或者 <code>jQuery.prototype</code>。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 给构造函数传递selector,context两个参数</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> $ = (jQuery = <span class="keyword">function</span> (<span class="params">selector, context</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="keyword">new</span> jQuery.<span class="property">fn</span>.<span class="title function_">init</span>(selector, context); <span class="comment">//调用原型中的`init方法`</span></span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      jQuery.<span class="property">fn</span> = jQuery.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">init</span>: <span class="keyword">function</span> (<span class="params">selector, context</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          selector = selector || <span class="variable language_">document</span>; <span class="comment">//初始化选择器，默认值为document</span></span></span><br><span class="line"><span class="language-javascript">          context = context || <span class="variable language_">document</span>; <span class="comment">// 初始化上下文对象，默认值为document</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (selector.<span class="property">nodeType</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 如果是DOM元素</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 把该DOM元素赋值给实例对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>[<span class="number">0</span>] = selector;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">length</span> = <span class="number">1</span>; <span class="comment">//表示包含了1个元素</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">context</span> = selector; <span class="comment">//重新设置上下文对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="variable language_">this</span>; <span class="comment">//返回当前实例</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (<span class="keyword">typeof</span> selector === <span class="string">&quot;string&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//如果选择器是一个字符串</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> e = context.<span class="title function_">getElementsByTagName</span>(selector); <span class="comment">// 获取指定名称的元素</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//通过for循环将所有元素存储到当前的实例中</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; e.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>[i] = e[i];</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">length</span> = e.<span class="property">length</span>; <span class="comment">//存储元素的个数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">context</span> = context; <span class="comment">//保存上下文对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="variable language_">this</span>; <span class="comment">//返回当前的实例</span></span></span><br><span class="line"><span class="language-javascript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">length</span> = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">context</span> = context;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="variable language_">this</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//   this.length = 0;</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//   console.log(&quot;init==&quot;, this);</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//   this._size = function () &#123;</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//     return this.length;</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//   &#125;;</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//   return this;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// html: function (val) &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//   jQuery.each(</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     this,</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     function (val) &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//       this.innerHTML = val;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     &#125;,</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     val</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//   );</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;,</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// version: &quot;6.1.1&quot;,</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// length: 1,</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// size: function () &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//   return this.length;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;,</span></span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      jQuery.<span class="property">fn</span>.<span class="property">init</span>.<span class="property"><span class="keyword">prototype</span></span> = jQuery.<span class="property">fn</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//提供each扩展方法</span></span></span><br><span class="line"><span class="language-javascript">      jQuery.<span class="property">each</span> = <span class="keyword">function</span> (<span class="params">object, callback, args</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//通过for循环的方式来遍历jQuery对象中的每个DOM元素。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; object.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 在每个DOM元素上调用回调函数</span></span></span><br><span class="line"><span class="language-javascript">          callback.<span class="title function_">call</span>(object[i], args);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> object; <span class="comment">//返回jQuery对象。</span></span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      jQuery.<span class="property">extend</span> = jQuery.<span class="property">fn</span>.<span class="property">extend</span> = <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> obj) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>[prop] = obj[prop];</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="variable language_">this</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      jQuery.<span class="property">fn</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">html</span>: <span class="keyword">function</span> (<span class="params">val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          jQuery.<span class="title function_">each</span>(</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> (<span class="params">val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.<span class="property">innerHTML</span> = val;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            val</span></span><br><span class="line"><span class="language-javascript">          );</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log($(&quot;div&quot;).length);</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;div&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot;&lt;h2&gt;hello&lt;h2&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   console.log($().version);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   console.log($()._size()); // 0</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   console.log($().size()); // 0</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   var jq = new $();</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   console.log(jq.version); // 6.1.1</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   console.log(jq.size());</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上面的代码中，我们为<code>jQuery</code>的原型对象添加了<code>extend</code>方法</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">jQuery.<span class="property">extend</span> = jQuery.<span class="property">fn</span>.<span class="property">extend</span> = <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> obj) &#123;</span><br><span class="line">     <span class="variable language_">this</span>[prop] = obj[prop];</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><p>把<code>obj</code>对象中的属性添加到<code>jQuery</code>原型对象上。</p><p>下面调用<code>extend</code>方法，同时设置<code>html</code>属性</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">jQuery.<span class="property">fn</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">      <span class="attr">html</span>: <span class="keyword">function</span> (<span class="params">val</span>) &#123;</span><br><span class="line">        jQuery.<span class="title function_">each</span>(</span><br><span class="line">          <span class="variable language_">this</span>,</span><br><span class="line">          <span class="keyword">function</span> (<span class="params">val</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">innerHTML</span> = val;</span><br><span class="line">          &#125;,</span><br><span class="line">          val</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>这样<code>jQuery</code>原型对象上就有了<code>html</code>方法。</p><p>而把原来的<code>html</code>方法的代码注释掉。</p><p>刷新浏览器，查看对应的效果。</p><p><strong>参数传递</strong></p><p>我们在使用<code>jquery</code>的方法的时候，需要进行参数的传递，而且一般都要求传递的参数都是对象。</p><p>使用对象作为参数进行传递的好处，就是方便参数的管理，例如参数个数不受限制。</p><p>如果使用对象作为参数进行传递，需要解决的问题：如何解决并提取参数，如何处理默认值等问题。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      // 给构造函数传递selector,context两个参数</span><br><span class="line">      var $ = (jQuery = function (selector, context) &#123;</span><br><span class="line">        return new jQuery.fn.init(selector, context); //调用原型中的`init方法`</span><br><span class="line">      &#125;);</span><br><span class="line">      jQuery.fn = jQuery.prototype = &#123;</span><br><span class="line">        init: function (selector, context) &#123;</span><br><span class="line">          selector = selector || document; //初始化选择器，默认值为document</span><br><span class="line">          context = context || document; // 初始化上下文对象，默认值为document</span><br><span class="line">          if (selector.nodeType) &#123;</span><br><span class="line">            // 如果是DOM元素</span><br><span class="line">            // 把该DOM元素赋值给实例对象</span><br><span class="line">            this[0] = selector;</span><br><span class="line">            this.length = 1; //表示包含了1个元素</span><br><span class="line">            this.context = selector; //重新设置上下文对象</span><br><span class="line">            return this; //返回当前实例</span><br><span class="line">          &#125;</span><br><span class="line">          if (typeof selector === &quot;string&quot;) &#123;</span><br><span class="line">            //如果选择器是一个字符串</span><br><span class="line">            var e = context.getElementsByTagName(selector); // 获取指定名称的元素</span><br><span class="line">            //通过for循环将所有元素存储到当前的实例中</span><br><span class="line">            for (var i = 0; i &lt; e.length; i++) &#123;</span><br><span class="line">              this[i] = e[i];</span><br><span class="line">            &#125;</span><br><span class="line">            this.length = e.length; //存储元素的个数</span><br><span class="line">            this.context = context; //保存上下文对象</span><br><span class="line">            return this; //返回当前的实例</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            this.length = 0;</span><br><span class="line">            this.context = context;</span><br><span class="line">            return this;</span><br><span class="line">          &#125;</span><br><span class="line">          //   this.length = 0;</span><br><span class="line">          //   console.log(&quot;init==&quot;, this);</span><br><span class="line">          //   this._size = function () &#123;</span><br><span class="line">          //     return this.length;</span><br><span class="line">          //   &#125;;</span><br><span class="line">          //   return this;</span><br><span class="line">        &#125;,</span><br><span class="line">        // html: function (val) &#123;</span><br><span class="line">        //   jQuery.each(</span><br><span class="line">        //     this,</span><br><span class="line">        //     function (val) &#123;</span><br><span class="line">        //       this.innerHTML = val;</span><br><span class="line">        //     &#125;,</span><br><span class="line">        //     val</span><br><span class="line">        //   );</span><br><span class="line">        // &#125;,</span><br><span class="line"></span><br><span class="line">        // version: &quot;6.1.1&quot;,</span><br><span class="line">        // length: 1,</span><br><span class="line">        // size: function () &#123;</span><br><span class="line">        //   return this.length;</span><br><span class="line">        // &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line">      jQuery.fn.init.prototype = jQuery.fn;</span><br><span class="line"></span><br><span class="line">      //提供each扩展方法</span><br><span class="line">      jQuery.each = function (object, callback, args) &#123;</span><br><span class="line">        console.log(&quot;args=&quot;, args);</span><br><span class="line">        //通过for循环的方式来遍历jQuery对象中的每个DOM元素。</span><br><span class="line">        for (var i = 0; i &lt; object.length; i++) &#123;</span><br><span class="line">          // 在每个DOM元素上调用回调函数</span><br><span class="line">          callback.call(object[i], args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return object; //返回jQuery对象。</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      // jQuery.extend = jQuery.fn.extend = function (obj) &#123;</span><br><span class="line">      //   for (var prop in obj) &#123;</span><br><span class="line">      //     this[prop] = obj[prop];</span><br><span class="line">      //   &#125;</span><br><span class="line">      //   return this;</span><br><span class="line">      // &#125;;</span><br><span class="line">      jQuery.extend = jQuery.fn.extend = function () &#123;</span><br><span class="line">        var destination = arguments[0],</span><br><span class="line">          source = arguments[1];</span><br><span class="line">        //如果存在两个参数，并且都是对象</span><br><span class="line">        if (typeof destination === &quot;object&quot; &amp;&amp; typeof source === &quot;object&quot;) &#123;</span><br><span class="line">          //把第二个对象合并到第一个参数对象中，并返回合并后的对象</span><br><span class="line">          for (var property in source) &#123;</span><br><span class="line">            destination[property] = source[property];</span><br><span class="line">          &#125;</span><br><span class="line">          return destination;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          for (var prop in destination) &#123;</span><br><span class="line">            this[prop] = destination[prop];</span><br><span class="line">          &#125;</span><br><span class="line">          return this;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      jQuery.fn.extend(&#123;</span><br><span class="line">        html: function (val) &#123;</span><br><span class="line">          jQuery.each(</span><br><span class="line">            this,</span><br><span class="line">            function (val) &#123;</span><br><span class="line">              this.innerHTML = val;</span><br><span class="line">            &#125;,</span><br><span class="line">            val</span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">      jQuery.fn.extend(&#123;</span><br><span class="line">        fontStyle: function (obj) &#123;</span><br><span class="line">          var defaults = &#123;</span><br><span class="line">            color: &quot;#ccc&quot;,</span><br><span class="line">            size: &quot;16px&quot;,</span><br><span class="line">          &#125;;</span><br><span class="line">          //如果有参数，会覆盖掉默认的参数</span><br><span class="line">          defaults = jQuery.extend(defaults, obj || &#123;&#125;);</span><br><span class="line">          //为每个DOM元素执设置样式.</span><br><span class="line">          jQuery.each(this, function () &#123;</span><br><span class="line">            this.style.color = defaults.color;</span><br><span class="line">            this.style.fontSize = defaults.size;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">      window.onload = function () &#123;</span><br><span class="line">        // console.log($(&quot;div&quot;).length);</span><br><span class="line">        $(&quot;div&quot;).html(&quot;&lt;h2&gt;hello&lt;h2&gt;&quot;);</span><br><span class="line">        $(&quot;p&quot;).fontStyle(&#123;</span><br><span class="line">          color: &quot;red&quot;,</span><br><span class="line">          size: &quot;30px&quot;,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;;</span><br><span class="line">      //   console.log($().version);</span><br><span class="line">      //   console.log($()._size()); // 0</span><br><span class="line">      //   console.log($().size()); // 0</span><br><span class="line">      //   var jq = new $();</span><br><span class="line">      //   console.log(jq.version); // 6.1.1</span><br><span class="line">      //   console.log(jq.size());</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    &lt;p&gt;学习前端&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;学习前端&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上面的代码中，重新改造<code>extend</code>方法。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">jQuery.<span class="property">extend</span> = jQuery.<span class="property">fn</span>.<span class="property">extend</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">var</span> destination = <span class="variable language_">arguments</span>[<span class="number">0</span>],</span><br><span class="line">     source = <span class="variable language_">arguments</span>[<span class="number">1</span>];</span><br><span class="line">   <span class="comment">//如果存在两个参数，并且都是对象</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">typeof</span> destination === <span class="string">&quot;object&quot;</span> &amp;&amp; <span class="keyword">typeof</span> source === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">     <span class="comment">//把第二个对象合并到第一个参数对象中，并返回合并后的对象</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> property <span class="keyword">in</span> source) &#123;</span><br><span class="line">       destination[property] = source[property];</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> destination;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> destination) &#123;</span><br><span class="line">       <span class="variable language_">this</span>[prop] = destination[prop];</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><p>在<code>extend</code>方法中，首先获取两个参数，然后判断这两个参数是否都是对象，如果都是对象，把第二个参数对象合并到第一个参数对象中，并返回合并后的对象。</p><p>否则，将第一个参数对象复制到<code>jquery</code>的原型对象上。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">jQuery.<span class="property">fn</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">   <span class="attr">fontStyle</span>: <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">     <span class="keyword">var</span> defaults = &#123;</span><br><span class="line">       <span class="attr">color</span>: <span class="string">&quot;#ccc&quot;</span>,</span><br><span class="line">       <span class="attr">size</span>: <span class="string">&quot;16px&quot;</span>,</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="comment">//如果有参数，会覆盖掉默认的参数</span></span><br><span class="line">     defaults = jQuery.<span class="title function_">extend</span>(defaults, obj || &#123;&#125;);</span><br><span class="line">       <span class="comment">// console.log(&quot;this==&quot;, this);//init &#123;0: p, 1: p, length: 2, context: document&#125;</span></span><br><span class="line">     <span class="comment">//为每个DOM元素执设置样式.</span></span><br><span class="line">     jQuery.<span class="title function_">each</span>(<span class="variable language_">this</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="comment">//这里的this表示的是p标签，因为在each方法内部通过call改变了this指向，让this指向了每个遍历得到的p元素</span></span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">color</span> = defaults.<span class="property">color</span>;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">fontSize</span> = defaults.<span class="property">size</span>;</span><br><span class="line">     &#125;);</span><br><span class="line">   &#125;,</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><p>在上面的代码中， 调用了<code>extend</code>方法，然后传递了<code>fontStyle</code>,这个<code>fontStyle</code>可以用来设置文本的颜色与字体大小。</p><p>当我们第一次调用<code>extend</code>方法的时候，只是传递了<code>fontStyle</code>这个对象，这时，会将该对象添加到<code>jQuery</code>原型对象上。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       <span class="comment">// console.log($(&quot;div&quot;).length);</span></span><br><span class="line">       $(<span class="string">&quot;div&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot;&lt;h2&gt;hello&lt;h2&gt;&quot;</span>);</span><br><span class="line">       $(<span class="string">&quot;p&quot;</span>).<span class="title function_">fontStyle</span>(&#123;</span><br><span class="line">         <span class="attr">color</span>: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">         <span class="attr">size</span>: <span class="string">&quot;30px&quot;</span>,</span><br><span class="line">       &#125;);</span><br><span class="line">     &#125;;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>学习前端<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>学习前端<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>在<code>onload</code>事件中，调用<code>fontStyle</code>方法，并且传递了一个对象，这时在<code>fontStyle</code>方法的内部，首先会创建一个<code>defaults</code>默认的对象，然后再次调用<code>extend</code>方法，将传递的对象合并到默认对象上，当然完成了值的覆盖。</p><p>下面调用<code>each</code>方法，在<code>each</code>方法中遍历每个元素，执行回调函数，并且改变<code>this</code>的指向。</p><p><strong>封装成独立的命名空间</strong></p><p>以上已经实现了一个简单的<code>jQuery</code>库，</p><p>但是这里还有一个问题，需要解决：当编写了大量的<code>javascript</code>代码以后，引入该<code>jquery</code>库就很容易出现代码冲突的问题，所以这里需要将<code>jquery</code>库的代码与其他的<code>javascript</code>代码进行隔离，这里使用闭包。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      (function (window) &#123;</span><br><span class="line">        // 给构造函数传递selector,context两个参数</span><br><span class="line">        var $ = (jQuery = function (selector, context) &#123;</span><br><span class="line">          return new jQuery.fn.init(selector, context); //调用原型中的`init方法`</span><br><span class="line">        &#125;);</span><br><span class="line">        jQuery.fn = jQuery.prototype = &#123;</span><br><span class="line">          init: function (selector, context) &#123;</span><br><span class="line">            selector = selector || document; //初始化选择器，默认值为document</span><br><span class="line">            context = context || document; // 初始化上下文对象，默认值为document</span><br><span class="line">            if (selector.nodeType) &#123;</span><br><span class="line">              // 如果是DOM元素</span><br><span class="line">              // 把该DOM元素赋值给实例对象</span><br><span class="line">              this[0] = selector;</span><br><span class="line">              this.length = 1; //表示包含了1个元素</span><br><span class="line">              this.context = selector; //重新设置上下文对象</span><br><span class="line">              return this; //返回当前实例</span><br><span class="line">            &#125;</span><br><span class="line">            if (typeof selector === &quot;string&quot;) &#123;</span><br><span class="line">              //如果选择器是一个字符串</span><br><span class="line">              var e = context.getElementsByTagName(selector); // 获取指定名称的元素</span><br><span class="line">              //通过for循环将所有元素存储到当前的实例中</span><br><span class="line">              for (var i = 0; i &lt; e.length; i++) &#123;</span><br><span class="line">                this[i] = e[i];</span><br><span class="line">              &#125;</span><br><span class="line">              this.length = e.length; //存储元素的个数</span><br><span class="line">              this.context = context; //保存上下文对象</span><br><span class="line">              return this; //返回当前的实例</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">              this.length = 0;</span><br><span class="line">              this.context = context;</span><br><span class="line">              return this;</span><br><span class="line">            &#125;</span><br><span class="line">            //   this.length = 0;</span><br><span class="line">            //   console.log(&quot;init==&quot;, this);</span><br><span class="line">            //   this._size = function () &#123;</span><br><span class="line">            //     return this.length;</span><br><span class="line">            //   &#125;;</span><br><span class="line">            //   return this;</span><br><span class="line">          &#125;,</span><br><span class="line">          // html: function (val) &#123;</span><br><span class="line">          //   jQuery.each(</span><br><span class="line">          //     this,</span><br><span class="line">          //     function (val) &#123;</span><br><span class="line">          //       this.innerHTML = val;</span><br><span class="line">          //     &#125;,</span><br><span class="line">          //     val</span><br><span class="line">          //   );</span><br><span class="line">          // &#125;,</span><br><span class="line"></span><br><span class="line">          // version: &quot;6.1.1&quot;,</span><br><span class="line">          // length: 1,</span><br><span class="line">          // size: function () &#123;</span><br><span class="line">          //   return this.length;</span><br><span class="line">          // &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">        jQuery.fn.init.prototype = jQuery.fn;</span><br><span class="line"></span><br><span class="line">        //提供each扩展方法</span><br><span class="line">        jQuery.each = function (object, callback, args) &#123;</span><br><span class="line">          //通过for循环的方式来遍历jQuery对象中的每个DOM元素。</span><br><span class="line">          for (var i = 0; i &lt; object.length; i++) &#123;</span><br><span class="line">            // 在每个DOM元素上调用回调函数</span><br><span class="line">            callback.call(object[i], args);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          return object; //返回jQuery对象。</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        // jQuery.extend = jQuery.fn.extend = function (obj) &#123;</span><br><span class="line">        //   for (var prop in obj) &#123;</span><br><span class="line">        //     this[prop] = obj[prop];</span><br><span class="line">        //   &#125;</span><br><span class="line">        //   return this;</span><br><span class="line">        // &#125;;</span><br><span class="line">        jQuery.extend = jQuery.fn.extend = function () &#123;</span><br><span class="line">          var destination = arguments[0],</span><br><span class="line">            source = arguments[1];</span><br><span class="line">          //如果存在两个参数，并且都是对象</span><br><span class="line">          if (typeof destination === &quot;object&quot; &amp;&amp; typeof source === &quot;object&quot;) &#123;</span><br><span class="line">            //把第二个对象合并到第一个参数对象中，并返回合并后的对象</span><br><span class="line">            for (var property in source) &#123;</span><br><span class="line">              destination[property] = source[property];</span><br><span class="line">            &#125;</span><br><span class="line">            return destination;</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            for (var prop in destination) &#123;</span><br><span class="line">              this[prop] = destination[prop];</span><br><span class="line">            &#125;</span><br><span class="line">            return this;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        // 开发jqueyr</span><br><span class="line">        window.jQuery = window.$ = jQuery;</span><br><span class="line">      &#125;)(window);</span><br><span class="line"></span><br><span class="line">      jQuery.fn.extend(&#123;</span><br><span class="line">        html: function (val) &#123;</span><br><span class="line">          jQuery.each(</span><br><span class="line">            this,</span><br><span class="line">            function (val) &#123;</span><br><span class="line">              this.innerHTML = val;</span><br><span class="line">            &#125;,</span><br><span class="line">            val</span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">      jQuery.fn.extend(&#123;</span><br><span class="line">        fontStyle: function (obj) &#123;</span><br><span class="line">          var defaults = &#123;</span><br><span class="line">            color: &quot;#ccc&quot;,</span><br><span class="line">            size: &quot;16px&quot;,</span><br><span class="line">          &#125;;</span><br><span class="line">          //如果有参数，会覆盖掉默认的参数</span><br><span class="line">          defaults = jQuery.extend(defaults, obj || &#123;&#125;);</span><br><span class="line"></span><br><span class="line">          // console.log(&quot;this==&quot;, this);//init &#123;0: p, 1: p, length: 2, context: document&#125;</span><br><span class="line">          //为每个DOM元素执设置样式.</span><br><span class="line">          jQuery.each(this, function () &#123;</span><br><span class="line">            //这里的this表示的是p标签，因为在each方法内部通过call改变了this指向，让this指向了每个遍历得到的p元素</span><br><span class="line"></span><br><span class="line">            this.style.color = defaults.color;</span><br><span class="line">            this.style.fontSize = defaults.size;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">      window.onload = function () &#123;</span><br><span class="line">        // console.log($(&quot;div&quot;).length);</span><br><span class="line">        $(&quot;div&quot;).html(&quot;&lt;h2&gt;hello&lt;h2&gt;&quot;);</span><br><span class="line">        $(&quot;p&quot;).fontStyle(&#123;</span><br><span class="line">          color: &quot;red&quot;,</span><br><span class="line">          size: &quot;30px&quot;,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;;</span><br><span class="line">      //   console.log($().version);</span><br><span class="line">      //   console.log($()._size()); // 0</span><br><span class="line">      //   console.log($().size()); // 0</span><br><span class="line">      //   var jq = new $();</span><br><span class="line">      //   console.log(jq.version); // 6.1.1</span><br><span class="line">      //   console.log(jq.size());</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    &lt;p&gt;学习前端&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;学习前端&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上面的代码中，将<code>jQuery</code>库放在匿名函数中，然后进行自调用，并且传入<code>window</code>对象。</p><p>在上面所添加的代码中还要注意如下语句：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">jQuery</span> = <span class="variable language_">window</span>.<span class="property">$</span> = jQuery;</span><br></pre></td></tr></table></figure><p>以上语句的作用：把闭包中的私有变量<code>jQuery</code>传递给<code>window</code>对象的<code>jQuery</code>属性。这样就可以在全局作用域中通过<code>jQuery</code>变量来访问闭包体内的<code>jQuery</code>框架了。</p><p>以上就是我们模拟的<code>jQuery</code>库。</p><h1 id="五、DOM与事件"><a href="#五、DOM与事件" class="headerlink" title="五、DOM与事件"></a>五、DOM与事件</h1><h2 id="1、选择器"><a href="#1、选择器" class="headerlink" title="1、选择器"></a>1、选择器</h2><p><code>getElementById()</code>:通过<code>id</code>来查找对应的元素。</p><p><code>getElementsByClassName()</code>:通过类名来查找对应的元素，返回的是一个<code>HTMLCollection</code>对象。</p><p><code>getElementsByName()</code>:通过元素的<code>name</code>属性查找对应的元素，返回的是<code>NodeList</code>对象，它是一个类似于数组的结构。</p><p><code>getElementsByTagName()</code>: 通过标签的名称来查找对应的元素，返回的是<code>HTMLCollection</code>对象。</p><p><code>querySelector</code>：该选择器返回的是在基准元素下，选择器匹配到的元素集合中的第一个元素。该选择器的参数接收的是一个<code>css</code>选择</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h4</span>&gt;</span>标题内容<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">span</span>&gt;</span>span标签内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">       段落内容</span><br><span class="line">       <span class="tag">&lt;<span class="name">span</span>&gt;</span>段落中的第一个span标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">span</span>&gt;</span>段落中的第二个span标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;p span&quot;</span>).<span class="property">innerHTML</span>);<span class="comment">// 获取p标签中第一个span标签中的内容，所以输出结果为:段落中的第一个span标签</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;h4,span&quot;</span>).<span class="property">innerHTML</span>);<span class="comment">//获取第一个h4或者是span元素的内容：所以输出结果为：标题内容</span></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">var</span> ele = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;p&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">   <span class="variable language_">console</span>.<span class="title function_">log</span>(ele.<span class="title function_">querySelector</span>(<span class="string">&quot;div span&quot;</span>).<span class="property">innerHTML</span>);<span class="comment">//段落中的第一个span标签。</span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">// 首先先找到`p`元素，然后看一下p元素下面有没有div,我们发现没有，但是依然能够匹配到span元素。</span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//原因是：在匹配的过程中会优先找出最外层div元素下的span元素的集合，然后在判断span元素是否属于p元素的子元素，最后返回</span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//第一个匹配到的span元素的值。</span></span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面，把<code>HTML</code>文档的结构修改成如下的形式：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h4</span>&gt;</span>标题内容<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>span标签内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里增加了一个p标签--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>第一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        段落内容</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>段落中的第一个span标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>段落中的第二个span标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行如下代码会出现异常：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ele = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(ele.<span class="title function_">querySelector</span>(<span class="string">&quot;div span&quot;</span>).<span class="property">innerHTML</span>);<span class="comment">//Cannot read property &#x27;innerHTML&#x27; of null</span></span><br></pre></td></tr></table></figure><p>原因：会找到第一个<code>p</code>元素,然后看一下<code>p</code>标签中是否有<code>div</code>,发现没有，但是会找出最外层<code>div</code>下的所有<code>span</code>元素的集合，看一下<code>span</code>元素是否属于<code>p</code>元素，而第一个<code>p</code>元素中没有<code>span</code>元素，所以抛出异常。</p><p><code>querySelectorAll()</code>选择器：</p><p><code>querySelectorAll</code>选择器与<code>querySelector</code>选择器的区别是：<code>querySelectAll</code>选择器会获取到基准元素下匹配到所有子元素的集合。返回的是一个<code>NodeList</code>集合。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h4</span>&gt;</span>标题内容<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>span标签内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        段落内容</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>段落中的第一个span标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>段落中的第二个span标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;span&quot;</span>));<span class="comment">//返回所有的span标签。</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面，再来看一段代码：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;foo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取container下的所有div元素。</span></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">var</span> div1 = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;#container div&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div1);<span class="comment">// NodeList(3) [div.bar, div.foo, div.inner]</span></span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、HTMLCollection对象与NodeList对象区别"><a href="#2、HTMLCollection对象与NodeList对象区别" class="headerlink" title="2、HTMLCollection对象与NodeList对象区别"></a>2、HTMLCollection对象与NodeList对象区别</h2><p>在介绍前面的选择器的时候，它们返回的值有些是<code>HTMLCollection</code>对象，有些是<code>NodeList</code>对象，它们有什么区别？</p><p><code>HTMLCollection</code>对象具有<code>1ength</code>属性，返回集合的长度，可以通过<code>item()</code>和<code>namedItem()</code>函数来访问特定的元素。</p><p><code>item()</code>函数：通过序号索引值来获取特定的某个节点，超过索引则返回<code>null</code>.</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;foo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">var</span> main = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;container&quot;</span>).<span class="property">children</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(main); <span class="comment">//HTMLCollection</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(main.<span class="title function_">item</span>(<span class="number">0</span>)); <span class="comment">//输出:&lt;div class=&quot;bar&quot;&gt;&lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(main.<span class="title function_">item</span>(<span class="number">1</span>)); <span class="comment">// 输出:foo元素</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>namedItem()</code>函数：该函数用来返回一个节点，首先通过<code>id</code>属性去匹配，然后如果没有匹配到则使用<code>name</code>属性匹配，如果还没有匹配到则返回<code>null</code>. 当出现重复的<code>id</code>或者<code>name</code>属性时，只返回匹配到的第一个值。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userName&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userPwd&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">var</span> form1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;form1&quot;</span>).<span class="property">children</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(form1.<span class="title function_">namedItem</span>(<span class="string">&quot;userPwd&quot;</span>));<span class="comment">//   &lt;input type=&quot;password&quot; id=&quot;password&quot; name=&quot;userPwd&quot; /&gt;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>NodeList</code>对象也具有<code>length</code>属性，返回集合的长度，同样也有<code>item</code>函数，也是通过索引定位子元素的位置。但是<code>NodeList</code>对象没有<code>namedItem</code>方法。</p><p><code>HTMLCollection</code>对象与<code>NodeList</code>对象都是类似数组的结构，如果想调用数组中的方法，需要通过<code>call()</code>函数或者是<code>apply()</code>函数，转换为真正的数组后，可以使用数组中的函数。</p><p>同时，当我们对<code>DOM</code>树新增或者是删除一个节点的时候，都会立即的放映在<code>HTMLCollection</code>对象与<code>NodeList</code>对象中。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userName&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userPwd&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="comment">//获取HTMLCollection集合</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> form1Children = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;form1&quot;</span>).<span class="property">children</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取form元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> form1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;form1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(form1Children.<span class="property">length</span>); <span class="comment">// 2 HTMLCollection中有两个子元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;input&quot;</span>); <span class="comment">//创建input元素</span></span></span><br><span class="line"><span class="language-javascript">    form1.<span class="title function_">appendChild</span>(input); <span class="comment">// 把创建的input元素添加到form元素中</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(form1Children.<span class="property">length</span>); <span class="comment">// 3 可以看到HTMLCollection立即受到了影响</span></span></span><br></pre></td></tr></table></figure><p>最后，总结一下<code>HTMLCollection</code>对象与<code>NodeList</code>对象的相同点与不同点</p><p>相同点：</p><p>第一：都是类似数组的结构，有<code>length</code>属性，可以通过<code>call()</code>函数或者是<code>apply()</code>函数转换成数组，使用数组中的函数。</p><p>第二：都用<code>item</code>函数，通过索引值获取相应的元素。</p><p>第三：都是实时的，当在<code>DOM</code>树上添加元素或者是删除元素，都会立即反应到<code>HTMLCollection</code>对象和<code>NodeList</code>对象上。</p><p>不同点：</p><p>第一：<code>HTMLCollection</code>对象中，有<code>namedItem()</code>函数，而<code>NodeList</code>对象中没有.</p><p>第二：<code>NodeList</code>对象中存储的是元素节点的集合，包括元素，以及节点，例如<code>text</code>文本节点，而<code>HTMLCollection</code>对象中只包含了元素的集合。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form1&quot;</span>&gt;</span></span><br><span class="line">      用户名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userName&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      用户密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userPwd&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="comment">//获取HTMLCollection集合</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> form1Children = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;form1&quot;</span>).<span class="property">children</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(form1Children);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//获取NodeList对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> formNodes = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;form1&quot;</span>).<span class="property">childNodes</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(formNodes);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过查看浏览器控制台输出的结果，可以看出<code>HTMLCollection</code>对象与<code>NodeList</code>对象的区别。</p><h2 id="3、常见的DOM操作有哪些？"><a href="#3、常见的DOM操作有哪些？" class="headerlink" title="3、常见的DOM操作有哪些？"></a>3、常见的DOM操作有哪些？</h2><p><strong>添加节点</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form1&quot;</span>&gt;</span></span><br><span class="line">      用户名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userName&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      用户密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userPwd&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> form1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;form1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//创建一个input元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> newInput = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;input&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//创建属性</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> newAttr = <span class="variable language_">document</span>.<span class="title function_">createAttribute</span>(<span class="string">&quot;type&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    newAttr.<span class="property">value</span> = <span class="string">&quot;password&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//将属性绑定到元素上</span></span></span><br><span class="line"><span class="language-javascript">    newInput.<span class="title function_">setAttributeNode</span>(newAttr);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//创建一个文本节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> newTextNode = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;用户密码&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    form1.<span class="title function_">appendChild</span>(newTextNode); <span class="comment">//添加文本节点</span></span></span><br><span class="line"><span class="language-javascript">    form1.<span class="title function_">appendChild</span>(newInput);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>删除节点</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form1&quot;</span>&gt;</span></span><br><span class="line">      用户名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userName&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      用户密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userPwd&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> form1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;form1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> nodeChilds = form1.<span class="property">childNodes</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(nodeChilds);</span></span><br><span class="line"><span class="language-javascript">    form1.<span class="title function_">removeChild</span>(nodeChilds[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">    form1.<span class="title function_">removeChild</span>(nodeChilds[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，我们想将表单中的<code>用户名</code>这一项内容删除掉。</p><p>首先获取<code>form</code>表单，然后在获取对应的子元素。</p><p>通过执行<code>removeChild</code>方法删除第一个元素，而第一个元素是<code>用户名</code>这个文本字符串，</p><p>下面还要删除文本框，所以再次调用了<code>removeChild</code>函数，注意由于前面已经删除了<code>用户名</code>这个文本元素了，所以文本框成为了第一个元素，所以这里写到索引值也是0.</p><p><strong>删除文本框的<code>id</code>属性</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form1&quot;</span>&gt;</span></span><br><span class="line">      用户名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userName&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      用户密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userPwd&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#userName&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    input.<span class="title function_">removeAttribute</span>(<span class="string">&quot;id&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <strong>修改节点</strong></p><p><strong>修改元素节点</strong></p><p>修改元素的节点的操作，一般是直接用新的节点替换旧的节点。关于节点的替换可以使用，<code>replaceChild</code>函数来实现，该函数的调用是通过父元素来调用的，例如：把<code>div1</code>中的内容替换掉，这里就需要通过<code>container.replaceChild</code>方法来完成，<code>replaceChild</code>方法需要两个参数，第一个参数表示的是新元素，第二个参数表示的是旧元素。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> container = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;container&quot;</span>); <span class="comment">//获取父元素container</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> div1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div1&quot;</span>); <span class="comment">//获取子元素</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> newDiv = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>); <span class="comment">// 创建一个新的div元素</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> newText = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;nihao&quot;</span>); <span class="comment">//创建一个文本内容</span></span></span><br><span class="line"><span class="language-javascript">      newDiv.<span class="title function_">appendChild</span>(newText); <span class="comment">//把创建的文本内容添加到新的div中</span></span></span><br><span class="line"><span class="language-javascript">      container.<span class="title function_">replaceChild</span>(newDiv, div1); <span class="comment">//用新的div替换旧的div,完成节点的修改操作。</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>修改属性节点</strong></p><p>修改属性的节点，我们可以通过<code>setAttribute()</code>函数来完成，如果想获取属性节点可以通过<code>getAttribute()</code>函数来完成。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">var</span> div1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      div1.<span class="title function_">setAttribute</span>(<span class="string">&quot;style&quot;</span>, <span class="string">&quot;color:blue&quot;</span>); <span class="comment">//设置style属性</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(div1.<span class="title function_">getAttribute</span>(<span class="string">&quot;style&quot;</span>)); <span class="comment">// 获取style属性的值</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改属性节点除了通过<code>setAttribute()</code>方法完成以外，还可以通过属性名直接进行修改</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">var</span> div1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      div1.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;blue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是通过这种方式进行修改，还需要注意一个问题：直接修改的属性名与元素节点中的属性名不一定是一致的。例如<code>class</code>这个属性，在<code>javascript</code>中是关键字，不能直接作为属性使用，这时需要通过<code>className</code>来完成。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;foo&quot;</span>&gt;</span>前端学习<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> div2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div2&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      div2.<span class="property">className</span> = <span class="string">&quot;bar&quot;</span>; <span class="comment">//注意这里使用的是className</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过查看浏览器控制台，可以看到对应的样式发生了修改。</p><p><strong>修改文本节点</strong></p><p>文本节点的修改，可以通过<code>innerHTML</code>属性来完成。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;foo&quot;</span>&gt;</span>前端学习<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> div2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div2&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      div2.<span class="property">innerHTML</span> = <span class="string">&quot;Vue 学习&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">&lt;/script?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4、DOM性能问题"><a href="#4、DOM性能问题" class="headerlink" title="4、DOM性能问题"></a>4、DOM性能问题</h2><p><code>Dom</code>操作非常消耗性能，应该尽量避免频繁的操作<code>DOM</code>.</p><p>导致浏览器重绘，重新渲染，比较消耗<code>cpu</code>资源，比较消耗性能。</p><p>提升性能的方案：</p><p>第一：对<code>DOM</code>查询操作进行缓存</p><p>第二：将频繁操作修改为一次性操作</p><p>首先看第一种情况：</p><p>这里需要对页面中所有<code>p</code>标签内文字调整大小(单击按钮完成)</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不缓存的结果</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;p&quot;</span>).<span class="property">length</span>; i++) &#123;</span><br><span class="line">       <span class="comment">//每次循环，都会计算lenght,频繁进行DOM查询</span></span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pList = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">     <span class="keyword">const</span> length = pList.<span class="property">length</span>;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">       <span class="comment">//缓存length,只进行一次DOM查询</span></span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>下面看一下第二种情况：</p><p>需求：页面中有一个<code>ul</code>列表，需要单击按钮一次性插入10个或者100个<code>li</code>?</p><p>传统的做法：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> listNode = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">        li.<span class="property">innerHTML</span> = <span class="string">`item<span class="subst">$&#123;i&#125;</span>`</span>;</span><br><span class="line">        list.<span class="title function_">appendChild</span>(li);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>执行上面的代码，可以实现对应的需求，但是问题是上面的操作是频繁操作<code>dom</code>，性能比较低。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> listNode = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">      <span class="comment">//创建一个文档片段，文档片段存在于内存中，并不在DOM树中，所以此时还没有插入到DOM中</span></span><br><span class="line">      <span class="comment">//也就是先将dom插入到临时区域中</span></span><br><span class="line">      <span class="keyword">const</span> frag = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span><br><span class="line">      <span class="comment">//执行插入</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">        li.<span class="property">innerHTML</span> = <span class="string">`item<span class="subst">$&#123;i&#125;</span>`</span>;</span><br><span class="line">        frag.<span class="title function_">appendChild</span>(li);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//都完成后，再插入到DOM树中</span></span><br><span class="line">      listNode.<span class="title function_">appendChild</span>(frag);</span><br></pre></td></tr></table></figure><h2 id="5、什么是事件传播"><a href="#5、什么是事件传播" class="headerlink" title="5、什么是事件传播"></a>5、什么是事件传播</h2><p>在浏览器中，<code>JavaScript</code>和<code>HTML</code>之间的交互是通过事件实现的，常用的事件包括了鼠标点击的事件，鼠标移动事件等等。</p><p>当事件发生以后，会触发绑定在元素上的事件处理程序，执行相应的操作。</p><p>问题是当事件发生后，事件是怎样传播的呢？</p><p>事件发生后会在目标节点和根节点之间按照特定的顺序进行传播，路径经过的节点都会接收到事件。</p><p>这里的特定顺序是怎样的顺序呢？</p><p>第一种：事件传递的顺序是先触发最外层的元素，然后依次向内传播，这样的传递顺序我们称之为事件的捕获阶段。</p><p>第二种：事件传递的顺序是先触发最内层的元素，然后依次向外进行传播，这样的传递顺序我们称之为事件冒泡阶段。</p><p>当然，一个完整的事件传播包含了三个阶段</p><p>首先就是事件的捕获阶段</p><p>然后是事件的目标阶段，目标阶段指的就是事件已经到达目标元素。</p><p>最后是事件的冒泡阶段</p><p>以上就是关于事件传播的描述</p><h2 id="6、什么是事件的捕获"><a href="#6、什么是事件的捕获" class="headerlink" title="6、什么是事件的捕获"></a>6、什么是事件的捕获</h2><p>关于事件捕获，在上一小节，我们已经介绍过：事件的传递是从最外层开始，依次向内传播，在捕获阶段，事件从<code>window</code>开始，一直到触发事件的元素。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window----&gt; document----&gt; html----&gt; body ----&gt;目标元素</span><br></pre></td></tr></table></figure><p>如下代码所示：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格内容<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> table = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;table&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> tbody = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;tbody&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> tr = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;tr&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> td = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;td&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      table.<span class="title function_">addEventListener</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;click&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;table&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">      );</span></span><br><span class="line"><span class="language-javascript">      tbody.<span class="title function_">addEventListener</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;click&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;tbody&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">      );</span></span><br><span class="line"><span class="language-javascript">      tr.<span class="title function_">addEventListener</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;click&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;tr&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">      );</span></span><br><span class="line"><span class="language-javascript">      td.<span class="title function_">addEventListener</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;click&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;td&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">      );</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，有一个表格，给表格中的每个元素通过<code>addEventListener</code>方法绑定了单击事件，同时该方法的第三个参数，设置为了<code>true</code>,这样就表明事件将在捕获阶段发生。</p><p>所以当我们单击<code>td</code>单元格的时候，事件的执行结果是：<code>table</code>,<code>tbody</code>,<code>tr</code>,<code>td</code>.也就是说事件从<code>table</code>开始，依次向下传播。这个传播的过程就是事件捕获。</p><h2 id="7、什么是事件冒泡"><a href="#7、什么是事件冒泡" class="headerlink" title="7、什么是事件冒泡"></a>7、什么是事件冒泡</h2><p>关于事件的冒泡，在前面也已经提到过：事件传递的顺序是先触发最内层的元素，然后依次向外进行传播，这样的传递顺序我们称之为事件冒泡阶段。</p><p>如下代码所示：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格内容<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> table = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;table&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> tbody = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;tbody&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> tr = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;tr&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> td = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;td&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      table.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;table&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      tbody.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;tbody&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      tr.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;tr&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      td.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;td&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的代码，我们将<code>addEventListener</code>方法的第三个参数<code>true</code>去掉了，这时就有事件的捕获变成了事件的冒泡。默认值为(<code>false</code>).</p><p>但单击单元格的时候，执行的结果为：<code>td</code>,<code>tr</code>,<code>tbody</code>,<code>table</code>, 这个过程就是事件的冒泡。</p><h2 id="8、阻止事件冒泡"><a href="#8、阻止事件冒泡" class="headerlink" title="8、阻止事件冒泡"></a>8、阻止事件冒泡</h2><p>现在，我们已经了解了事件冒泡的过程，但是在很多的情况下，我们需要阻止事件冒泡的发生。</p><p>例如：在上一小节的案例中，当我们单击了单元格后，不仅触发单元格元素的事件，同时也会触发其它元素的事件，而这里我们只希望触发单元格的事件。所以这里需要阻止事件的冒泡。</p><p>阻止事件的冒泡需要使用：<code>event.stopPropagation()</code>函数</p><p>如下案例：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> table = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;table&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> tbody = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;tbody&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> tr = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;tr&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> td = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;td&quot;</span>);</span><br><span class="line">    table.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;table&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    tbody.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;tbody&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    tr.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;tr&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    td.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">      <span class="comment">//阻止了事件的冒泡操作</span></span><br><span class="line">      event.<span class="title function_">stopPropagation</span>();</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;td&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在单元格的事件处理函数中，通过<code>event.stopPropagation()</code>方法阻止了事件的冒泡。</p><p>与<code>stopPropagation()</code>函数相对的还有一个<code>stopImmediatePropagation</code>函数，它们两者之间有什么区别呢？</p><p><code>stopPropagation()</code>：函数会阻止事件冒泡，其它事件处理程序仍然可以调用</p><p><code>stopImmediatePropagation</code>函数不仅可以阻止事件冒泡，也会阻止其它事件处理程序的调用。</p><p>如下代码所示：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格内容<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">var</span> table = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;table&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">var</span> tbody = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;tbody&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">var</span> tr = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;tr&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">var</span> td = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;td&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">     table.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;table&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">     &#125;);</span></span><br><span class="line"><span class="language-javascript">     tbody.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;tbody&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">     &#125;);</span></span><br><span class="line"><span class="language-javascript">     tr.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;tr&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">     &#125;);</span></span><br><span class="line"><span class="language-javascript">       <span class="comment">//单元格第一个单击事件</span></span></span><br><span class="line"><span class="language-javascript">     td.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;td1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">     &#125;);</span></span><br><span class="line"><span class="language-javascript">       <span class="comment">//单元格第二个单击事件</span></span></span><br><span class="line"><span class="language-javascript">     td.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="comment">//阻止了事件的冒泡操作</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// event.stopImmediatePropagation();</span></span></span><br><span class="line"><span class="language-javascript">        event.<span class="title function_">stopPropagation</span>();</span></span><br><span class="line"><span class="language-javascript">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;td2&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">     &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   单元格第三个单击事件</span></span></span><br><span class="line"><span class="language-javascript">     td.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;td3&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">     &#125;);</span></span><br><span class="line"><span class="language-javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，给单元格添加了三个单击的事件，同时第二个单击事件使用了<code>stopPropagation</code>方法来阻止冒泡行为。</p><p>执行结果如下：<code>td1</code>,<code>td2</code>,<code>td3</code></p><p>通过执行结果，可以看到单元格的三个单击事件全部触发，并且阻止了冒泡的行为。</p><p>如果使用<code>stopImmediatePropagation</code>方法，执行结果为：<code>td1</code>,<code>td2</code></p><p>通过执行的结果可以看到，阻止了冒泡的行为，但是没有触发单元格的第三个单击的事件，也就是说会阻止其它事件的执行。</p><h2 id="9、事件冒泡与事件捕获问题"><a href="#9、事件冒泡与事件捕获问题" class="headerlink" title="9、事件冒泡与事件捕获问题"></a>9、事件冒泡与事件捕获问题</h2><p>下面我们来看一段代码：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格内容<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> table = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;table&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> tbody = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;tbody&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> tr = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;tr&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> td = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;td&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//事件捕获</span></span></span><br><span class="line"><span class="language-javascript">      table.<span class="title function_">addEventListener</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;click&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;table&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">      );</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//事件冒泡</span></span></span><br><span class="line"><span class="language-javascript">      tbody.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;tbody&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//事件捕获</span></span></span><br><span class="line"><span class="language-javascript">      tr.<span class="title function_">addEventListener</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;click&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;tr&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">      );</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//事件冒泡</span></span></span><br><span class="line"><span class="language-javascript">      td.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;td&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，既有事件捕获又有事件冒泡，那么执行的结果是怎样的呢？</p><p>当单击<code>td</code>单元格后</p><p>执行结果：<code>table</code>,<code>tr</code>,<code>td</code>,<code>tbody</code></p><p>分析：前面我们讲解过，事件传播的循序是：先事件捕获阶段，然后事件的目标阶段，最后是事件冒泡阶段</p><p>所以说，在一个程序中有事件的捕获阶段，又有事件的冒泡阶段，会优先执行捕获阶段的事件。</p><p>所以上面代码整个执行的流程：</p><p>先执行<code>table</code>这个捕获阶段，输出<code>table</code>这个字符串</p><p>下面执行<code>tbody</code>，但是<code>tbody</code>绑定的是冒泡类的事件，所以不执行，跳过。</p><p>下面是<code>tr</code>,而<code>tr</code>是捕获类型的事件，所以会执行，输出字符串<code>tr</code></p><p>下面是<code>td</code>,由于我们单击的是<code>td</code>元素，所以该元素就是事件目标元素，则会执行，输出<code>td</code>字符串。</p><p>当单击了<code>td</code>元素以后，就开始进入了事件冒泡阶段。这时会冒泡到<code>tr</code>元素，但是<code>tr</code>元素绑定的是捕获阶段的事件，所以不执行，直接跳过，下面继续冒泡到了<code>tbody</code>元素，该元素绑定的是冒泡类型的事件，所以执行，输出字符串<code>tbody</code>.</p><p>下面继续冒泡，执行到<code>table</code>元素，该原生是捕获类型的事件，所以直接跳过，没有输出。</p><h2 id="10、Event对象使用"><a href="#10、Event对象使用" class="headerlink" title="10、Event对象使用"></a>10、Event对象使用</h2><p>在<code>JavaScrip</code>中，每触发一个事件，就会产生一个<code>Event</code>对象，在该对象中包含了所有与事件相关的内容，包括事件的元素，事件类型等。</p><p>当给某个元素绑定了事件处理程序后，就可以获取到<code>Event</code>对象，但是在不同的浏览器下，<code>Event</code>对象的实现还是有一定的差异的。</p><p>关于获取<code>Event</code>对象的方式有两种：</p><p>第一种：在事件的处理程序中，可以通过参数来获取<code>Event</code>对象。</p><p>第二种：在事件的处理程序中，可以通过<code>window.event</code>属性获取<code>Event</code>对象。</p><p>具体的示例代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>单击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="comment">//通过参数获取Event对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;event=&quot;</span>, event);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="comment">//通过window.event的方式来获取Event对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="keyword">var</span> windEvent = <span class="variable language_">window</span>.<span class="property">event</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;windEvent=&quot;</span>, windEvent);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="comment">//判断两种方式是否相等</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="variable language_">console</span>.<span class="title function_">log</span>(event === windEvent);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"> &lt;/body&gt;</span><br></pre></td></tr></table></figure><p>在谷歌浏览器中，测试上面的代码，可以发现两种获取<code>Event</code>对象的方式是相等的。</p><p>但是注意，在其它的浏览中进行测试可能会出现不相等的情况，也就是有的浏览器会出现不支持<code>window.event</code>这种方式来获取<code>Event</code>对象，这里可以自行进行测试。</p><p>为了能够在获取事件对象的时候，支持不同的浏览器，我们可以做兼容性的处理。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>单击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="keyword">var</span> eventFn = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="attr">event</span>: <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="keyword">return</span> e || <span class="variable language_">window</span>.<span class="property">event</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="comment">//通过参数获取Event对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;event=&quot;</span>, eventFn.<span class="title function_">event</span>(event));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="comment">//通过window.event的方式来获取Event对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="keyword">var</span> windEvent = eventFn.<span class="title function_">event</span>(<span class="variable language_">window</span>.<span class="property">event</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;windEvent=&quot;</span>, windEvent);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="comment">//判断两种方式是否相等</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="variable language_">console</span>.<span class="title function_">log</span>(event === windEvent);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>在上面的代码中定义了<code>eventFn</code>对象，在该对象中有一个属性<code>event</code>,在该属性中，判断返回<code>Eevent</code>对象的方式。</p><p>在对应的事件处理函数中，可以调用<code>eventFn</code>对象中的<code>event</code>方法来获取<code>Event</code>对象。</p><p><strong>获取事件的目标元素</strong></p><p>在事件的处理程序中，我们可能需要获取 事件的目标元素。</p><p>在<code>IE</code>浏览器中，可以使用<code>event</code>对象中的<code>srcElement</code>属性来获取事件的目标元素，在非<code>IE</code>浏览器中可以通过<code>event</code>对象的<code>target</code>属性来获取事件的目标元素，当然在有的非<code>IE</code>浏览器下也支持<code>event</code>对象中的<code>srcElement</code>属性，目的是为了保持与<code>ie</code>保持一致，但是要注意的是并不是所有的非<code>IE</code>浏览器都支持<code>srcElement</code>属性。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">     <span class="keyword">var</span> eventFn = &#123;</span><br><span class="line">        <span class="attr">event</span>: <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> e || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line">      btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> event = eventFn.<span class="title function_">event</span>(event);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;target=&quot;</span>, event.<span class="property">target</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;srcElement=&quot;</span>, event.<span class="property">srcElement</span>);</span><br><span class="line">      &#125;);</span><br><span class="line"> &lt;/script&gt;   </span><br></pre></td></tr></table></figure><p>在谷歌浏览器中进行测试，都可以获取<code>target</code>属性和<code>srcElement</code>属性的值。</p><p>关于其它浏览器的情况，可以自行测试。</p><p>当然为了能够兼容其它的浏览器，可以做一下兼容的处理。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> eventFn = &#123;</span><br><span class="line">     <span class="attr">event</span>: <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> e || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attr">target</span>: <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> e.<span class="property">target</span> || e.<span class="property">srcElement</span>;</span><br><span class="line">     &#125;,</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line">   btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">     <span class="keyword">var</span> event = eventFn.<span class="title function_">event</span>(event);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;target=&quot;</span>, eventFn.<span class="title function_">target</span>(event));</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;srcElement=&quot;</span>, eventFn.<span class="title function_">target</span>(event));</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><p>这里在<code>eventFn</code>对象中封装了一个<code>target</code>属性。</p><p><strong>阻止默认行为</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> <span class="attr">id</span>=<span class="string">&quot;a1&quot;</span>&gt;</span>链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> a1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;a1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      a1.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        event.<span class="title function_">preventDefault</span>(); <span class="comment">//阻止默认行为</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;你点击了链接&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br></pre></td></tr></table></figure><p>关于<code>Event</code>对象中的其他内容，可以参考文档。</p><h2 id="11、介绍一下三种事件模型"><a href="#11、介绍一下三种事件模型" class="headerlink" title="11、介绍一下三种事件模型"></a>11、介绍一下三种事件模型</h2><p>关于<code>JavaScript</code>的事件模型有三类，分别是<code>DOM0</code>，<code>DOM2</code>,<code>DOM3</code></p><p><strong>DOM0事件模型</strong></p><p><code>DOM0</code>的事件模型指的是：将一个函数赋值给一个事件处理属性。</p><p>如下代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btn=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>)</span><br><span class="line">btn.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br></pre></td></tr></table></figure><p>或者也可以采用如下的方式：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;fn()&quot;</span>&gt;</span></span><br><span class="line">    单击</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的是：<code>DOM0</code>事件模型的处理程序只支持冒泡阶段。</p><p><code>DOM0</code>事件模型的优点与缺点：</p><p>优点：实现起来非常简单，并且可以跨浏览器。</p><p>缺点：一个事件处理程序只能绑定一个函数。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;btnClick()&quot;</span>&gt;</span>单击按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">function</span> <span class="title function_">btnClick</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;123&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  &lt;/body&gt;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们给按钮使用两种方法绑定了事件处理程序，但是<code>DOM0</code>这种事件模型只能绑定一个函数，并且在<code>JavaScript</code>中绑定事件处理程序的优先级高于在<code>HTML</code>元素中定义的事件处理程序，所以打印结果为<code>hello</code>.</p><p>如果删除元素绑定的事件，只需要将对应的事件处理程序设置为<code>null</code>即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">btn.onclick=null</span><br></pre></td></tr></table></figure><p><strong>DOM2事件模型</strong></p><p>针对<code>DOM2</code>事件模型不同的浏览器厂商制定了不同的的实现方式，主要分为<code>IE</code>浏览器和<code>非IE浏览器</code></p><p>在<code>IE10</code>及以下版本中只支持事件的冒泡，在<code>IE11</code>中同时支持事件的捕获与事件冒泡。在<code>IE10</code>及以下版本中，可以通过<code>attachEvent</code>函数来添加事件处理程序，通过<code>detachEvent</code>函数删除事件处理程序。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">element.<span class="title function_">attachEvent</span>(<span class="string">&#x27;on&#x27;</span>+ eventName,handler) <span class="comment">// 添加事件处理程序</span></span><br><span class="line">element.<span class="title function_">detachEvent</span>(<span class="string">&#x27;on&#x27;</span>+ eventName,handler) <span class="comment">//  删除事件处理程序</span></span><br></pre></td></tr></table></figure><p>在<code>IE11</code>和非<code>IE</code>浏览器中，同时支持事件捕获和事件冒泡两个阶段，可以通过<code>addEventListener()</code>函数添加事件处理程序，可以通过<code>removeEventListener()</code> 函数删除事件处理程序。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">addEventListener</span>(eventName,handler,useCapture) <span class="comment">//添加事件处理程序</span></span><br><span class="line"><span class="title function_">removeEventListener</span>(eventName,handler,useCapture) <span class="comment">// 删除事件处理程序</span></span><br></pre></td></tr></table></figure><p>其中<code>useCapture</code>如果为<code>true</code>表示支持事件捕获，为<code>false</code>b表示支持事件冒泡，默认是为<code>false</code></p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7%E4%B8%8E%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1.png"></p><p>通过上面的介绍，我们知道了<code>DOM2</code>的事件处理程序存在两种情况，那这两种实现的方式之间有没有相同点和不同点呢？</p><p><strong>相同点</strong></p><p>第一：在<code>DOM2</code>的事件处理中不管是<code>IE</code>浏览器还是非<code>IE</code>浏览器都支持对同一个事件绑定多个处理函数。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>单击按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">     btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">     &#125;);</span></span><br><span class="line"><span class="language-javascript">     btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;nihao&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">     &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上程序的输出结果为：<code>hello</code>,<code>nihao</code></p><p>第二：在需要删除绑定的事件的时候，，不能删除匿名函数，因为添加的函数和删除的函数必须是同一个函数。</p><p>下面的代码中，同时绑定和删除了<code>handler</code>函数，这样做是完全可以的。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btn=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> handle=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,handle,<span class="literal">false</span>);</span><br><span class="line">btn.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>,handle)</span><br></pre></td></tr></table></figure><p>但是如果采用如下的删除方式是无法取消绑定的事件的。因为它们都是匿名函数，而并不是同一个函数。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br><span class="line">btn.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)</span><br></pre></td></tr></table></figure><p> <strong>不同点</strong></p><p>第一：在<code>IE</code>浏览器中，使用<code>attachEvent</code>函数为同一个事件添加多个处理程序时，会按照添加的相反顺序执行。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">     <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line">      btn.<span class="title function_">attachEvent</span>(<span class="string">&quot;onclick&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">      btn.<span class="title function_">attachEvent</span>(<span class="string">&quot;onclick&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;nihao&quot;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line"> &lt;/script&gt;   </span><br></pre></td></tr></table></figure><p>当单击按钮的时候，先输出<code>nihao</code>,再输出<code>hello</code>.</p><p>第二：在<code>IE</code>浏览中，<code>attachEvent</code>函数添加的事件处理程序会在全局作用域中运行，因此<code>this</code>指向的是<code>window</code>.</p><p>在非<code>IE</code>浏览器中，<code>addEventListener()</code>函数添加的处理程序在指定的元素内部执行，<code>this</code>指向所绑定的元素。</p><p>既然<code>DOM2</code>事件的处理有浏览器的兼容性问题，那应该怎样进行处理呢？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">EventHandler</span> = &#123;</span><br><span class="line">       <span class="attr">addEventHandler</span>: <span class="keyword">function</span> (<span class="params">ele, type, handler</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (ele.<span class="property">addEventListener</span>) &#123;</span><br><span class="line">           ele.<span class="title function_">addEventListener</span>(type, handler);</span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ele.<span class="property">attachEvent</span>) &#123;</span><br><span class="line">           ele.<span class="title function_">attachEvent</span>(<span class="string">&quot;on&quot;</span> + type, handler);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           ele[<span class="string">&quot;on&quot;</span> + type] = handler;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="attr">removeEventHandler</span>: <span class="keyword">function</span> (<span class="params">ele, type, handler</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (ele.<span class="property">addEventListener</span>) &#123;</span><br><span class="line">           ele.<span class="title function_">removeEventHandler</span>(type, handler);</span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ele.<span class="property">detachEvent</span>) &#123;</span><br><span class="line">           ele.<span class="title function_">detachEvent</span>(<span class="string">&quot;on&quot;</span> + type, handler);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           ele[<span class="string">&quot;on&quot;</span> + type] = <span class="literal">null</span>;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">     &#125;;</span><br></pre></td></tr></table></figure><p><strong>DOM3事件模型</strong></p><p><code>DOM3</code>事件模型中允许自定义事件，自定义事件有<code>createEvent(&quot;CustomEvent&quot;)</code>函数来完成。返回的对象有一个<code>initCustomEvent</code>（）方法接收如下四个参数。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1）type：字符串，触发的事件类型，自定义。例如 “keyDown”，“selectedChange”;</span><br><span class="line">　　2）bubble（布尔值）：标示事件是否应该冒泡；</span><br><span class="line">　　3）cancelable(布尔值)：标示事件是否可以取消；</span><br><span class="line">　　4）detail（对象）：任意值，保存在event对象的detail属性中；</span><br></pre></td></tr></table></figure><p>具体的示例代码如下</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>监听自定义事件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>单击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">var</span> customeEvent;</span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//在立即执行函数中创建自定义事件</span></span></span><br><span class="line"><span class="language-javascript">     (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="comment">//判断浏览器是否支持DOM3事件处理程序，如果条件成立表示支持,固定写法</span></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">implementation</span>.<span class="title function_">hasFeature</span>(<span class="string">&quot;CustomEvents&quot;</span>, <span class="string">&quot;3.0&quot;</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="keyword">var</span> user = &#123; <span class="attr">userName</span>: <span class="string">&quot;zhangsan&quot;</span> &#125;;</span></span><br><span class="line"><span class="language-javascript">         customeEvent = <span class="variable language_">document</span>.<span class="title function_">createEvent</span>(<span class="string">&quot;CustomEvent&quot;</span>); <span class="comment">//创建自定义事件</span></span></span><br><span class="line"><span class="language-javascript">         customeEvent.<span class="title function_">initCustomEvent</span>(<span class="string">&quot;myEvent&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>, user);</span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript">     &#125;)();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//监听自定义事件</span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//通过addEventListener()函数监听自定义的事件`myEvent`</span></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">var</span> div1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">     div1.<span class="title function_">addEventListener</span>(<span class="string">&quot;myEvent&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;用户名是:&quot;</span>, e.<span class="property">detail</span>.<span class="property">userName</span>);</span></span><br><span class="line"><span class="language-javascript">     &#125;);</span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//触发自定义事件</span></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">var</span> btn1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">     btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">       div1.<span class="title function_">dispatchEvent</span>(customeEvent);</span></span><br><span class="line"><span class="language-javascript">     &#125;);</span></span><br><span class="line"><span class="language-javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上就是<code>DOM3</code>事件模型的案例。</p><h2 id="12、介绍一下事件委托"><a href="#12、介绍一下事件委托" class="headerlink" title="12、介绍一下事件委托"></a>12、介绍一下事件委托</h2><p>事件冒泡的一个应用就是事件代理，也叫做事件委托</p><p>事件委托：利用事件冒泡的特性，将本应该注册在子元素上的处理事件注册在父元素上。</p><p>例如：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>a1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>a2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>a3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>增加按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的代码中有很多的<code>a</code>标签，如果给每个<code>a</code>标签添加单击事件比较麻烦，同时采用这种方式添加事件还会导致占用内存比较多，你可以想象一下，如果<code>a</code>标签比较多的话，是不是会占用更多的内存。</p><p>那应该怎样解决这个问题呢？</p><p>可以通过事件委托的机制。也就是将事件绑定到父元素上，然后通过事件冒泡的原理，来解决这个问题。</p><p>如下代码所示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">     <span class="keyword">const</span> div1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line">     div1.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">       <span class="keyword">var</span> target = e.<span class="property">target</span>;</span><br><span class="line">       <span class="keyword">if</span> (target.<span class="property">nodeName</span>.<span class="title function_">toLowerCase</span>() === <span class="string">&quot;a&quot;</span>) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(target.<span class="property">innerHTML</span>);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们通过事件委托的方式解决了对应的问题，当然，这里你可能问，在<code>div</code>标签下的<code>a</code>标签所做的操作都是一样的，那么能不能针对不同的元素所做的操作如果不一样，事件委托能否处理呢？</p><p>答案是可以处理的。</p><p>下面我们把上面的程序改造一下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">id</span>=<span class="string">&quot;a1&quot;</span>&gt;</span>a1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">id</span>=<span class="string">&quot;a2&quot;</span>&gt;</span>a2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">id</span>=<span class="string">&quot;a3&quot;</span>&gt;</span>a3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>增加按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> div1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      div1.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> target = e.<span class="property">target</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">switch</span> (target.<span class="property">id</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">case</span> <span class="string">&quot;a1&quot;</span>:</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;针对a1进行操作&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">case</span> <span class="string">&quot;a2&quot;</span>:</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;针对a2进行操作&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">case</span> <span class="string">&quot;a3&quot;</span>:</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;针对a3进行操作&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，给每个<code>a</code>标签，添加了<code>id</code>属性，通过<code>switch</code>结构进行判断，然后执行不同的操作。</p><p>下面，我们再来看一个关于事件委托的应用问题：</p><p>在一个<code>ul</code>标签中，包含了<code>5</code>个<code>li</code>，需要单击每个<code>li</code>标签，输出标签中的内容。同时在页面中添加一个按钮，单击按钮创建一个新的<code>li</code>元素，单击新创建的<code>li</code>元素也可以输出对应的内容。</p><p>我们想到的实现方式如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>a1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>a2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>a3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>a4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>a5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//通过querySelectorAll方法获取所有的li元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//通过for循环遍历的方式，给每个li添加单击事件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> children = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; children.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        children[i].<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">innerHTML</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//获取按钮</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#btn&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//获取ul标签</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;ul&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//给按钮添加单击事件</span></span></span><br><span class="line"><span class="language-javascript">      btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//创建li</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> newLi = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//创建文本节点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> newText = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;a6&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//将文本添加到新创建的li标签上</span></span></span><br><span class="line"><span class="language-javascript">        newLi.<span class="title function_">appendChild</span>(newText);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//把创建的li添加到ul上</span></span></span><br><span class="line"><span class="language-javascript">        ul.<span class="title function_">appendChild</span>(newLi);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行上面的代码：打击<code>a1--a5</code>都可以获取内容，单击按钮也可以添加一个新的<code>li</code>元素，但是问题是单击新创建的<code>li</code>元素，并没有输出元素中的内容。</p><p>原因是：我们通过<code>querySelectorAll</code>方法获取所有<code>li</code>元素，但是通过这个方法不能实时对增加的事件进行绑定。也就是说无法完成对新元素事件的绑定。</p><p>解决办法：先创建新元素，然后在进行事件的绑定。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">     <span class="keyword">function</span> <span class="title function_">bindEvent</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">var</span> children = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; children.<span class="property">length</span>; i++) &#123;</span><br><span class="line">         children[i].<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">innerHTML</span>);</span><br><span class="line">         &#125;);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#btn&quot;</span>);</span><br><span class="line">     <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;ul&quot;</span>);</span><br><span class="line">     btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       <span class="comment">//创建li</span></span><br><span class="line">       <span class="keyword">var</span> newLi = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">       <span class="keyword">var</span> newText = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;a6&quot;</span>);</span><br><span class="line">       newLi.<span class="title function_">appendChild</span>(newText);</span><br><span class="line">       <span class="comment">//把创建的li添加到ul上</span></span><br><span class="line">       ul.<span class="title function_">appendChild</span>(newLi);</span><br><span class="line">       <span class="comment">//重新添加事件处理程序</span></span><br><span class="line">       <span class="title function_">bindEvent</span>();</span><br><span class="line">     &#125;);</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们创建了一个<code>bindEvent</code>函数，把对<code>li</code>元素添加事件的操作封装到了该方法中。</p><p>然后在按钮对应的事件处理函数中，先完成新元素的创建，然后在调用<code>bindEvent</code>方法，完成对<code>li</code>元素事件的绑定操作。</p><p>虽然以上完成了我们的需求，但是还有一个问题需要解决，就是我们前面所讲的：由于给每个<code>li</code>元素都添加了单击事件，导致占用内存比较多，性能比较低，所以可以使用事件委托的方式来改造上面的程序。</p><p>改造后的程序如下所示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;ul&quot;</span>);</span><br><span class="line">      <span class="comment">//   var parent = document.querySelector(&quot;ul&quot;);</span></span><br><span class="line">      ul.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> target = e.<span class="property">target</span>;</span><br><span class="line">        <span class="keyword">if</span> (target.<span class="property">nodeName</span>.<span class="title function_">toLowerCase</span>() === <span class="string">&quot;li&quot;</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(target.<span class="property">innerHTML</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#btn&quot;</span>);</span><br><span class="line"></span><br><span class="line">      btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//创建li</span></span><br><span class="line">        <span class="keyword">var</span> newLi = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> newText = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;a6&quot;</span>);</span><br><span class="line">        newLi.<span class="title function_">appendChild</span>(newText);</span><br><span class="line">        <span class="comment">//把创建的li添加到ul上</span></span><br><span class="line">        ul.<span class="title function_">appendChild</span>(newLi);</span><br><span class="line">        <span class="comment">//重新添加事件处理程序</span></span><br><span class="line">        <span class="comment">// bindEvent();</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们通过<code>querySelector</code>方法获取<code>ul</code>这个父元素，然后给该元素添加单击事件，在对应的事件处理程序中，判断获取到的元素是否为<code>li</code>，如果是打印<code>li</code>元素中的内容。</p><p>由于这里我们没有在使用<code>querySelectorAll</code>函数，所以这里我们也没有必要在封装到一个函数中了。</p><p>关于按钮的单击事件的处理，没有任何的变化。</p><p>以上我们就是通过事件委托的方式，给父元素添加了事件，对应的子元素都具有了相应的事件，这样的处理方式性能更高。</p><p>关于事件委托，在这里我们就介绍完了，通过前面的讲解，希望对事件委托有一个比较深刻的理解。</p><p>在<code>JavaScript</code>中还有一些其它的比较常用的事件，例如：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">焦点相关的事件:focus,blur等事件</span><br><span class="line">鼠标相关的事件:mouseover,mouseout等事件</span><br><span class="line">键盘相关的事件：keydown,keyup,keypress等</span><br><span class="line">其它事件...</span><br></pre></td></tr></table></figure><p>关于这些事件，大家可以查看相应的文档，了解对应的基本使用。</p><h2 id="13、介绍一下浏览器的重排与重绘"><a href="#13、介绍一下浏览器的重排与重绘" class="headerlink" title="13、介绍一下浏览器的重排与重绘"></a>13、介绍一下浏览器的重排与重绘</h2><p>在前面的课程中，我们也提到过对<code>DOM</code>的操作是比较消耗性能的，这是因为它会带来浏览器的重绘与重排。</p><p>在讲解什么是重排与重绘之前,先来说一下浏览器渲染<code>HTML</code>的过程。</p><p>浏览器渲染<code>HTML</code>的过程大体上可以分为4步</p><p>第一：<code>HTML</code>代码被<code>HTML</code>解析器解析成对应的<code>DOM</code>树，<code>CSS</code>代码被<code>CSS</code>解析器解析成对应的样式规则集。</p><p>第二：<code>DOM</code>树与<code>CSS</code>解析完成后，附加在一起形成一个渲染树</p><p>第三：节点信息的计算，即根据渲染树计算出每个节点的几何信息（宽，高等信息）</p><p>第四：渲染绘制，根据计算完成的节点信息绘制整个页面。</p><p>而我们所要讲解的重排与重绘就发生在第三步和第四步中。</p><p><strong>什么是重排</strong></p><p>当对一个<code>DOM</code>节点信息进行修改的时候，需要对该<code>DOM</code>结构进行重新的计算。并且该<code>DOM</code>结构的修改会决定周边<code>DOM</code>结构的更改范围，主要分为全局范围和局部范围。</p><p>全局范围就是从页面的根节点<code>html</code>标签开始，对整个渲染树进行重新计算，例如：我们修改窗口的尺寸或者修改了根元素的字体大小的时，都会导致对整个渲染树进行重新计算。</p><p>局部范围只会对渲染树的某部分进行重新计算。例如要改变页面中某个<code>div</code>的宽度，只需要重新计算渲染树中与该<code>div</code>相关的内容就可以了。</p><p>而重排的过程发生在<code>DOM</code>节点信息修改的时候，重排实际是根据渲染树中每个渲染对象的信息，计算出各自渲染对象的几何信息，例如<code>DOM</code>元素的位置，尺寸，大小等。然后将其放在页面中的正确的位置上。</p><p>综上所述，我们明白了重排其实就是一种改变页面布局的操作。那么常见的引起重排的操作有哪些呢？</p><p>（1）页面首次渲染</p><p>在页面首次渲染的时候，<code>HTML</code>页面中的各个元素位置，尺寸，大小等信息都是未知的，需要通过与<code>css</code>样式规则集才能够确定出各个元素的几何信息。这个过程中会产生很多元素集合信息的计算，所以会产生重排。</p><p>(2)浏览器窗口大小的改变</p><p>页面渲染完成后，就会得到一个固定的渲染树。如果此时对浏览器窗口进行缩放或者是拉伸操作，渲染树中从根元素<code>html</code>标签开始的所有元素，都会重新计算其几何信息，从而产生重排的操作。</p><p>(3)元素位置改变和尺寸的改变</p><p>(4)元素内容改变,例如，文本内容被另外一个不同尺寸的图片替换。</p><p>(5)添加或者删除可见的DOM元素</p><p>(6)获取某些特定的属性</p><p>当我们对<code>javascript</code>某些操作属性的修改也会导致重排的操作，而频繁的重排操作会对浏览器引擎产生很大的消耗。所以浏览器不会对<code>js</code>的每个操作都进行一次重排，而是维护一个会引起重排操作的队列，等到队列中的操作达到了一定的数量或者是到了一定的时间间隔的时候，浏览器才会去刷新一次队列，进行真正的重排操作。</p><p>虽然浏览器有这样的优化，但是我们写的一些代码还会导致浏览器提取刷新队列，例如以下的操作。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">offsetLeft,offsetWidth,offsetHeight,offsetTop</span><br><span class="line">scrollTop,scrollLeft,scrollWidth,scrollHeight</span><br><span class="line">clientTop,clientLeft,clientWidth,clientHeight</span><br><span class="line">widht,height</span><br></pre></td></tr></table></figure><p>当我们进行以上属性操作的时候，浏览器为了返回最精确的信息，需要刷新队列，因为队列中的某些操作会影响到这些属性值的获取。</p><p>以上就是浏览器重排的介绍</p><p><strong>浏览器重绘</strong></p><p>浏览器的重绘指的就是改变元素在页面中的展示样式，而不会引起元素在文档中位置的改变。例如：改变元素的颜色，背景色，透明度等。</p><p>常见的引起重绘的操作如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">color</span>:颜色</span><br><span class="line">border-<span class="attr">style</span>:边框样式</span><br><span class="line"><span class="attr">visibility</span>: 元素是否可见</span><br><span class="line"><span class="attr">background</span>:背景样式，包括背景颜色，背景图片等</span><br><span class="line">text-<span class="attr">decoration</span>:文本下划线，上划线等</span><br><span class="line">border-<span class="attr">radius</span>:边框圆角</span><br><span class="line">box-<span class="attr">shadow</span>:元素的阴影</span><br></pre></td></tr></table></figure><p>以上就是浏览器的重绘的介绍。</p><p>通过对浏览器重排与重绘的介绍，相信大家已经有所了解了，那么它们两者之间有什么关系呢？</p><p>简单的说，重排一定会引起重绘，而重绘却不一定会引起重排的操作。</p><p>因为当元素在重排的过程中，元素的位置等几何信息会重新计算，并会引起元素的重新渲染，这样就会产生重绘的操作，而在重绘的时候，只是改变了元素的展示的样式，而不会引起元素在文档中位置的改变，所以一般不会引起重排的操作。</p><p><strong>性能优化</strong></p><p>浏览器的重排与重绘是比较消耗性能的，所以我们应该尽量减少重排与重绘的操作，这也是优化网页性能的一种方式。</p><p>常见的方法如下：</p><p>第一：将样式属性值的修改合并为一次。</p><p>例如，我们需要修改一个元素的样式，可以通过如下的代码实现：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mainDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line">    mainDiv.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&quot;200px&quot;</span>;</span><br><span class="line">    mainDiv.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&quot;100px&quot;</span>;</span><br><span class="line">    mainDiv.<span class="property">style</span>.<span class="property">background</span> = <span class="string">&quot;#ccc&quot;</span>;</span><br></pre></td></tr></table></figure><p>但是问题是，在上面的操作中多次修改了<code>style</code>属性，会引发多次的重排与重绘操作。</p><p>所以为了解决这个问题，可以将这些样式合并在一个<code>class</code>类中。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-class">.changeStyle</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">background</span>: <span class="string">&quot;#ccc&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br></pre></td></tr></table></figure><p>然后通过通过<code>javascript</code>直接修改元素的样式</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div1&quot;</span>).<span class="property">className</span> = <span class="string">&quot;changeStyle&quot;</span>;</span><br></pre></td></tr></table></figure><p>这样我们可以在最后一步完成样式的修改，从而只引起一次的重排与重绘的操作。</p><p>第二：</p><p>将需要多次重排的元素，<code>position</code>属性设为<code>absolute</code>或<code>fixed</code>，这样此元素就脱离了文档流，它的变化不会影响到其他元素。例如有动画效果的元素就最好设置为绝对定位。</p><p>第三：在对多节点操作的时候，可以现在内测中完成，然后在添加到文档中。</p><p>如下代码所示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createTable</span>(<span class="params">list</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> table = $(<span class="string">&quot;#table&quot;</span>);</span><br><span class="line">      <span class="keyword">var</span> rowHtml = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      list.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">        rowHtml += <span class="string">&quot;&lt;tr&gt;&quot;</span>;</span><br><span class="line">        rowHtml += <span class="string">&quot;&lt;td&gt;&quot;</span> + item.<span class="property">userName</span> + <span class="string">&quot;&lt;/td&gt;&quot;</span>;</span><br><span class="line">        rowHtml += <span class="string">&quot;&lt;td&gt;&quot;</span> + item.<span class="property">userPwd</span> + <span class="string">&quot;&lt;/td&gt;&quot;</span>;</span><br><span class="line">        rowHtml += <span class="string">&quot;&lt;/tr&gt;&quot;</span>;</span><br><span class="line">        table.<span class="title function_">append</span>(rowHtml);</span><br><span class="line">        rowHtml = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>当调用<code>createTable</code>方法的时候，会从<code>list</code>集合中取出一条数据，然后放在<code>tr</code>标签中，紧跟着添加到表格中，这样就会导致每添加一行数据，都会引发一次浏览器的重排和重绘的操作，如果数据很多，则会对渲染造成很大的影响。</p><p>修改后的代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createTabel</span>(<span class="params">list</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> table = $(<span class="string">&quot;#table&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> rowHtml = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        list.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">          rowHtml += <span class="string">&quot;&lt;tr&gt;&quot;</span>;</span><br><span class="line">          rowHtml += <span class="string">&quot;&lt;td&gt;&quot;</span> + item.<span class="property">userName</span> + <span class="string">&quot;&lt;/td&gt;&quot;</span>;</span><br><span class="line">          rowHtml += <span class="string">&quot;&lt;td&gt;&quot;</span> + item.<span class="property">userPwd</span> + <span class="string">&quot;&lt;/td&gt;&quot;</span>;</span><br><span class="line">          rowHtml += <span class="string">&quot;&lt;/tr&gt;&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="comment">//将数据一次性追加到表格中，完成一次渲染</span></span><br><span class="line">        table.<span class="title function_">append</span>(rowHtml);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>通过上面的改造以后，只会引起一次浏览器的重绘与重排的操作，从而带来很大的新能提升。</p><p>第四：由于<code>display</code>属性为<code>none</code>的元素不在渲染树中，对隐藏的元素操作不会引发其他元素的重排。如果要对一个元素进行复杂的操作时，可以先隐藏它，操作完成后再显示。这样只在隐藏和显示时触发两次重排。</p><p>第五：　尽量减少<code>table</code>布局,随便修改一个单元格的高度或宽度都会让整个表格进行重排，性能非常差。</p><p>第六：在对多个同级元素做事件绑定的时候，推荐使用事件委托机制来处理。</p><p>第七：文档片段<code>DocumentFragment</code>的使用，关于这块内容，在前面的课程中已经使用过。</p><p>使用批量插入元素，例如：向页面的<code>ul</code>元素中添加<code>100</code>个<code>li</code>元素，</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> listNode = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">      <span class="comment">//创建一个文档片段，文档片段存在于内存中，并不在DOM树中，所以此时还没有插入到DOM中</span></span><br><span class="line">      <span class="comment">//也就是先将dom插入到临时区域中</span></span><br><span class="line">      <span class="keyword">const</span> frag = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span><br><span class="line">      <span class="comment">//执行插入</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">        li.<span class="property">innerHTML</span> = <span class="string">`item<span class="subst">$&#123;i&#125;</span>`</span>;</span><br><span class="line">        frag.<span class="title function_">appendChild</span>(li);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//都完成后，再插入到DOM树中</span></span><br><span class="line">      listNode.<span class="title function_">appendChild</span>(frag);</span><br></pre></td></tr></table></figure><p>以上就是关于浏览器重绘与重排的内容。</p><h1 id="六、AJAX"><a href="#六、AJAX" class="headerlink" title="六、AJAX"></a>六、AJAX</h1><h2 id="1、什么是AJAX"><a href="#1、什么是AJAX" class="headerlink" title="1、什么是AJAX"></a>1、什么是AJAX</h2><p>Ajax是一种异步请求数据的web开发技术，对于改善用户的体验和页面性能很有帮助。简单地说，在不需要重新刷新页面的情况下，Ajax 通过异步请求加载后台数据，并在网页上呈现出来。常见运用场景有表单验证是否登入成功、百度搜索下拉框提示和快递单号查询等等。</p><p><strong>Ajax的目的是提高用户体验，较少网络数据的传输量</strong>。同时，由于AJAX请求获取的是数据而不是<code>html</code>文档，因此它也节省了网络带宽，让互联网用户的网络冲浪体验变得更加顺畅。</p><p>关于提高用户的体验，可以通过下面来进行体会</p><p>下图是普通的请求方式</p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/ajax1.png"></p><p>下图是<code>ajax</code>请求的方式</p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/ajax2.png"></p><h2 id="2、AJAX原理是什么"><a href="#2、AJAX原理是什么" class="headerlink" title="2、AJAX原理是什么"></a>2、AJAX原理是什么</h2><p><code>Ajax</code>相当于在用户和服务器之间加了一个中间层,使用户操作与服务器响应异步化。并不是所有的用户请求都提交给服务器，像一些数据验证和数据处理等都交给Ajax引擎自己来做，只有确定需要从服务器读取新数据时再由Ajax引擎代为向服务器提交请求。</p><p>Ajax的原理简单来说通过<code>XmlHttpRequest</code>对象来向服务器发送异步请求，从服务器获得数据，然后用JavaScript来操作DOM而更新页面。</p><p><code>XMLHttpRequest</code>是<code>ajax</code>的核心机制，它是在<code>IE5</code>中首先引入的，是一种支持异步请求的技术。简单的说，也就是JavaScript可以及时向服务器提出请求和处理响应，而不阻塞用户。达到无刷新的效果。</p><h2 id="3、AJAX基本的使用"><a href="#3、AJAX基本的使用" class="headerlink" title="3、AJAX基本的使用"></a>3、AJAX基本的使用</h2><p>这里主要掌握的是能够手动创建<code>AJAX</code>.</p><p>创建步骤：</p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/AJAX%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B.png"></p><p>创建<code>xhr</code>对象</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>) &#123;<span class="comment">// 兼容 IE7+, Firefox, Chrome, Opera, Safari  </span></span><br><span class="line">    xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();  </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// 兼容 IE6, IE5 </span></span><br><span class="line">    xhr = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>配置请求地址与发送请求</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(method, url, <span class="keyword">async</span>);  </span><br><span class="line"><span class="title function_">send</span>(string);<span class="comment">//`POST`请求时才使用字符串参数，否则不用带参数。</span></span><br><span class="line"><span class="comment">// method：请求的类型；GET 或 POST</span></span><br><span class="line"><span class="comment">// url：文件在服务器上的位置</span></span><br><span class="line"><span class="comment">// async：true（异步）或 false（同步）</span></span><br></pre></td></tr></table></figure><p><strong>注意：POST请求一定要设置请求头的格式内容</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;test.html&quot;</span>, <span class="literal">true</span>);  </span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);  </span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&quot;fname=Henry&amp;lname=Ford&quot;</span>);  <span class="comment">//`POST`请求参数放在send里面，即请求体</span></span><br></pre></td></tr></table></figure><p>处理响应</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123; </span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> == <span class="number">200</span>)&#123;    </span><br><span class="line">    <span class="variable language_">document</span>.<span class="title class_">GetElementById</span>(<span class="string">&quot;mydiv&quot;</span>).<span class="property">innerHTML</span> = xhr.<span class="property">responseText</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="什么是readyState？"><a href="#什么是readyState？" class="headerlink" title="什么是readyState？"></a>什么是readyState？</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">readyState是XMLHttpRequest对象的一个属性，用来标识当前XMLHttpRequest对象处于什么状态。</span><br><span class="line">readyState总共有5个状态值，分别为0~4，每个值代表了不同的含义：</span><br><span class="line"></span><br><span class="line">0：未初始化 — 尚未调用.open()方法；</span><br><span class="line">1：启动 — 已经调用.open()方法，但尚未调用.send()方法；</span><br><span class="line">2：发送 — 已经调用.send()方法，但尚未接收到响应；</span><br><span class="line">3：接收 — 已经接收到部分响应数据；</span><br><span class="line">4：完成 — 已经接收到全部响应数据，而且已经可以在客户端使用了；</span><br></pre></td></tr></table></figure><h5 id="什么是status？"><a href="#什么是status？" class="headerlink" title="什么是status？"></a>什么是status？</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP状态码(status)由三个十进制数字组成。HTTP状态码共分为5种类型：</span><br><span class="line"></span><br><span class="line">1xx（临时响应）：表示临时响应并需要请求者继续执行操作的状态码。</span><br><span class="line">2xx（成功）：表示成功处理了请求的状态码。</span><br><span class="line">3xx（重定向）：表示要完成请求，需要进一步操作。通常，这些状态代码用来重定向。</span><br><span class="line">4xx（请求错误）：这些状态码表示请求可能出错，妨碍了服务器的处理。</span><br><span class="line">5xx（服务器错误）：这些状态码表示服务器在尝试处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错。</span><br></pre></td></tr></table></figure><h2 id="4、AJAX优缺点分析"><a href="#4、AJAX优缺点分析" class="headerlink" title="4、AJAX优缺点分析"></a>4、AJAX优缺点分析</h2><p><strong>优点</strong></p><p>(1)无刷新更新数据</p><p><code>AJAX</code>最大的优点是在不需要刷新浏览器的情况下，能够与服务器保持通信，并且能够减少不必要的数据数据传输，降低网络数据流量，这样可以加快响应用户的请求，避免不必要的等待时间，提高用户的体验。</p><p>(2)前后端分离</p><p>前端人员只关注前端页面逻辑的开发，通过<code>ajax</code>获取后端数据然后进行展示处理，而后端专注于请求的获取，响应的处理，职责明确。</p><p><strong>缺点：</strong></p><p>(1) 破坏浏览器的后退功能</p><p>浏览器有一个比较重要的功能就是历史记录的功能，通过后退按钮可以后退到浏览器之前访问的页面，但是使用了<code>ajax</code>后无法后退，也就是破坏了浏览器的后退机制。</p><p>（2）不利于搜索引擎的优化</p><p>百度，谷歌在进行搜索引擎优化的时候(<code>SEO</code>),会获取页面中的内容，而通过<code>ajax</code>请求返回的数据是通过<code>javascript</code>动态添加到页面上的，而百度等搜索引擎无法抓取到这些通过<code>javascript</code>动态生成的内容，所以不利于<code>SEO</code></p><p>(3) 破坏了<code>URL</code>统一资源定位的功能。</p><p>由于<code>AJAX</code>的请求并不会修改浏览器中地址栏的<code>URL</code>，因此对于相同的<code>URL</code>，不同的用户看到的内容是不一样的，例如，你访问某个电商网站，在该电商网站中搜索到一件非常好的商品，你现在把地址发给你的同学，而你的同学打开这个地址后，却看不到这件商品。</p><p>所以网站的搜索的实现，一般不是通过<code>ajax</code>来发送请求。</p><h2 id="5、Get和Post请求数据的区别"><a href="#5、Get和Post请求数据的区别" class="headerlink" title="5、Get和Post请求数据的区别"></a>5、Get和Post请求数据的区别</h2><p>(1)参数传递</p><p><code>get</code>请求会将参数添加到<code>URL</code>地址的后面，在调用<code>ajax</code>的<code>send</code>方法的时候，传递的参数是<code>null</code>，即<code>xhr.send()</code>;</p><p><code>post</code>请求的数据会放在请求体中，用户是无法通过<code>URL</code>地址直接看到的，调用<code>send</code>方法的时候，需要指定要发送到服务端的数据，即<code>xhr.send(data)</code></p><p>(2)服务端的处理</p><p>针对<code>get</code>请求与<code>post</code>请求，在服务端的处理也是不一样的。如果以<code>Express</code>来作为服务端，<code>get</code>的请求需要通过<code>Request.query</code>来获取参数，而<code>post</code>请求的处理，需要通过<code>Request.body</code>来获取数据。</p><p>（3）传递的数据量</p><p><code>get</code>请求的数据量小，对于不同的浏览器是有差异 ，谷歌浏览器限制<code>8k</code>.<code>post</code>请求传递的数据量比较大，一般默认不受限制。但是服务器一般会做限制。</p><p>（4）安全性</p><p><code>get</code>请求的安全性比较低，因为请求的数据会出现在<code>url</code>上，通过浏览器的缓存或者是历史记录很容易获取到请求的数据。<code>post</code>请求是将数据放在请求体中进行传递，数据不会出现在<code>URL</code>，安全性比较高。</p><h2 id="6、Get和Post请求的应用场景"><a href="#6、Get和Post请求的应用场景" class="headerlink" title="6、Get和Post请求的应用场景"></a>6、Get和Post请求的应用场景</h2><p>在了解了<code>get</code>方式和<code>post</code>请求方式的区别以后，下面看一下它们的应用场景。</p><p><code>get</code>的应用场景</p><p>（1）数据的搜索，单击搜索按钮，搜索网站中指定的数据。</p><p>  (2) 传递的数据量小，适合用于<code>url</code>方式进行传递</p><p> (3) 数据安全性要求不高的情况</p><p><code>post</code>请求的应用场景</p><p>(1) 传递数据量比较大的情况，例如上传文件</p><p>(2) 表单提交，例如用户登录，注册，要求数据安全性比较高的情况。</p><p>(3) 请求会修改数据库中数据的情况，例如，添加数据，修改数据等。</p><h2 id="7、浏览器同源策略"><a href="#7、浏览器同源策略" class="headerlink" title="7、浏览器同源策略"></a>7、浏览器同源策略</h2><p>浏览器同源策略是浏览器最基本也是最核心的安全功能，它规定客户端脚本在没有明确授权的情况下，不能读写不同源的目标资源。</p><p>所谓的同源指的是相同协议，域名和端口号，如果两个资源路径在协议，域名，端口号上有任何一点不同，则它们就不属于同源的资源，</p><p>另外在同源策略上，又分为两种表现形式：</p><p>第一：禁止对不同页面进行<code>DOM</code>操作</p><p>第二：禁止使用<code>XMLHttpRequest</code>向不是同源的服务器发送<code>ajax</code>请求。</p><h2 id="8、为什么浏览器会有跨域限制的问题？"><a href="#8、为什么浏览器会有跨域限制的问题？" class="headerlink" title="8、为什么浏览器会有跨域限制的问题？"></a>8、为什么浏览器会有跨域限制的问题？</h2><p>什么是跨域呢？</p><p>访问同源的资源是被浏览器允许的，但是如果访问不同源的资源，浏览器默认是不允许的。访问不同源的资源那就是我们所说的跨域。</p><p>如下表格所示：</p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/%E8%B7%A8%E5%9F%9F.png"></p><p>从表中可以看出域名，子域名，端口号，协议不同都属于不同源，当脚本被认为是来至不同源时，均被浏览器拒绝请求。</p><p>浏览器对跨域访问的限制，可以在很大的程度上保护用户数据的安全。</p><p>第一：假如没有<code>Dom</code>同源策略的限制，就有可能会出现如下的安全隐患</p><p>黑客做了一个假的的网站，通过<code>iframe</code>嵌套了一个银行的网站，然后把<code>iframe</code>的高度宽度调整到占据浏览器的可视区域 ，这样用户进入这个假的网站后，看到就是和真正的银行网站是一样的内容。如果用户输入了用户名和密码，这个假的网站就可以跨域访问到所嵌套的银行网站的<code>DOM</code>节点，从而黑客就可以获取到用户输入的用户名和密码了。</p><p>第二：如果浏览器没有<code>XMLHttpRequest</code>同源策略限制，黑客可以进行跨站请求伪造(<code>CSRF</code>)攻击，具体方式如下：</p><p>(1)用户登录了个人银行页面<code>A</code>,页面<code>A</code>会在<code>Cookie</code>中保存用户信息</p><p>(2)后来用户又访问了一个恶意的页面<code>B</code>,在该页面中执行了恶意<code>Ajax</code>请求的代码</p><p>(3)这时页面<code>B</code>会向页面<code>A</code>发送<code>Ajax</code>请求，该请求会默认发送用户<code>Cookie</code>信息。</p><p>(4)页面<code>A</code>会从请求的<code>Cookie</code>中获取用户信息，验证无误后，就会返回用户的一系列相关的数据，而这些数据就会被恶意的页面B所获取，从而造成用户数据的泄漏。</p><p>正是存在这些危险的场景存在，所以同源策略的限制就显得非常总要。</p><h2 id="9、跨域问题演示"><a href="#9、跨域问题演示" class="headerlink" title="9、跨域问题演示"></a>9、跨域问题演示</h2><p>创建一个文件夹，在该文件夹中创建<code>index.html</code>文件，该文件中的代码如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btnLogin&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">sendRequest</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">sendRequest</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> userName = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;userName&quot;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//这里为了简单，暂时不考虑浏览器兼容性问题</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> url = <span class="string">&quot;http://localhost:3000/getUserNameInfo?name=&quot;</span> + userName;</span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="title function_">open</span>(<span class="string">&quot;get&quot;</span>, url, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userName&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnLogin&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在该文件夹下面安装<code>express</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install express</span><br></pre></td></tr></table></figure><p>同时创建<code>server.js</code>文件，该文件的代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/getUserNameInfo&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> userName = req.<span class="property">query</span>.<span class="property">name</span>;</span><br><span class="line">    <span class="keyword">var</span> result = &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">10001</span>,</span><br><span class="line">        <span class="attr">userName</span>: userName,</span><br><span class="line">        <span class="attr">userAge</span>:<span class="number">21</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(result);</span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;)</span><br><span class="line">    res.<span class="title function_">write</span>(data);</span><br><span class="line">    res.<span class="title function_">end</span>()</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务端启动....&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>下面启动服务端</p><p>同时<code>index.html</code>文件也通过<code>vscode</code>自带的服务器进行访问。</p><p>这时会出现如下错误：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Access to XMLHttpRequest at &#x27;http://localhost:3000/getUserNameInfo?name=admin&#x27; from origin &#x27;http://127.0.0.1:5500&#x27; has been blocked by CORS policy: No &#x27;Access-Control-Allow-Origin&#x27; header is present on the requested resource.</span><br></pre></td></tr></table></figure><p>通过以上错误可以发现，现在的程序出现 跨域的问题，</p><p>下面看一下具体的解决方案</p><h2 id="10、CORS"><a href="#10、CORS" class="headerlink" title="10、CORS"></a>10、CORS</h2><p>通过上面的错误，我们明白了，客户端不能发送跨域请求是因为服务端并不接收跨域的请求，所以为了解决跨域请求的问题，我们可以将服务端设置为可以接收跨域请求。</p><p>这里我们需要使用<code>CORS</code>(‘跨域资源共享’),来解决跨域请求的问题。<code>CORS</code>主要的实现方式是服务端通过对响应头的设置，接收跨域请求的处理。</p><p>服务端修改后的代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;*&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="comment">//设置可以接收请求的域名</span></span><br><span class="line">    res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:5500&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;GET, POST,PUT&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;Content-Type&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">header</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/json;charset=utf-8&#x27;</span>);</span><br><span class="line">    req.<span class="title function_">next</span>();</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/getUserNameInfo&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> userName = req.<span class="property">query</span>.<span class="property">name</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;userName=&#x27;</span>,userName)</span><br><span class="line">    <span class="keyword">var</span> result = &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">10001</span>,</span><br><span class="line">        <span class="attr">userName</span>: userName,</span><br><span class="line">        <span class="attr">userAge</span>:<span class="number">21</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(result);</span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;)</span><br><span class="line">    res.<span class="title function_">write</span>(data);</span><br><span class="line">    res.<span class="title function_">end</span>()</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务端启动....&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在原有的代码中，我们主要是添加了如下的代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;*&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="comment">//设置可以接收请求的域名</span></span><br><span class="line">    res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:5500&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;GET, POST,PUT&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;Content-Type&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">header</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/json;charset=utf-8&#x27;</span>);</span><br><span class="line">    req.<span class="title function_">next</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在上面的代码中，最主要的是<code>  res.header(&#39;Access-Control-Allow-Origin&#39;, &#39;http://127.0.0.1:5500&#39;);</code>这行代码，</p><p>这行代码是必须的，表示服务器可以接收哪个域发送的请求，可以用通配符<code>*</code>，表示接收全部的域，但是为了安全，我们最好设置特定的域。我们这里测试的是<code>http://127.0.0.1:5500</code>(注意：如果客户端地址是<code>127.0.0.1</code>,这里不能写成<code>localhost</code>,同时还需要注意，这里地址最后没有<code>/</code>)</p><p>后面请求头信息可以根据情况进行选择设置，例如接收请求的方法，数据传输的格式等。</p><p>通过对服务端的处理不会对前端代码做任何的处理，但是由于不同系统服务端采用的语言与框架是不同的，所以导致服务端的处理方式不同。</p><h2 id="11、JSONP"><a href="#11、JSONP" class="headerlink" title="11、JSONP"></a>11、JSONP</h2><p><code>JSONP</code>是客户端与服务端进行跨域通信比较常用的解决办法，它的特点是简单，兼容老式浏览器，并且对服务器影响小。</p><p><code>JSONP</code>的实现的实现思想可以分为两步：</p><p>第一：在网页中动态添加一个<code>script</code>标签，通过<code>script</code>标签向服务器发送请求，在请求中会携带一个请求的<code>callback</code>回调函数名。</p><p>第二:  服务器在接收到请求后，会进行相应处理，然后将参数放在<code>callback</code>回调函数中对应的位置，并将<code>callback</code>回调函数通过<code>json</code>格式进行返回。</p><p>前端代码：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btnLogin&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">sendRequest</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">sendRequest</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> userName = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;userName&quot;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//请求参数，其中包含回调函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> param = <span class="string">&quot;name=&quot;</span> + userName + <span class="string">&quot;&amp;callback=successFn&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//请求的url</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> url = <span class="string">&quot;http://localhost:3000/getUserNameInfo?&quot;</span> + param;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        script.<span class="property">src</span> = url;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">successFn</span>(<span class="params">result</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result=&quot;</span>, result);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   function sendRequest() &#123;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//     var userName = document.getElementById(&quot;userName&quot;).value;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//     //这里为了简单，暂时不考虑浏览器兼容性问题</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//     var xhr = new XMLHttpRequest();</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//     let url = &quot;http://localhost:3000/getUserNameInfo?name=&quot; + userName;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//     xhr.open(&quot;get&quot;, url, true);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//     xhr.send();</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//     xhr.onreadystatechange = function () &#123;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//       if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) &#123;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//         console.log(xhr.responseText);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//       &#125;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//     &#125;;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userName&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnLogin&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上面的代码中，我们重新改造了<code>sendRequest</code>方法，在该方法中构建了<code>param</code>参数，该参数的内容包括了用户输入的用户名以及回调函数名。下面构建好所要请求的服务端的<code>url</code>地址，将该<code>url</code>地址交给<code>script</code>标签的<code>src</code>属性，通过该属性向服务器发送请求。</p><p>同时定义回调函数<code>successFn</code>,接收服务端返回的数据。可以对服务端返回的数据做进一步的处理。</p><p>这里需要注意的一点就是：回调函数必须设置为全局的函数。因为服务端返回响应后，会在全局环境下查找回调函数。</p><p>下面看一下服务端的处理：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// app.all(&#x27;*&#x27;, function (req, res) &#123;</span></span><br><span class="line"><span class="comment">//     //设置可以接收请求的域名</span></span><br><span class="line"><span class="comment">//     res.header(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;http://127.0.0.1:5500&#x27;);</span></span><br><span class="line"><span class="comment">//     res.header(&#x27;Access-Control-Allow-Methods&#x27;, &#x27;GET, POST,PUT&#x27;);</span></span><br><span class="line"><span class="comment">//     res.header(&#x27;Access-Control-Allow-Headers&#x27;, &#x27;Content-Type&#x27;);</span></span><br><span class="line"><span class="comment">//     res.header(&#x27;Content-Type&#x27;, &#x27;application/json;charset=utf-8&#x27;);</span></span><br><span class="line"><span class="comment">//     req.next();</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/getUserNameInfo&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> userName = req.<span class="property">query</span>.<span class="property">name</span>;</span><br><span class="line">    <span class="comment">//获取请求的回调函数</span></span><br><span class="line">    <span class="keyword">var</span> callbackFn = req.<span class="property">query</span>.<span class="property">callback</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;callbackFn==&#x27;</span>,callbackFn)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;userName=&#x27;</span>,userName)</span><br><span class="line">    <span class="keyword">var</span> result = &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">10001</span>,</span><br><span class="line">        <span class="attr">userName</span>: userName,</span><br><span class="line">        <span class="attr">userAge</span>:<span class="number">21</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(result);</span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;)</span><br><span class="line">    <span class="comment">//返回值是对对回调函数的调用</span></span><br><span class="line">    res.<span class="title function_">write</span>(callbackFn+<span class="string">&#x27;(&#x27;</span>+data+<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">    <span class="comment">// res.write(data);</span></span><br><span class="line">    res.<span class="title function_">end</span>()</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务端启动....&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在服务的代码中，需要接收回调函数的名称。</p><p>同时返回的内容中，包含了回调函数的名称，以及传递给该回调函数的具体数据。</p><p>这样当回调函数返回给浏览器后，浏览器可以从全局的环境中查找该回调函数，并进行执行。</p><p>使用<code>JSONP</code>的优点与缺点：</p><p>优点：</p><p>简单，不存在浏览器兼容性的问题</p><p>缺点：</p><p>只能实现<code>get</code>请求，如果是<code>post</code>请求则无法进行跨域的处理。</p><h1 id="七、ES6"><a href="#七、ES6" class="headerlink" title="七、ES6"></a>七、ES6</h1><p>从这一章节开始，我们来看一下关于<code>ES6</code>的重点内容。</p><h2 id="1、let-关键字"><a href="#1、let-关键字" class="headerlink" title="1、let 关键字"></a>1、let 关键字</h2><h3 id="1-1-基本用法"><a href="#1-1-基本用法" class="headerlink" title="1.1 基本用法"></a>1.1 基本用法</h3><p>ES6中新增了let命令，用于变量的声明，基本的用法和var类似。例如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       <span class="comment">// 使用var使用声明变量</span></span><br><span class="line">       <span class="keyword">var</span> userName = <span class="string">&quot;bxg&quot;</span>;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;userName=&quot;</span>, userName);</span><br><span class="line">       <span class="comment">// 使用let声明变量</span></span><br><span class="line">       <span class="keyword">let</span> userAge = <span class="number">18</span>;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;userAge=&quot;</span>, userAge);</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>通过以上的代码，我们发现var和let的基本使用是类似的，但是两者还是有本质的区别，最大的区别就是：</p><p>使用let所声明的变量只在let命令所在的代码块中有效。</p><h3 id="1-2-let与var区别"><a href="#1-2-let与var区别" class="headerlink" title="1.2 let与var区别"></a>1.2 let与var区别</h3><p>下面我们通过一个for循环的案例来演示一下let和var的区别,如下所示：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;i=&quot;</span>, i)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;last=&quot;</span>, i)</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>通过以上的代码，我们知道在循环体中i的值输出的是1–10，最后i的值为11.</p><p>但是如果将var换成let会出现什么问题呢？代码如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;i=&quot;</span>, i)</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;last=&quot;</span>, i)</span><br></pre></td></tr></table></figure><p>在循环体中输出的i的值还是1–10,但是循环体外部打印i的值时出现了错误，错误如下：</p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/let%E5%85%B3%E9%94%AE%E5%AD%97.png"></p><p><strong>出错的原因是：通过let声明的变量只在其对应的代码块中起作用，所谓的代码块我们可以理解成就是循环中的这一对大括号。</strong></p><p>当然在这里我们通过这个提示信息，可以发现在ES6中默认是启动了严格模式的，严格模式的特征就是：变量未声明不能使用，否则报的错误就是变量未定义。</p><p>那么在ES5中怎样开启严格模式呢？我们可以在代码的最开始加上：<strong>“use strict”</strong></p><p>刚才我们说到，let声明的变量只在代码块中起作用，其实就是说明了通过let声明的变量仅在<strong>块级作用域</strong>内有效</p><h3 id="1-3-块级作用域"><a href="#1-3-块级作用域" class="headerlink" title="1.3 块级作用域"></a>1.3 块级作用域</h3><h4 id="1-3-1-什么是块级作用域？"><a href="#1-3-1-什么是块级作用域？" class="headerlink" title="1.3.1 什么是块级作用域？"></a>1.3.1 什么是块级作用域？</h4><p>​在这里告诉大家一个最简单的方法: <strong>有一段代码是用大括号包裹起来的，那么大括号里面就是一个块级作用域</strong></p><p>也就是说，在我们写的如下的案例中：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;i=&quot;</span>, i)</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;last=&quot;</span>, i)</span><br></pre></td></tr></table></figure><p>i 这个变量的作用域只在这一对大括号内有效，超出这一对大括号就无效了。</p><h4 id="1-3-2-为什么需要块级作用域？"><a href="#1-3-2-为什么需要块级作用域？" class="headerlink" title="1.3.2  为什么需要块级作用域？"></a>1.3.2  为什么需要块级作用域？</h4><p>​ES5 只有全局作用域和函数作用域，没有块级作用域，这样就会带来一些问题，</p><pre><code>     第一：内层变量可能会覆盖外层变量</code></pre><p>​                代码如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> temp = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">     <span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;temp=&quot;</span>, temp)</span><br><span class="line">         <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">             <span class="keyword">var</span> temp = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title function_">show</span>();</span><br></pre></td></tr></table></figure><p>执行上面的代码，输出的结果为 <em>temp&#x3D;undefined</em>  ，原因就是变量由于提升导致内层的temp变量覆盖了外层的temp变量</p><p>​第二： 用来计数的循环变量成为了全局变量</p><p>​关于这一点，在前面的循环案例中，已经能够看到。在这里，可以再看一下</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;i=&quot;</span>, i)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;last=&quot;</span>, i)</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在上面的代码中，变量i的作用只是用来控制循环，但是循环结束后，它并没有消失，而是成了全局的变量，这不是我们希望的，我们希望在循环结束后，该变量就要消失。</p><p>以上两点就是，在没有块级作用域的时候，带来的问题。</p><p>下面使用let来改造前面的案例。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> temp = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;temp=&quot;</span>, temp)</span><br><span class="line">          <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">              <span class="keyword">let</span> temp = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">show</span>();</span><br></pre></td></tr></table></figure><p>通过上面的代码，可以知道let不像var那样会发生“变量提升”的现象。</p><p>第二个问题前面已经讲解过。</p><h4 id="1-3-3-ES6块级作用域"><a href="#1-3-3-ES6块级作用域" class="headerlink" title="1.3.3 ES6块级作用域"></a>1.3.3 ES6块级作用域</h4><p>let实际上为JavaScript新增了块级作用域，下面再看几个案例，通过这几个案例，巩固一下关于“块级作用域”这个知识点的理解，同时进一步体会块级作用域带来的好处</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">let</span> num = <span class="number">5</span>;</span><br><span class="line">          <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">              <span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">test</span>()</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>上面的函数中有两个代码块，都声明了变量num,但是输出的结果是5.这表示外层的代码不受内层代码块的影响。如果使用var定义变量num,最后的输出的值就是10.</p><p>说一下，下面程序的输出结果是多少？</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> b = <span class="number">20</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> c = <span class="number">30</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>输出的结果是：b的值是20，在输出c的时候，出现了错误。</p><p>导致的原因，两个if就是两个块级作用域，c这个变量在第二个if中，也就是第二个块级作用域中，所以在外部块级作用域中无法获取到变量c.</p><p> 块级作用域的出现，带来了一个好处以前获得广泛使用的立即执行匿名函数不再需要了。</p><p>下面首先定义了一个立即执行匿名函数：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">;(<span class="keyword">function</span> <span class="title function_">text</span>(<span class="params"></span>) &#123;</span><br><span class="line">         <span class="keyword">var</span> temp = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;temp=&#x27;</span>, temp);</span><br><span class="line">     &#125;)()</span><br></pre></td></tr></table></figure><p>匿名函数的好处：通过定义一个匿名函数，创建了一个新的函数作用域，相当于创建了一个“私有”的空间，该空间内的变量和方法，不会破坏污染全局的空间 。</p><p>但是以上的写法是比较麻烦的，有了“块级作用域”后就编的比较简单了，代码如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       <span class="keyword">let</span> temp = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;temp=&#x27;</span>, temp);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>通过以上的写法，也是创建了一个“私有”的空间，也就是创建了一个封闭的作用域。同样在该封闭的作用域中的变量和方法，不会破坏污染全局的空间。</p><p>但是以上写法比立即执行匿名函数简单很多。</p><p>现在问你一个问题，以下代码是否可以：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> temp = <span class="string">&#x27;你好&#x27;</span>;</span><br><span class="line">       &#123;</span><br><span class="line">            <span class="keyword">let</span> temp = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>答案是可以的，因为这里有两个“块级作用域”，一个是外层，一个是内层，互不影响。</p><p>但是，现在修改成如下的写法：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> temp = <span class="string">&#x27;你好&#x27;</span>;</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;temp=&#x27;</span>, temp);</span><br><span class="line">      <span class="keyword">let</span> temp = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>出错了，也是变量未定义的错误，造成错误的原因还是前面所讲解的let 不存在“变量提升”。</p><p>块级作用域还带来了另外一个好处，我们通过以下的案例来体会一下：</p><p>该案例希望不同时间打印变量i的值。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;i=&#x27;</span>, i);</span><br><span class="line">          &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>那么上面程序的执行结果是多少？</p><p>对了，输出的都是 i&#x3D;3</p><p>造成的原因就是i为全局的。</p><p>那么可以怎样解决呢？相信这一点对你来说很简单，在前面ES5课程中也讲过。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">          (<span class="keyword">function</span>(<span class="params">i</span>) &#123;</span><br><span class="line">              <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;i=&#x27;</span>, i);</span><br><span class="line">              &#125;, <span class="number">1000</span>)</span><br><span class="line">          &#125;)(i)</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>通过以上的代码其实就是通过自定义一个函数，生成了函数的作用域,i变量就不是全局的了。</p><p>这种使用方式很麻烦，有了let命令后，就变的非常的简单了。</p><p>代码如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;i=&#x27;</span>, i);</span><br><span class="line">          &#125;, <span class="number">1000</span>)</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-let命令注意事项"><a href="#1-4-let命令注意事项" class="headerlink" title="1.4 let命令注意事项"></a>1.4 let命令注意事项</h3><h4 id="1-4-1-不存在变量提升"><a href="#1-4-1-不存在变量提升" class="headerlink" title="1.4.1 不存在变量提升"></a>1.4.1 不存在变量提升</h4><p>let不像var那样会发生“变量提升”现象。所以，变量一定要在声明后使用，否则会出错。</p><p>关于这一点，前面的课程也多次强调。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h4 id="1-4-2-暂时性死区"><a href="#1-4-2-暂时性死区" class="headerlink" title="1.4.2 暂时性死区"></a>1.4.2 暂时性死区</h4><p>什么是暂时性死区呢？</p><p>先来看一个案例：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">          num = <span class="number">666</span>;</span><br><span class="line">          <span class="keyword">let</span> num;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>上面的代码中存在全局的变量num,但是在块级作用域内使用了let又声明了一个局部的变量num,导致后面的num绑定到这个块级作用域，所以在let声明变量前，对num进行赋值操作会出错。</p><p>所以说，只要在块级作用域中存在let命令，它所声明的变量就被“绑定”在这个区域中，不会再受外部的影响。</p><p>关于这一点，ES6明确规定，<strong>如果在区域中存在let命令，那么在这个区域中通过let命令所声明的变量从一开始就生成了一个封闭的作用域，只要在声明变量前使用，就会出错</strong>。</p><p>所以说，<strong>所谓的“暂时性死区”指的就是，在代码块内，使用let命令声明变量之前，该变量都是不可用的。</strong></p><h4 id="1-4-3-不允许重复声明"><a href="#1-4-3-不允许重复声明" class="headerlink" title="1.4.3  不允许重复声明"></a>1.4.3  不允许重复声明</h4><p>let 不允许在相同的作用域内重复声明一个变量，</p><p>如果使用var声明变量是没有这个限制的。</p><p>如下面代码所示：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> num = <span class="number">12</span>;</span><br><span class="line">            <span class="keyword">var</span> num = <span class="number">20</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">test</span>()</span><br></pre></td></tr></table></figure><p>以上代码没有问题，但是如果将var换成let,就会出错。如下代码所示：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="keyword">let</span> num = <span class="number">12</span>;</span><br><span class="line">           <span class="keyword">let</span> num = <span class="number">20</span>;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="title function_">test</span>()</span><br></pre></td></tr></table></figure><p>当然，以下的写法也是错误的。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> num = <span class="number">12</span>;</span><br><span class="line">          <span class="keyword">let</span> num = <span class="number">20</span>;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">test</span>()</span><br></pre></td></tr></table></figure><p>同时，还需要注意，不能在函数内部声明的变量与参数同名，如下所示：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">num</span>) &#123;</span><br><span class="line">         <span class="keyword">let</span> num = <span class="number">20</span>;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title function_">test</span>(<span class="number">30</span>)</span><br></pre></td></tr></table></figure><h2 id="2、const命令"><a href="#2、const命令" class="headerlink" title="2、const命令"></a>2、const命令</h2><h3 id="2-1-基本用法"><a href="#2-1-基本用法" class="headerlink" title="2.1 基本用法"></a>2.1 基本用法</h3><p>const用来声明常量，常量指的就是一旦声明，其值是不能被修改的。</p><p>这一点与变量是不一样的，而变量指的是在程序运行中，是可以改变的量。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">12</span>;</span><br><span class="line">      num = <span class="number">30</span>;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br></pre></td></tr></table></figure><p>以上的代码输出结果为:30</p><p>但是通过const命令声明的常量，其值是不允许被修改的。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span>;</span><br><span class="line"><span class="variable constant_">PI</span> = <span class="number">3.15</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">PI</span>)</span><br></pre></td></tr></table></figure><p>以上代码会出错。</p><p>在以后的编程中，如果确定某个值后期不需要更改，就可以定义成常量，例如:PI,它的取值就是3.14，后面不会改变。所以可以将其定义为常量。</p><h3 id="2-2-const命令注意事项"><a href="#2-2-const命令注意事项" class="headerlink" title="2.2 const命令注意事项"></a>2.2 const命令注意事项</h3><h4 id="2-2-1-不存在常量提升"><a href="#2-2-1-不存在常量提升" class="headerlink" title="2.2.1 不存在常量提升"></a>2.2.1 不存在常量提升</h4><p>以下代码是错误的</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">PI</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-只在声明的块级作用域内有效"><a href="#2-2-2-只在声明的块级作用域内有效" class="headerlink" title="2.2.2 只在声明的块级作用域内有效"></a>2.2.2 只在声明的块级作用域内有效</h4><p>const命令的作用域与let命令相同：只在声明的块级作用域内有效</p><p>如下代码所示：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">PI</span>);</span><br></pre></td></tr></table></figure><p>以上代码会出错</p><h4 id="2-2-3-暂时性死区"><a href="#2-2-3-暂时性死区" class="headerlink" title="2.2.3 暂时性死区"></a>2.2.3 暂时性死区</h4><p>const命令与let指令一样，都有暂时性死区的问题，如下代码所示：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">PI</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码会出错</p><h4 id="2-2-4-不允许重复声明"><a href="#2-2-4-不允许重复声明" class="headerlink" title="2.2.4 不允许重复声明"></a>2.2.4 不允许重复声明</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">PI</span>);</span><br></pre></td></tr></table></figure><p>以上代码会出错</p><h4 id="2-2-5-常量声明必须赋值"><a href="#2-2-5-常量声明必须赋值" class="headerlink" title="2.2.5 常量声明必须赋值"></a>2.2.5 常量声明必须赋值</h4><p>使用const声明常量，必须立即进行初始化赋值，不能后面进行赋值。</p><p>如下代码所示：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span>;</span><br><span class="line"><span class="variable constant_">PI</span> = <span class="number">3.14</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">PI</span>);</span><br></pre></td></tr></table></figure><p>以上代码会出错</p><h2 id="3、解构赋值"><a href="#3、解构赋值" class="headerlink" title="3、解构赋值"></a>3、解构赋值</h2><h3 id="3-1、数组解构赋值基本用法"><a href="#3-1、数组解构赋值基本用法" class="headerlink" title="3.1、数组解构赋值基本用法"></a>3.1、数组解构赋值基本用法</h3><p>所谓的解构赋值，就是从数组或者是对象中提取出对应的值，然后将提取的值赋值给变量。</p><p>首先通过一个案例，来看一下以前是怎样实现的。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">    <span class="keyword">let</span> num1 = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> num2 = arr[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">let</span> num3 = arr[<span class="number">2</span>];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num1, num2, num3);</span><br></pre></td></tr></table></figure><p>在这里定义了一个数组arr,并且进行了初始化，下面紧跟着通过下标的方式获取数组中的值，然后赋值给对应的变量。</p><p>虽然这种方式可以实现，但是相对来说比较麻烦，ES6中提供了解构赋值的方式，代码如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> [num1, num2, num3] = arr;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1, num2, num3);</span><br></pre></td></tr></table></figure><p>将arr数组中的值取出来分别赋值给了，num1,num2和num3.</p><p>通过观察，发现解构赋值等号两侧的结构是类似。</p><p>下面再看一个案例：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [&#123;</span><br><span class="line">               <span class="attr">userName</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">               <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">           &#125;,</span><br><span class="line">           [<span class="number">1</span>, <span class="number">3</span>], <span class="number">6</span></span><br><span class="line">       ];</span><br><span class="line">       <span class="keyword">let</span> [&#123;</span><br><span class="line">               userName,</span><br><span class="line">               age</span><br><span class="line">           &#125;,</span><br><span class="line">           [num1, num2], num3</span><br><span class="line">       ] = arr;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(userName, age, num1, num2, num3);</span><br></pre></td></tr></table></figure><p>定义了一个arr数组，并且进行了初始化，arr数组中有对象，数组和数值。</p><p>现在通过解构赋值的方式，将数组中的值取出来赋给对应的变量，所以等号左侧的结构和数组arr的结构是一样的。</p><p>但是，如果不想获取具体的值，而是获取arr数组存储的json对象，数组，那么应该怎样写呢？</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [&#123;</span><br><span class="line">              <span class="attr">userName</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">              <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">          &#125;,</span><br><span class="line">          [<span class="number">1</span>, <span class="number">3</span>], <span class="number">6</span></span><br><span class="line">      ];</span><br><span class="line">      <span class="keyword">let</span> [jsonResult, array, num] = arr;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(jsonResult, array, num);</span><br></pre></td></tr></table></figure><h3 id="3-2、注意事项"><a href="#3-2、注意事项" class="headerlink" title="3.2、注意事项"></a>3.2、注意事项</h3><h5 id="3-2-1-如果解析不成功，对应的值会为undefined"><a href="#3-2-1-如果解析不成功，对应的值会为undefined" class="headerlink" title="3.2.1  如果解析不成功，对应的值会为undefined."></a>3.2.1  如果解析不成功，对应的值会为undefined.</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [num1, num2] = [<span class="number">6</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1, num2);</span><br></pre></td></tr></table></figure><p>以上的代码中，num1的值为6，num2的值为undefined.</p><h5 id="3-2-2-不完全解构的情况"><a href="#3-2-2-不完全解构的情况" class="headerlink" title="3.2.2  不完全解构的情况"></a>3.2.2  不完全解构的情况</h5><p>所谓的不完全解构，表示等号左边只匹配右边数组的一部分。</p><p>代码如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [num1, num2] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1, num2);</span><br></pre></td></tr></table></figure><p>以上代码的执行结果：num1&#x3D;1,num2 &#x3D; 2</p><p>也就是只取了数组中的前两个值。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">     <span class="comment">// 如果只取第一个值呢？</span></span><br><span class="line">    <span class="keyword">let</span> [num1] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//只取第二个值呢？</span></span><br><span class="line"><span class="keyword">let</span> [, num, ] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只取第三个值呢？</span></span><br><span class="line"><span class="keyword">let</span> [, , num] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br></pre></td></tr></table></figure><h3 id="3-4、对象解构赋值基本使用"><a href="#3-4、对象解构赋值基本使用" class="headerlink" title="3.4、对象解构赋值基本使用"></a>3.4、对象解构赋值基本使用</h3><p>解构不仅可以用于数组，还可以用于对象。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">         userName,</span><br><span class="line">         userAge</span><br><span class="line">     &#125; = &#123;</span><br><span class="line">         <span class="attr">userName</span>: <span class="string">&#x27;ls&#x27;</span>,</span><br><span class="line">         <span class="attr">userAge</span>: <span class="number">20</span></span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(userName, userAge);</span><br></pre></td></tr></table></figure><p>在对 对象进行解构赋值的时候，一定要注意：变量名必须与属性的名称一致，才能够取到正确的值。</p><p>如下所示：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">    name,</span><br><span class="line">    age</span><br><span class="line">&#125; = &#123;</span><br><span class="line">    <span class="attr">userName</span>: <span class="string">&#x27;ls&#x27;</span>,</span><br><span class="line">    <span class="attr">userAge</span>: <span class="number">20</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name, age);</span><br></pre></td></tr></table></figure><p>输出的结果都是undefined.</p><p>那么应该怎样解决上面的问题呢？</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">          <span class="attr">userName</span>: name,</span><br><span class="line">          <span class="attr">userAge</span>: age</span><br><span class="line">      &#125; = &#123;</span><br><span class="line">          <span class="attr">userName</span>: <span class="string">&#x27;ls&#x27;</span>,</span><br><span class="line">          <span class="attr">userAge</span>: <span class="number">20</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age);</span><br></pre></td></tr></table></figure><p>通过以上的代码解决了对应的问题，那么这种方式的原理是什么呢？</p><p><strong>先找到同名属性，然后再赋值给对应的变量。</strong></p><p>把上面的代码，改造成如下的形式，更容易理解：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">userName</span>: <span class="string">&#x27;ls&#x27;</span>,</span><br><span class="line">    <span class="attr">userAge</span>: <span class="number">21</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">    <span class="attr">userName</span>: name,</span><br><span class="line">    <span class="attr">userAge</span>: age</span><br><span class="line">&#125; = obj;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name, age)</span><br></pre></td></tr></table></figure><p>如果按照ES5的方式：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = obj.<span class="property">userName</span></span><br><span class="line"><span class="keyword">let</span> age = obj.<span class="property">userAge</span></span><br></pre></td></tr></table></figure><h3 id="3-5、对象解构赋值注意事项"><a href="#3-5、对象解构赋值注意事项" class="headerlink" title="3.5、对象解构赋值注意事项"></a>3.5、对象解构赋值注意事项</h3><h4 id="3-5-1-默认解构"><a href="#3-5-1-默认解构" class="headerlink" title="3.5.1 默认解构"></a>3.5.1 默认解构</h4><p>所谓的默认解构，指的是取出来值就用取出来的值，如果取不出来就用默认的值。</p><p>演示默认解构之前，先来看如下的代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">    name,</span><br><span class="line">    age</span><br><span class="line">&#125; = obj;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name, age);</span><br></pre></td></tr></table></figure><p>你想一下输出结果是什么呢？</p><p>输出的结果是：zs  undefined</p><p>也就是name变量的值为:‘zs’, age变量的值为:’undefined’.</p><p>由于没有给age变量赋值所以该变量的值为’undefined’.</p><p>现在修改一下上面的程序</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">    name,</span><br><span class="line">    age = <span class="number">20</span></span><br><span class="line">&#125; = obj;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name, age);</span><br></pre></td></tr></table></figure><p>现在给age这个变量赋了一个默认值为20，所以输出的结果为：zs 20</p><p>这也就是刚才所说到的默认解构，也就是取出来值就用取出来的值，如果取不出来就用默认的值。</p><p>现在再问你一个问题：如果在对应中有age属性，那么对应的等号左侧的age这个变量的值是多少呢?</p><p>如下代码所示：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">26</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">    name,</span><br><span class="line">    age = <span class="number">20</span></span><br><span class="line">&#125; = obj;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name, age);</span><br></pre></td></tr></table></figure><p>输出的结果为: zs  26</p><p>这就是，取出来值就用取出来的，取不出来就用默认值。</p><h4 id="3-5-2-嵌套结构对象的解构"><a href="#3-5-2-嵌套结构对象的解构" class="headerlink" title="3.5.2  嵌套结构对象的解构"></a>3.5.2  嵌套结构对象的解构</h4><p>解构也可以用于对嵌套结构的对象，如下代码所示：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">arr</span>: [</span><br><span class="line">        <span class="string">&quot;Hello&quot;</span>, &#123;</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&#x27;World&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">    <span class="attr">arr</span>: [str, &#123;</span><br><span class="line">        msg</span><br><span class="line">    &#125;]</span><br><span class="line">&#125; = obj;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str, msg);</span><br></pre></td></tr></table></figure><p>在上面的代码中要注意的是：arr只是一种标志或者是一种模式，不是变量，因此不会被赋值。</p><p>再看一个案例:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">local</span>: &#123;</span><br><span class="line">        <span class="attr">start</span>: &#123;</span><br><span class="line">            <span class="attr">x</span>: <span class="number">20</span>,</span><br><span class="line">            <span class="attr">y</span>: <span class="number">30</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">    <span class="attr">local</span>: &#123;</span><br><span class="line">        <span class="attr">start</span>: &#123;</span><br><span class="line">            x,</span><br><span class="line">            y</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; = obj;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x, y);</span><br></pre></td></tr></table></figure><p>在该案例中创建了一个obj对象，在该对象中又嵌套了一个local对象，该对象可以认为是一个表示位置的坐标对象，在该对象中又嵌套了一个start对象，start对象可以认为是一个位置的起始坐标点，所以在该对象中有两个属性为x,y，分别表示横坐标和纵坐标。</p><p>所以说obj对象是一个比较复杂的嵌套结构的对象，现在对该对象进行解构，那么在等号的左侧的结构要和obj对象的结构一致，最后输出打印x,y的值。</p><p>问题：如果现在要打印等号左侧的local和start，那么输出的结果是什么呢？</p><p>会出错，原因就是在等号的左侧，只有x和y是变量，local和start都是一种标识，一种模式，所以不会被赋值。</p><h3 id="3-6、字符串的解构赋值"><a href="#3-6、字符串的解构赋值" class="headerlink" title="3.6、字符串的解构赋值"></a>3.6、字符串的解构赋值</h3><p>字符串也可以进行解构赋值，这是因为字符串被转换成了一个类似于数组的对象。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c, d, e, f] = <span class="string">&#x27;itcast&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c, d, e, f);</span><br></pre></td></tr></table></figure><p>类似于数组的对象都有length属性，因此也可以对这个属性进行解构赋值。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">    <span class="attr">length</span>: len</span><br><span class="line">&#125; = <span class="string">&#x27;itcast&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;len=&#x27;</span>, len);</span><br></pre></td></tr></table></figure><h3 id="3-7、函数参数的解构赋值"><a href="#3-7、函数参数的解构赋值" class="headerlink" title="3.7、函数参数的解构赋值"></a>3.7、函数参数的解构赋值</h3><p>函数的参数也能够进行解构的赋值，如下代码所示：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">[x, y]</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">test</span>([<span class="number">3</span>, <span class="number">6</span>]));</span><br></pre></td></tr></table></figure><p>上面的代码中，函数test的参数不是一个数组，而是通过解构得到的变量x和y.</p><p>函数的参数的解构也可以使用默认的值。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">    x = <span class="number">0</span>,</span></span><br><span class="line"><span class="params">    y = <span class="number">0</span></span></span><br><span class="line"><span class="params">&#125; = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [x, y];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">test</span>(&#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">6</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>当然可以进行如下的调用</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(&#123;<span class="attr">x</span>:<span class="number">3</span>&#125;)</span><br><span class="line"><span class="title function_">test</span>(&#123;&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-8、解构赋值的好处"><a href="#3-8、解构赋值的好处" class="headerlink" title="3.8、解构赋值的好处"></a>3.8、解构赋值的好处</h3><h4 id="3-8-1-交换变量的值"><a href="#3-8-1-交换变量的值" class="headerlink" title="3.8.1 交换变量的值"></a>3.8.1 交换变量的值</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> num2 = <span class="number">6</span>;</span><br><span class="line">[num1, num2] = [num2, num1];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1, num2);</span><br></pre></td></tr></table></figure><h4 id="3-8-2-函数可以返回多个值"><a href="#3-8-2-函数可以返回多个值" class="headerlink" title="3.8.2 函数可以返回多个值"></a>3.8.2 函数可以返回多个值</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> [a, b, c] = <span class="title function_">test</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c);</span><br></pre></td></tr></table></figure><p>在上面的代码中，返回了三个值，当然在实际的开发过程中，你可以根据自己的实际情况确定返回的数据的个数。</p><p>如果，我只想接收返回中的一部分值呢？</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接收第一个值</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> [a] = <span class="title function_">test</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接收前两个值</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> [a, b] = <span class="title function_">test</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b);</span><br><span class="line">        <span class="comment">// 只接收第一个值和第三个值。</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> [a, , b] = <span class="title function_">test</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b);</span><br></pre></td></tr></table></figure><h4 id="3-8-3-函数返回一个对象"><a href="#3-8-3-函数返回一个对象" class="headerlink" title="3.8.3 函数返回一个对象"></a>3.8.3 函数返回一个对象</h4><p>可以将函数返回的多个值封装到一个对象中。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">num1</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">num2</span>: <span class="number">6</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">    num1,</span><br><span class="line">    num2</span><br><span class="line">&#125; = <span class="title function_">test</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1, num2);</span><br></pre></td></tr></table></figure><h4 id="3-8-4-提取JSON对象中的数据"><a href="#3-8-4-提取JSON对象中的数据" class="headerlink" title="3.8.4 提取JSON对象中的数据"></a>3.8.4 提取JSON对象中的数据</h4><p>解构赋值对提取JSON对象中的数据也非常有用。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> userData = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">12</span>,</span><br><span class="line">    <span class="attr">userName</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="attr">userAge</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">    id,</span><br><span class="line">    userName,</span><br><span class="line">    userAge</span><br><span class="line">&#125; = userData;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(id, userName, userAge);</span><br></pre></td></tr></table></figure><p>以上的代码可以快速提取JSON中的数据。</p><h2 id="4、扩展运算符与rest运算符"><a href="#4、扩展运算符与rest运算符" class="headerlink" title="4、扩展运算符与rest运算符"></a>4、扩展运算符与<code>rest</code>运算符</h2><h3 id="4-1-扩展运算符"><a href="#4-1-扩展运算符" class="headerlink" title="4.1 扩展运算符"></a>4.1 扩展运算符</h3><p>扩展运算符的表现形式是三个点（…）,可以将一个数组转换为用逗号分隔的序列。</p><p>下面通过一个案例看一下基本的应用，案例的要求是将两个数组合并为一个数组。</p><p>先采用传统的做法：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> arr3 = [].<span class="title function_">concat</span>(arr1, arr2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3);</span><br></pre></td></tr></table></figure><p>下面使用扩展运算符来完成上面的案例</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> arr3 = [...arr1, ...arr2];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3);</span><br></pre></td></tr></table></figure><p>通过以上的代码，发现也实现了我们最终想要的结果，<code>...arr1</code>是将 <code>arr1</code>这个数组中的所有的元素取出来，然后组成 ‘1,2,3’这个形式，放到 <code>...arr1</code>这个位置，同理arr2也是一样。</p><p>通过扩展运算符实现起来发现更加的简单。</p><p>当然我们可以将上面使用扩展运算符实现的案例，转成ES5看一下。</p><p>转成ES5的代码如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">var</span> arr3 = [].<span class="title function_">concat</span>(arr1, arr2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3);</span><br></pre></td></tr></table></figure><p>发现和我们最开始实现的是一样的。</p><h3 id="4-2-扩展运算符应用场景"><a href="#4-2-扩展运算符应用场景" class="headerlink" title="4.2 扩展运算符应用场景"></a>4.2 扩展运算符应用场景</h3><h4 id="4-2-1-代替数组中的apply方法"><a href="#4-2-1-代替数组中的apply方法" class="headerlink" title="4.2.1 代替数组中的apply方法"></a>4.2.1 代替数组中的apply方法</h4><p>现在求数组中的最大值。</p><p>求最大值，我们想到的第一种方法就是：</p><p>通过循环的方式来完成，如下面的代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>, <span class="number">23</span>, <span class="number">11</span>, <span class="number">56</span>];</span><br><span class="line"><span class="keyword">let</span> max = arr[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; arr.<span class="property">length</span>; index++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[index] &gt; max) &#123;</span><br><span class="line">        max = arr[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;max=&quot;</span>, max);</span><br></pre></td></tr></table></figure><p>这种方式非常麻烦，所以可以使用Math对象中的max方法来完成.</p><p>先来看一下Math.max的基本用法</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">1</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">67</span>));</span><br></pre></td></tr></table></figure><p>如果是用Math.max来计算数组中的最大值。（ES5的写法）</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>, <span class="number">23</span>, <span class="number">11</span>, <span class="number">56</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, arr));</span><br></pre></td></tr></table></figure><p>虽然可以使用<code>Math.max.apply</code>来实现，但是感觉还是很麻烦，</p><p>这里就可以使用扩展运算符</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>, <span class="number">23</span>, <span class="number">11</span>, <span class="number">56</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(...arr));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上面的代码中（不管ES5还是ES6），由于JavaScript不提供求数组中最大值的函数，所以只能将数组转换成一个参数的列表，然后再进行相应的求值。</p><h4 id="4-2-2-用于函数调用"><a href="#4-2-2-用于函数调用" class="headerlink" title="4.2.2 用于函数调用"></a>4.2.2 用于函数调用</h4><p>在函数调用的时候，需要进行参数的传递，在某些情况下，通过扩展运算符，更有利于参数的传递。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> array = [<span class="number">23</span>, <span class="number">56</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">test</span>(...array));</span><br></pre></td></tr></table></figure><p>通过扩展运算符，将array这个数组中的值取出来，然后23赋值给了num1,56赋值给了num2.</p><p>下面，再看一个使用扩展运算符处理函数参数的案例。</p><p>把一组数据添加到数组中。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">array, ...items</span>) &#123;</span><br><span class="line">    array.<span class="title function_">push</span>(...items);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(array)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> array = [<span class="number">23</span>, <span class="number">56</span>];</span><br><span class="line"><span class="title function_">test</span>(array, <span class="number">90</span>, <span class="number">78</span>, <span class="number">98</span>);</span><br></pre></td></tr></table></figure><p>test这个函数的作用是：把90,78,98这三个数添加到array这个数组中，</p><p>在这里要注意的是：90,78,98 这三个数据给了items这个参数，这里我们用到了后面所讲解的rest参数，所以items这个参数实际上是一个数组，然后在test这个函数体内，又通过扩展运算符将items这个数组中的数据取出来给了array这个数组。</p><h3 id="4-3-rest运算符"><a href="#4-3-rest运算符" class="headerlink" title="4.3 rest运算符"></a>4.3 <code>rest</code>运算符</h3><h4 id="4-3-1-rest参数基本使用"><a href="#4-3-1-rest参数基本使用" class="headerlink" title="4.3.1 rest参数基本使用"></a>4.3.1 rest参数基本使用</h4><p>在<code>ES6</code>中引入了rest参数，形式为”…变量名”，用于获取函数中的多余参数，这样就不需要使用arguments对象了。rest参数搭配的变量是一个数组。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">s, num1, num2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> s + (num1 + num2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="string">&#x27;+&#x27;</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br></pre></td></tr></table></figure><p>在上面定义的函数中，传递了三个参数，第一个参数：是一个‘+’号，后面两个参数，表示进行加法运算的数据。</p><p>但是，问题是如果参与运算的数据比较多，那么定义的参数也就比较多，这样比较麻烦。这时可以使用rest参数形式。</p><p>如下所示：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">...values</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(values);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>通过以上的代码输出发现，values这个参数是一个数组，所传递的数据都存储到这个数组中，下面可以将数据从这个数组中取出来，进行运算。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">...values</span>) &#123;</span><br><span class="line">    <span class="comment">// console.log(values);</span></span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; values.<span class="property">length</span>; index++) &#123;</span><br><span class="line">        sum += values[index];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>));</span><br></pre></td></tr></table></figure><p>上面的循环方式，使用的是传统的模式，也可以使用 <code>forEach</code>的形式来进行循环，如下所示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">...values</span>) &#123;</span><br><span class="line">     <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">     values.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">         sum += item</span><br><span class="line">     &#125;)</span><br><span class="line">     <span class="keyword">return</span> sum;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>));</span><br></pre></td></tr></table></figure><p>下面我们再来看一个<code>rest</code>运算符的基本使用</p><p>解构会将相同数据结构对应的值赋给对应的变量，但是当我们想将其中的一部分值统一赋值给一个变量的时候，可以使用<code>rest</code>运算符。</p><p>如下代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">    <span class="keyword">let</span> [arr1, ...arr2] = arr; <span class="comment">//进行解构处理</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr1); <span class="comment">// 1</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr2); <span class="comment">// [2,3,4,5,6]</span></span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在上面的代码中，<code>arr</code>经过解构后，变量<code>arr1</code>的值为1，而通过<code>rest</code>运算符会将后面所有的值都统一赋值给<code>arr2</code>变量，得到的<code>arr2</code>为一个数组。</p><h4 id="4-3-2-rest参数的好处"><a href="#4-3-2-rest参数的好处" class="headerlink" title="4.3.2 rest参数的好处"></a>4.3.2 rest参数的好处</h4><p>在以前的案例中，我们都是使用<code>arguments</code>.</p><p>那么这种用法比<code>arguments</code> 有什么样的好处呢？</p><p>对数据进行排序，使用的是 <code>arguments</code>。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sortFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>).<span class="title function_">sort</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sortFunc</span>(<span class="number">23</span>, <span class="number">12</span>, <span class="number">67</span>));</span><br></pre></td></tr></table></figure><p>下面使用 rest的方式</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sortFunc</span>(<span class="params">...values</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> values.<span class="title function_">sort</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sortFunc</span>(<span class="number">23</span>, <span class="number">12</span>, <span class="number">67</span>));</span><br></pre></td></tr></table></figure><p>因为values这个参数本身就是数组，所以可以直接使用sort函数，进行数据的排序操作。</p><p>通过以上的对比，发现使用rest这种参数的写法更简洁。</p><h4 id="4-3-3-rest参数注意问题"><a href="#4-3-3-rest参数注意问题" class="headerlink" title="4.3.3 rest参数注意问题"></a>4.3.3 rest参数注意问题</h4><p>在使用rest这种参数的时候，一定要注意： rest参数之后不能再有其他的参数，也就是说rest参数只能是最后一个参数，否则会报错。</p><p>如下代码所示：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a, ...b, c</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(<span class="number">1</span>, <span class="number">23</span>, <span class="number">2</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>以上代码会出错，要求rest参数只能是最后一个参数。</p><p>通过前面对扩展运算符和<code>rest</code>运算符的讲解，我们知道两者是互为逆运算，扩展运算符是将数组分隔成独立的序列，而<code>rest</code>运算符是将独立的序列合并成一个数组。</p><p>既然两者都是通过3个点(…)来表示，那么如何判断这3个点属于哪一种运算符呢？我们可以遵循如下的规则：</p><p>第一：当3个点(…)出现在函数的形参上或者出现在赋值号的左侧，则表示的就是<code>rest</code>运算符</p><p>第二：当3个点(…)出现在函数的实参上或者出现在赋值号的右侧，则表示它为扩展运算符。</p><h2 id="5、什么是箭头函数"><a href="#5、什么是箭头函数" class="headerlink" title="5、什么是箭头函数"></a>5、什么是箭头函数</h2><h3 id="5-1-箭头函数基本使用"><a href="#5-1-箭头函数基本使用" class="headerlink" title="5.1 箭头函数基本使用"></a>5.1 箭头函数基本使用</h3><p>在ES6中允许使用 “箭头”（&#x3D;&gt;）来定义函数。</p><p>先使用传统的方式定义一个函数。</p><p>示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用传统方式定义函数</span></span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">function</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f</span>(<span class="number">3</span>, <span class="number">6</span>));</span><br></pre></td></tr></table></figure><p>通过上面的代码，可以发现传统方式来定义函数的时候，比较麻烦。</p><p>箭头函数的使用</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">f</span> = (<span class="params">x, y</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f</span>(<span class="number">9</span>, <span class="number">8</span>));</span><br></pre></td></tr></table></figure><p>在调用f这个函数的时候，将9和8传递给了x,y这两个参数，然后进行加法运算。</p><p>如果参数只有一个，可以省略小括号。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">f</span> = num =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> num / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f</span>(<span class="number">6</span>));</span><br></pre></td></tr></table></figure><p>如果没有参数，只需要写一对小括号就可以。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">f</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">9</span> / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f</span>());</span><br></pre></td></tr></table></figure><p>上面我们写的代码中，发现函数体中只有一条语句，那么这时是可以省略大括号的。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">f</span> = (<span class="params">x, y</span>) =&gt; x + y;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f</span>(<span class="number">3</span>, <span class="number">6</span>));</span><br></pre></td></tr></table></figure><p>把上面的代码转换成ES5的写法，发现和我们前面写的代码是一样的。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f</span>(<span class="number">3</span>, <span class="number">6</span>));</span><br></pre></td></tr></table></figure><h3 id="5-2-箭头函数注意事项"><a href="#5-2-箭头函数注意事项" class="headerlink" title="5.2  箭头函数注意事项"></a>5.2  箭头函数注意事项</h3><h4 id="5-2-1-直接返回对象"><a href="#5-2-1-直接返回对象" class="headerlink" title="5.2.1 直接返回对象"></a>5.2.1 直接返回对象</h4><p>如果希望箭头函数<strong>直接</strong>返回一个对象，应该怎样写呢？</p><p>你可能认为很简单，可以采用如下的写法</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">f</span> = (<span class="params">id, name</span>) =&gt; &#123;</span><br><span class="line">    <span class="attr">id</span>: id,</span><br><span class="line">    <span class="attr">userName</span>: name</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f</span>(<span class="number">1</span>, <span class="string">&#x27;zs&#x27;</span>));</span><br></pre></td></tr></table></figure><p>但是上面的写法是错误的，因为这时大括号被解释为代码块，解决的办法是：在对象外面加上小括号,</p><p>所以，正确的写法如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">f</span> = (<span class="params">id, name</span>) =&gt; (&#123;</span><br><span class="line">    <span class="attr">id</span>: id,</span><br><span class="line">    <span class="attr">userName</span>: name</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f</span>(<span class="number">1</span>, <span class="string">&#x27;zs&#x27;</span>));</span><br></pre></td></tr></table></figure><p>通过打印，发现输出的是一个对象。</p><p>当然也可以采用如下的写法</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">f</span> = (<span class="params">id, name</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">id</span>: id,</span><br><span class="line">        <span class="attr">userName</span>: name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f</span>(<span class="number">1</span>, <span class="string">&#x27;zs&#x27;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-2-2-箭头函数中this的问题"><a href="#5-2-2-箭头函数中this的问题" class="headerlink" title="5.2.2 箭头函数中this的问题"></a>5.2.2 箭头函数中this的问题</h4><p>下面定义一个对象，来理解this的应用。</p><p>看一下，如下代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">userName</span>: <span class="string">&#x27;ls&#x27;</span>,</span><br><span class="line">    <span class="title function_">getUserName</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">userName</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="title function_">getUserName</span>();</span><br></pre></td></tr></table></figure><p>以上代码执行的结果为：’ls’,并且在该程序中<code>this</code> 为当前的person对象。</p><p>现在，将上面的代码修改一下，要求延迟1秒钟以后，再输出用户名的名称。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">userName</span>: <span class="string">&#x27;ls&#x27;</span>,</span><br><span class="line">    <span class="title function_">getUserName</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">userName</span>)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="title function_">getUserName</span>();</span><br></pre></td></tr></table></figure><p>上面的输出结果为：<code>undefined</code>，因为在setTimeout中this指的是window,而不是person对象。</p><p>为了解决上面的问题，可以将代码进行如下的修改：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">userName</span>: <span class="string">&#x27;ls&#x27;</span>,</span><br><span class="line">    <span class="title function_">getUserName</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> that = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(that.<span class="property">userName</span>)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="title function_">getUserName</span>();</span><br></pre></td></tr></table></figure><p>在进入setTimeout这个方法之前，提前将this赋值给that变量，然后在setTimeout中使用that,那么这时that指的就是person对象。</p><p>上面的解决方法比较麻烦，可以修改成箭头函数的形式，代码如下所示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">userName</span>: <span class="string">&#x27;wangwu&#x27;</span>,</span><br><span class="line">    <span class="title function_">getUserName</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">userName</span>);</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="title function_">getUserName</span>();</span><br></pre></td></tr></table></figure><p>通过上面的代码，可以发现在箭头函数中直接使用this是没有问题的。</p><p>你可以这样理解：<strong>在箭头函数中是没有this的，如果在箭头函数中使用了this,那么实际上使用的是外层代码块的this.  箭头函数不会创建自己的<code>this,它只会从自己的作用域链的上一层继承this</code></strong></p><p>或者通俗的理解：<strong>找出定义箭头函数的上下文（即包含箭头函数最近的函数或者是对象），那么上下文所处的父上下文即为this.</strong></p><p>那么在我们这个案例中，<code>setTimeout</code>函数中使用了箭头函数，箭头函数中用了<code>this,</code>而这时<code>this</code>指的是外层代码块也就是<code>person</code> ,所以箭头函数中使用的this指的就是<code>person</code>(包含箭头函数最近的函数是<code>setTimeout</code>,那么包含<code>setTimeout</code>这个函数的最近的函数或者是对象是谁呢？对了，是<code>getUserName</code>这个函数，而<code>getUserName</code>这个函数是属于哪个对象呢？是<code>person</code>,所以<code>this</code>为<code>person</code>)</p><p>下面，再看一个案例：（可以将下面的代码转换成ES5的代码）</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">userName</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="attr">getUserName</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">userName</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="title function_">getUserName</span>();</span><br></pre></td></tr></table></figure><p>输出结果为:undefined</p><p>因为这时包含<code>getUserName</code>这个箭头函数最近的对象是person(这里也就是说<code>getUserName</code>这个箭头函数的上下文为<code>person</code>),那么<code>person</code>对象所处的父上下文(也就是包含person这个对象最近的对象)，是谁呢？对了，就是<code>window</code>。</p><p>下面再看一个案例：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">userName</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="title function_">getUserName</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">userName</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="title function_">getUserName</span>()();</span><br></pre></td></tr></table></figure><p>根据上面总结的规律是，这段代码输出的结果是：’zhangsan’.</p><p>在这里还需要注意一个问题就是：</p><p>由于箭头函数没有自己的this,所以不能使用 <code>call()</code>、<code>apply()</code>、<code>bind()</code>这些方法来改变this的指向。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> adder = &#123;</span><br><span class="line">        <span class="attr">base</span>: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">        <span class="attr">add</span>: <span class="keyword">function</span>(<span class="params">a</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="title function_">f</span> = v =&gt; v + <span class="variable language_">this</span>.<span class="property">base</span>;</span><br><span class="line">            <span class="keyword">let</span> b = &#123;</span><br><span class="line">                <span class="attr">base</span>: <span class="number">3</span></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> f.<span class="title function_">call</span>(b, a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(adder.<span class="title function_">add</span>(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>上面代码执行的结果为:2</p><p>也就是说，箭头函数不能使用<code>call( )</code>来改变this的指向，本意是想让this指向b这个对象，但是实际上this还是adder这个对象。</p><h4 id="5-3-3-箭头函数不适合的场景"><a href="#5-3-3-箭头函数不适合的场景" class="headerlink" title="5.3.3 箭头函数不适合的场景"></a>5.3.3 箭头函数不适合的场景</h4><p>第一：不能作为构造函数，不能使用<code>new</code>操作符</p><p>构造函数是通过<code>new</code>操作符生成对象实例的，生成实例的过程也是通过构造函数给实例绑定<code>this</code>的过程，而箭头函数没有自己的<code>this</code>，因此不能使用箭头函数作为构造函数。</p><p>如下代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangsan&quot;</span>); <span class="comment">//正常</span></span><br></pre></td></tr></table></figure><p>以上是我们前面经常使用的一种方式，没有问题</p><p>下面看一下使用箭头函数作为构造函数的情况</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">Person</span> = (<span class="params">name</span>) =&gt; &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">userName</span> = name;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;lisi&quot;</span>);</span><br></pre></td></tr></table></figure><p>当执行上面的程序的时候，会出现错误</p><p>第二：没有<code>prototype</code>属性</p><p>因为在箭头函数中没有<code>this</code>,也就不存在自己的作用域，因此箭头函数是没有<code>prototype</code>属性的。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">Person</span> = (<span class="params">name</span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">userName</span> = name;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>第三：不适合将原型函数定义成箭头函数</p><p>在给构造函数添加原型函数时，如果使用箭头函数，其中的<code>this</code>会指向全局作用域<code>window</code>,而不会指向构造函数。</p><p>因此并不会访问到构造函数本身，也就无法访问到实例属性，失去了原型函数的意义。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">userName</span> = name;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHello</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// window</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">userName</span>); <span class="comment">// undefined</span></span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">     p.<span class="title function_">sayHello</span>();</span><br></pre></td></tr></table></figure><h2 id="6、对象的扩展"><a href="#6、对象的扩展" class="headerlink" title="6、对象的扩展"></a>6、对象的扩展</h2><h3 id="1、属性与方法的简洁表示方式"><a href="#1、属性与方法的简洁表示方式" class="headerlink" title="1、属性与方法的简洁表示方式"></a>1、属性与方法的简洁表示方式</h3><p>以前创建对象的方式：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> userName = <span class="string">&#x27;zhangsan&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> userAge = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">userName</span>: userName,</span><br><span class="line">    <span class="attr">userAge</span>: userAge</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br></pre></td></tr></table></figure><p>通过上面的代码，可以发现对象中的属性名和变量名是一样的，像这种情况，在ES6中是可以简化如下形式：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> userName = <span class="string">&#x27;zhangsan&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> userAge = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    userName,</span><br><span class="line">    userAge</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br></pre></td></tr></table></figure><p>通过以上代码可以发现：在ES6中，如果对象的属性名和变量名是一样的，那么两者可以合二为一。</p><p>当然，除了属性可以简写，方法也可以简写，以前定义方法的形式如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> userName = <span class="string">&#x27;zhangsan&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> userAge = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    userName,</span><br><span class="line">    userAge,</span><br><span class="line">    <span class="attr">sayHello</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="title function_">sayHello</span>();</span><br></pre></td></tr></table></figure><p>在ES6中可以简化成如下的形式:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> userName = <span class="string">&#x27;zhangsan&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> userAge = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    userName,</span><br><span class="line">    userAge,</span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="title function_">sayHello</span>();</span><br></pre></td></tr></table></figure><p>所以在以后的编程中，会经常看到或者是用到这种<code>ES6</code>的表示形式。</p><h3 id="2、Object-assign-方法"><a href="#2、Object-assign-方法" class="headerlink" title="2、Object.assign( )方法"></a>2、Object.assign( )方法</h3><h4 id="2-1-基本使用"><a href="#2-1-基本使用" class="headerlink" title="2.1 基本使用"></a>2.1 基本使用</h4><p>现在，有一个需求，将一个对象的属性拷贝给另外一个对象，应该怎样处理？</p><p>你可能会说，很简单，可以通过循环的方式来来实现。</p><p>如下代码所示：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> obj3 = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj1) &#123;</span><br><span class="line">    obj3[key] = obj1[key];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj2) &#123;</span><br><span class="line">    obj3[key] = obj2[key];</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;obj3=&#x27;</span>, obj3);</span><br></pre></td></tr></table></figure><p>虽然通过循环的方式，可以实现对象属性的拷贝，但是很麻烦。下面讲解一个简单的方法：<code>Object.assign( )</code>方法.</p><p><code>Object.assign( )</code>方法用来源对象的所有可枚举的属性复制到目标对象。该方法至少需要两个对象作为参数，第一个参数是目标对象，后面的参数都是源对象。只要有一个参数不是对象，就会抛出异常。</p><p>示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> source = &#123;</span><br><span class="line">    <span class="attr">c</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">d</span>: <span class="number">4</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(target, source);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(target);</span><br></pre></td></tr></table></figure><p>最终的结果：将source对象中的属性拷贝到target对象上。</p><p>在上面的定义中，可以看出参数不仅两个，可以有多个，但是要注意的是第一个参数一定是目标对象，下面再看一个多个参数的案例：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> source = &#123;</span><br><span class="line">    <span class="attr">c</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">d</span>: <span class="number">4</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> source1 = &#123;</span><br><span class="line">    <span class="attr">e</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">f</span>: <span class="number">6</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(target, source, source1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(target);</span><br></pre></td></tr></table></figure><p>通过上面的代码，将source和<code>source1</code>这两个对象的属性都拷贝给了target对象。</p><h4 id="2-2-深浅拷贝问题"><a href="#2-2-深浅拷贝问题" class="headerlink" title="2.2  深浅拷贝问题"></a>2.2  深浅拷贝问题</h4><p>通过<code>Object.assign( )</code>方法，实现的拷贝只拷贝了属性的值，属于浅拷贝。</p><p>如下代码所示：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">address</span>: &#123;</span><br><span class="line">        <span class="attr">city</span>: <span class="string">&#x27;北京&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(obj2, obj1);</span><br><span class="line">obj2.<span class="property">address</span>.<span class="property">city</span> = <span class="string">&quot;上海&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;obj1=&quot;</span>, obj1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;obj2=&quot;</span>, obj2);</span><br></pre></td></tr></table></figure><p>上面的代码中对<code>obj2</code>这个对象的city属性的值进行了修改，发现对应的<code>obj1</code>对象中的city属性的值也发生了改变。</p><p>但是，在某些情况下，我们不希望这样，我们希望修改一个对象的属性值时，不会影响到另外一个对象的属性值。</p><p>那么对应的要实现相应的深拷贝。</p><p>关于深拷贝，实现方式比较多，下面简单的说一种方式：(这里只是简单的模拟)</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clone</span>(<span class="params">source</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> newObj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="comment">// 由于address属性为对象，所以执行递归。</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> source[key] === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">            newObj[key] = <span class="title function_">clone</span>(source[key]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果是name属性直接赋值</span></span><br><span class="line">            newObj[key] = source[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">address</span>: &#123;</span><br><span class="line">        <span class="attr">city</span>: <span class="string">&#x27;北京&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="title function_">clone</span>(obj1);</span><br><span class="line">obj2.<span class="property">address</span>.<span class="property">city</span> = <span class="string">&quot;上海&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;obj1=&quot;</span>, obj1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;obj2=&quot;</span>, obj2);</span><br></pre></td></tr></table></figure><h4 id="2-3-注意事项"><a href="#2-3-注意事项" class="headerlink" title="2.3 注意事项"></a>2.3 注意事项</h4><p>1、如果目标对象与源对象有同名属性，那么后面的属性会覆盖前面的属性。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> source = &#123;</span><br><span class="line">    <span class="attr">b</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">d</span>: <span class="number">4</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(target, source);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(target);</span><br></pre></td></tr></table></figure><p>上面的代码，将source对象中的属性拷贝给了target对象，但是source对象中有b这个属性，而且target对象上也有b属性，那么最终的结果是:source对象中的b属性覆盖掉target对象中的b属性。</p><p>2、不可枚举的属性不会被复制。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;b&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;world&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(obj1, obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;obj1=&#x27;</span>, obj1);</span><br></pre></td></tr></table></figure><p>在上面的代码中，通过<code>Object.defineProperty()</code>方法为obj对象添加了一个属性b,这个属性的值为 ‘world’,并且指定了enumerable这个属性的值为false.也就是不可以被枚举。也就是该属性不可以通过for in来进行遍历。</p><p>最终，通过<code>Object.assign</code>这个方法进行拷贝，发现<code>obj1</code>对象中没有obj对象的b这个属性。</p><h2 id="7、Symbol"><a href="#7、Symbol" class="headerlink" title="7、Symbol"></a>7、Symbol</h2><h3 id="7-1、Symbol简介"><a href="#7-1、Symbol简介" class="headerlink" title="7.1、Symbol简介"></a>7.1、Symbol简介</h3><p>在具体讲解Symbol之前，先来看一个问题。</p><p><code>ES5</code>的对象属性名都是字符串，这样容易造成属性名的冲突。</p><p>代码如下所示：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">      <span class="attr">num</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="string">&quot;num 1&quot;</span>: <span class="number">20</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">num</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="string">&quot;num 1&quot;</span>]);</span><br></pre></td></tr></table></figure><p>通过以上的代码，可以发现在对象中定义的属性的名称本身就是字符串，而且发现“num 1”中间是有空格的，所以在访问该属性的时候，通过[ ]的形式来进行访问。</p><p>那么为什么说容易造成属性名的冲突呢？</p><p>举例说明：你用了一个别人提供的对象，但是又想为这个对象添加新的方法或者是属性，新方法或者是新属性的名称有可能与现有对象中的属性名称或者是方法的名称产生冲突。如果有一种机制，能够保证每个属性的名字都是唯一的，<strong>那么就能够从根本上防止属性名称的冲突问题</strong>。这也就是ES6引入Symbol的原因。</p><p>Symbol是一种数据类型，是JavaScript语言的第7种数据类型，前6种分别是:undefined,null,布尔值，字符串，数值和对象。</p><p>Symbol类型的值是通过Symbol函数生成的。它的值是独一无二的，也就是唯一的，可以保证对象中属性名称的唯一。</p><p>可以通过如下的代码测试类型</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> s);</span><br></pre></td></tr></table></figure><p>对应的输出类型为”symbol”</p><p>下面创建Symbol类型的变量，然后进行打印输出。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1);</span><br></pre></td></tr></table></figure><p>发现输出的结果都是：Symbol( )。</p><p>输出的结果都是Symbol( ),那么无法区分，哪个Symbol( )是s变量的，哪个是s1变量的。</p><p>为了解决这个问题，Symbol( )函数可以接受一个字符串作为参数，这个参数表示对Symbol的描述，主要是为了在控制台进行输出打印的时候，能够区分开，Symbol最终是属于哪个变量的。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>(<span class="string">&#x27;s&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;s1&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1);</span><br></pre></td></tr></table></figure><p>输出的结果为：Symbol(s)和Symbol(s1)</p><p>注意：Symbol函数的参数只表示对当前Symbol值（结果）的描述，因此相同参数的Symbol函数的返回值是不相等的。代码如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>(<span class="string">&#x27;s&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;s&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s === s1);</span><br></pre></td></tr></table></figure><p>以上结果为：false.</p><h3 id="7-2、Symbol应用场景"><a href="#7-2、Symbol应用场景" class="headerlink" title="7.2、Symbol应用场景"></a>7.2、Symbol应用场景</h3><h4 id="7-2-1-作为属性名的Symbol"><a href="#7-2-1-作为属性名的Symbol" class="headerlink" title="7.2.1 作为属性名的Symbol"></a>7.2.1 作为属性名的Symbol</h4><p>在前面的课程中，讲解过由于Symbol的值是唯一的，并且能够保证对象中不会出现同名的属性。下面，先来讲解一下，怎样使用Symbol作为属性名，然后再看一下怎样保证对象中不会出现同名属性。</p><p>第一种添加属性的方式：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mySymbol = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">    <span class="comment">// 第一种添加属性的方式</span></span><br><span class="line">obj[mySymbol] = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[mySymbol]);</span><br></pre></td></tr></table></figure><p>第二种添加属性的方式：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mySymbol = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    [mySymbol]: <span class="string">&#x27;world&#x27;</span> <span class="comment">// 注意mySymbol必须加上方括号，否则为字符串而不是Symbol类型。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[mySymbol]);</span><br></pre></td></tr></table></figure><p>第三种添加属性的方式</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mySymbol = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, mySymbol, &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;你好&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[mySymbol]);</span><br></pre></td></tr></table></figure><h4 id="7-2-2-防止属性名称冲突"><a href="#7-2-2-防止属性名称冲突" class="headerlink" title="7.2.2  防止属性名称冲突"></a>7.2.2  防止属性名称冲突</h4><p>在前面，已经讲解了怎样使用Symbol作为属性名了，下面看一下怎样通过Symbol来防止属性名的冲突。</p><p>下面先定义一个对象，然后动态的向对象中添加一个id属性。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test1</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    obj.<span class="property">id</span> = <span class="number">42</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test2</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    obj.<span class="property">id</span> = <span class="number">369</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test1</span>(obj);</span><br><span class="line"><span class="title function_">test2</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure><p>在上面的代码中，有两个函数分别是test1和test2向obj这个对象中动态添加id属性，在这里可以把这两个函数想象成两个不同的模块，或者是两个不同开发人员来实现的功能。</p><p>但是问题是，由于test2( )这个函数后执行，所以会将test1( )这个函数创建的id属性的值覆盖掉。那么这是我们不希望看到的，为了解决这个问题，可以使用Symbol作为属性名来解决。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> mySymbol = <span class="title class_">Symbol</span>(<span class="string">&#x27;lib1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test1</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    obj[mySymbol] = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> mySymbol2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;lib2&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test2</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    obj[mySymbol2] = <span class="number">369</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test1</span>(obj);</span><br><span class="line"><span class="title function_">test2</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure><p>通过上面的代码可以发现，通过Symbol解决了属性名称冲突的问题。</p><h2 id="8、Proxy"><a href="#8、Proxy" class="headerlink" title="8、Proxy"></a>8、Proxy</h2><h3 id="1-Proxy简介"><a href="#1-Proxy简介" class="headerlink" title="1.Proxy简介"></a>1.Proxy简介</h3><p>Proxy可以理解成在对象前添加了一个“拦截”层，外界在对该对象进行访问时，必须先通过这个拦截层。因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy这个词的意思是代理的意思，也就是说由Proxy来“代理”某些操作。所以又称之为“代理器”。</p><p>Proxy的使用</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> proxy=<span class="keyword">new</span> <span class="title class_">Proxy</span>(target,handler)</span><br></pre></td></tr></table></figure><p>target:表示所要拦截的目标对象(原来要访问的对象)</p><p>handler:也是一个对象，表示拦截的行为和规则。</p><p>要想使用Proxy来完成对象的拦截，除了创建对象以外，还需要指定对应的拦截的方法。</p><p>下面使用一下<code>get()</code>这个拦截方法，来体会一下Proxy拦截器的使用。</p><p><code>get( )</code>方法用于拦截某个属性的读取操作。</p><p>下面先看如下的代码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> student = &#123;</span><br><span class="line">    <span class="attr">userName</span>: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="property">userName</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="property">userAge</span>);</span><br></pre></td></tr></table></figure><p>这段代码非常的简单，定义了一个student对象，在该对象中添加了一个userName,下面可以直接通过对象名加上点的方式来获取对应的属性的值。但是，问题是，在student这个对象中，只是定义了userName这个属性，并没有定义userAge,但是当通过student.userAge这个方式来获取的时候，发现得到的结果是undefined.</p><p>那么，在这里我们希望如果访问对象中不存在的属性的时候，应该给出相应的错误提示，要想实现这个需求，就要用到Proxy中的<code>get()</code>方法，也就是在访问某个对象的属性之前，先拦截一下，看一下所访问的对象是否有对应的属性，如果有，继续访问，如果没有给用户一个错误的提示。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> student = &#123;</span><br><span class="line">     <span class="attr">userName</span>: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(student, &#123;</span><br><span class="line">     <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params">target, property</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (property <span class="keyword">in</span> target) &#123;</span><br><span class="line">             <span class="keyword">return</span> target[property];</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="comment">// （引用错误） 对象代表当一个不存在的变量被引用时发生的错误。</span></span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ReferenceError</span>(<span class="string">&#x27;访问的属性&#x27;</span> + property + <span class="string">&quot;不存在&quot;</span>)</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(proxy.<span class="property">userName</span>);</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(proxy.<span class="property">userAge</span>);</span><br></pre></td></tr></table></figure><p><code>get()</code> 有两个参数，&#96;第一个参数表示的是目标对象，第二个参数表示的是要访问的属性。</p><p>通过上面的代码，可以体会出所谓的 “拦截”的含义了，也就是在访问某个属性的值之前，先判断一下该对象是否有对应的属性，如果有就返回属性的值，没有就给出相应的错误提示。</p><p><strong>注意：要使Proxy起作用，必须针对Proxy对象进行操作，不是针对目标对象进行操作(上面的是student对象)。</strong></p><h4 id="1-2-set-方法"><a href="#1-2-set-方法" class="headerlink" title="1.2  set( )方法"></a>1.2  set( )方法</h4><p><code>set()</code> 方法用于拦截某个属性的赋值操作。</p><p>假如，Student对象有一个age属性，表示学生的年龄，在这里我们要求对年龄进行限制，如果大于60岁，给出错误提示，这样在这里可以使用Proxy对象保证age属性的取值是符合要求的。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> student = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(student, &#123;</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">obj, prop, value</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;obj=&#x27;</span>, obj);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;prop=&#x27;</span>, prop);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;value=&#x27;</span>, value);</span><br><span class="line">        <span class="keyword">if</span> (prop === <span class="string">&#x27;age&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="title class_">Number</span>.<span class="title function_">isInteger</span>(value)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;年龄不是整数！&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value &gt; <span class="number">60</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RangeError</span>(<span class="string">&#x27;年龄太大了&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">proxy.<span class="property">age</span> = <span class="string">&#x27;80&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proxy.<span class="property">age</span>);</span><br></pre></td></tr></table></figure><p><code>set()</code>方法</p><p>第一个参数：表示拦截的对象。</p><p>第二个参数：表示操作的属性名称。</p><p>第三个参数：表示属性的值。</p><h4 id="1-3-apply-方法"><a href="#1-3-apply-方法" class="headerlink" title="1.3 apply( )方法"></a>1.3 apply( )方法</h4><p><code>apply()</code> 方法拦截函数的调用，函数调用包括直接调用，call函数调用和apply函数调用，三种调用操作方式。</p><p>下面先看一下<code>apply()</code>函数的语法</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> handler=&#123;</span><br><span class="line">    <span class="title function_">apply</span>(<span class="params">target,ctx,args</span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>apply( )</code>函数可以有三个参数,</p><p>第一个参数：表示目标对象,也就是要拦截的函数</p><p>第二个参数：表示目标对象的上下文对象(this)</p><p>第三个参数：表示目标对象的参数数组。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> target = <span class="keyword">function</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;你好&#x27;</span> + msg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">    <span class="attr">apply</span>: <span class="keyword">function</span>(<span class="params">target, ctx, args</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;target=&#x27;</span>, target);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ctx=&#x27;</span>, ctx === obj);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;args=&#x27;</span>, args);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    proxy,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">proxy</span>(<span class="string">&#x27;张三&#x27;</span>))</span><br></pre></td></tr></table></figure><p>在执行target这个方法之前，会被Proxy所拦截。</p><h4 id="1-4-has-方法"><a href="#1-4-has-方法" class="headerlink" title="1.4 has( ) 方法"></a>1.4 has( ) 方法</h4><p><code>has()</code> 可以隐藏某些属性，不被in操作符发现。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">    <span class="attr">_name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">    <span class="title function_">has</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;target=&#x27;</span>, target);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;key=&#x27;</span>, key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(user, handler);</span><br><span class="line"><span class="string">&#x27;_name&#x27;</span> <span class="keyword">in</span> proxy; <span class="comment">// 自动调用 has 方法</span></span><br></pre></td></tr></table></figure><p>通过上面的代码，可以发现：has方法有两个参数，第一个参数：表示目的对象，第二个参数：表示操作的属性。</p><p>下面的例子，把<code>user</code> 对象中 <code>_name</code> 属性隐藏起来，也就是无法通过<code>in</code> 运算符发现该属性。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">    <span class="attr">_name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">    <span class="title function_">has</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">        <span class="comment">// console.log(&#x27;target=&#x27;, target);</span></span><br><span class="line">        <span class="comment">// console.log(&#x27;key=&#x27;, key);</span></span><br><span class="line">        <span class="keyword">if</span> (key[<span class="number">0</span>] === <span class="string">&#x27;_&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> key <span class="keyword">in</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(user, handler);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;_name&#x27;</span> <span class="keyword">in</span> proxy);</span><br></pre></td></tr></table></figure><p>上面的代码中，如果对象中的属性名第一个字符是下画线，那么has方法会返回false,从而不会被 <code>in</code> 运算符发现，但是如果将  <code>console.log(&#39;_name&#39; in proxy);</code> 换成   <code>console.log(&#39;age&#39; in proxy);</code>  返回为true.</p><h3 id="2、应用场景"><a href="#2、应用场景" class="headerlink" title="2、应用场景"></a>2、应用场景</h3><h4 id="2-1-数据校验"><a href="#2-1-数据校验" class="headerlink" title="2.1 数据校验"></a>2.1 数据校验</h4><p>在前面的课程中，已经讲解过基本的数据校验，下面看一个比较完整的数据校验的案例。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">19</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">validator</span>(<span class="variable language_">this</span>, personValidators);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义校验规则</span></span><br><span class="line"><span class="keyword">const</span> personValidators = &#123;</span><br><span class="line">        <span class="title function_">name</span>(<span class="params">val</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">typeof</span> val === <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">age</span>(<span class="params">val</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">typeof</span> val === <span class="string">&#x27;number&#x27;</span> &amp;&amp; val &gt; <span class="number">18</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 完成校验</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">validator</span>(<span class="params">target, validator</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, &#123;</span><br><span class="line">        <span class="attr">_validator</span>: validator,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">target, key, value</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (target.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">                <span class="keyword">let</span> v = <span class="variable language_">this</span>.<span class="property">_validator</span>[key]; <span class="comment">//根据key获取具体的校验规则</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_">v</span>(value)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">`不能给<span class="subst">$&#123;key&#125;</span>属性设置<span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span> 不存在`</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注意这里返回的是Proxy对象</span></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;zhangsan&#x27;</span>;</span><br><span class="line">person.<span class="property">age</span> = <span class="number">19</span>;</span><br><span class="line"><span class="comment">// person.name = 90;</span></span><br><span class="line"><span class="comment">// person.age = 15;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br></pre></td></tr></table></figure><p>通过上面的案例，将对象的创建，数据验证的规则，以及具体的验证方式都进行了分离，整体结构更加的清晰，代码更加的容易维护。</p><h4 id="2-2-简单模拟双向数据绑定"><a href="#2-2-简单模拟双向数据绑定" class="headerlink" title="2.2 简单模拟双向数据绑定"></a>2.2 简单模拟双向数据绑定</h4><p>大家都知道在<code>V</code>ue&#96;中，是有双向绑定功能的，下面通过Proxy来模拟一下。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">let</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;txtInput&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> p = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;txtP&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">text</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> newObj = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">target, key, value</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (target.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">            input.<span class="property">value</span> = value;</span><br><span class="line">            p.<span class="property">innerHTML</span> = value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">input.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    newObj.<span class="property">text</span> = e.<span class="property">target</span>.<span class="property">value</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在文本框中输入值以后，对应的会在p标签中进行展示，通过在浏览器的控制台中，如果给 newObj中的text属性赋值，对应的文本框和P标签内容也会发生变化。</p><h4 id="2-3-实现真正的私有属性"><a href="#2-3-实现真正的私有属性" class="headerlink" title="2.3 实现真正的私有属性"></a>2.3 实现真正的私有属性</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">     <span class="keyword">const</span> userInfo = &#123;</span><br><span class="line">       <span class="attr">_id</span>: <span class="number">123</span>,</span><br><span class="line">       <span class="attr">getAllUsers</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;获取所有用户的信息&quot;</span>);</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="attr">getUserById</span>: <span class="keyword">function</span> (<span class="params">userId</span>) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;根据用户的编号，查询指定的信息&quot;</span> + userId);</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="attr">saveUser</span>: <span class="keyword">function</span> (<span class="params">user</span>) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;保存用户信息&quot;</span>);</span><br><span class="line">       &#125;,</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(userInfo, &#123;</span><br><span class="line">       <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">target, prop</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (prop[<span class="number">0</span>] === <span class="string">&quot;_&quot;</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> target[prop];</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">target, prop, value</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (prop[<span class="number">0</span>] !== <span class="string">&quot;_&quot;</span>) &#123;</span><br><span class="line">           target[prop] = value;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="attr">has</span>: <span class="keyword">function</span> (<span class="params">target, prop</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (prop[<span class="number">0</span>] === <span class="string">&quot;_&quot;</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> prop <span class="keyword">in</span> target;</span><br><span class="line">       &#125;,</span><br><span class="line">     &#125;);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(proxy.<span class="property">_id</span>); <span class="comment">//undefined</span></span><br><span class="line">     proxy.<span class="title function_">getAllUsers</span>(); <span class="comment">// 获取所有用户的信息</span></span><br><span class="line">     proxy.<span class="title function_">getUserById</span>(<span class="number">123</span>); <span class="comment">// 根据用户的编号，查询指定的信息123</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;_id&quot;</span> <span class="keyword">in</span> proxy); <span class="comment">//false</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;saveUser&quot;</span> <span class="keyword">in</span> proxy); <span class="comment">// true</span></span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="9、Set结构"><a href="#9、Set结构" class="headerlink" title="9、Set结构"></a>9、Set结构</h2><p>Set结构与数组类似，但是成员的值都是唯一的，没有重复值。</p><h3 id="1-1-常用的操作方法"><a href="#1-1-常用的操作方法" class="headerlink" title="1.1 常用的操作方法"></a>1.1 常用的操作方法</h3><p>关于常用的操作方法，这里会讲解如下4个。</p><p><code>add(value)</code> : 添加某个值，返回Set结构本身。</p><p><code>delete(value)</code>: 删除某个值，返回一个布尔值，表示删除是否成功</p><p><code>has(value)</code>  : 返回一个布尔值，表示参数是否为Set的成员.</p><p><code>clear()</code>: 清除所有成员，没有返回值</p><h4 id="1-1-1-add-方法"><a href="#1-1-1-add-方法" class="headerlink" title="1.1.1 add( )方法"></a>1.1.1 add( )方法</h4><p>下面先看一下 <code>add( )</code>方法的使用</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">1</span>);</span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">2</span>);</span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">size</span>);</span><br></pre></td></tr></table></figure><p>在上面的代码中，用到了size属性，这个属性返回的是Set结构中的成员总数。</p><p>Set结构中的成员是不允许出现重复值的，下面测试一下。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">1</span>);</span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">2</span>);</span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">3</span>);</span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">3</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">size</span>);</span><br></pre></td></tr></table></figure><p>在上面的代码中，又添加了一个数字3，但是在输出的时候，发现3这个数值只出现了一次，并且总数的个数也没有发生变化，所以Set是不允许出现重复的。</p><h4 id="1-1-2-has-方法"><a href="#1-1-2-has-方法" class="headerlink" title="1.1.2 has( )方法"></a>1.1.2 has( )方法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">1</span>);</span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">2</span>);</span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">3</span>);</span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">size</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">has</span>(<span class="number">3</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">has</span>(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><h4 id="1-1-3-delete-方法"><a href="#1-1-3-delete-方法" class="headerlink" title="1.1.3 delete( )方法"></a>1.1.3 delete( )方法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">1</span>);</span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">2</span>);</span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">3</span>);</span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">size</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">delete</span>(<span class="number">3</span>)) <span class="comment">//删除成功返回true.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">has</span>(<span class="number">3</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">has</span>(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><h4 id="1-1-4-clear-方法"><a href="#1-1-4-clear-方法" class="headerlink" title="1.1.4 clear()方法"></a>1.1.4 clear()方法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">1</span>);</span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">2</span>);</span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">3</span>);</span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">size</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">delete</span>(<span class="number">3</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">has</span>(<span class="number">3</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">has</span>(<span class="number">5</span>))</span><br><span class="line">s.<span class="title function_">clear</span>();<span class="comment">// 清除所有项</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br></pre></td></tr></table></figure><p>Set结构是一个类似数组的结构，那么怎样转换成一个真正的数据呢?</p><p>可以通过前面学习的 <code>Arrray.from</code>  方法。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">1</span>);</span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">2</span>);</span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">let</span> array = <span class="title class_">Array</span>.<span class="title function_">from</span>(s);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array);</span><br></pre></td></tr></table></figure><p>在使用数组编程的时候，经常会用到一个功能，就是清除数组中的重复的数据，那么在这里可以借助于Set结构来完成。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">      <span class="comment">// 清除数组中的重复数据.</span></span><br><span class="line"><span class="comment">// Set函数可以接受一个数组或者是类似数组的对象，作为参数。</span></span><br><span class="line">      <span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">      <span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>(array);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(s));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 响应式原理</title>
      <link href="/2022/07/13/Vue/Vue%20%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/Vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/"/>
      <url>/2022/07/13/Vue/Vue%20%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/Vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-响应式原理"><a href="#Vue-响应式原理" class="headerlink" title="Vue 响应式原理"></a>Vue 响应式原理</h1><h1 id="1、Vue-响应式相关问题"><a href="#1、Vue-响应式相关问题" class="headerlink" title="1、Vue 响应式相关问题"></a>1、Vue 响应式相关问题</h1><p>模拟一个最小版本的<code>Vue</code></p><p>响应式原理在面试的常问问题</p><p>实际项目中出现问题的原理层面的解决</p><p>​ 给<code>Vue</code>实例新增一个成员是否是响应式的？</p><p>​ 给属性重新赋值成对象，是否是响应式的？</p><h1 id="2、数据驱动"><a href="#2、数据驱动" class="headerlink" title="2、数据驱动"></a>2、数据驱动</h1><p>在实现整个<code>Vue</code>响应式代码之前，我们先来了解几个概念。</p><p>第一个：数据驱动</p><p>第二个：响应式的核心原理</p><p>第三个：发布订阅模式和观察这模式</p><p>我们先来看一下数据驱动的内容：</p><p>数据响应式，双向绑定，数据驱动（我们经常看到这几个词）</p><p>数据响应式：数据模型仅仅是普通的<code>JavaScript</code>对象，而当我们修改数据时，视图会进行更新，避免了频繁的<code>DOM</code>操作，提高开发效率，这与<code>Jquery</code>不一样，<code>Jquery</code>是频繁的操作<code>Dom</code></p><p>双向绑定：</p><p>数据改变，视图改变，视图改变，数据也随之改变( 通过这句话，我们可以看到在双向绑定中是包含了数据响应式的内容)</p><p>​ 我们可以使用<code>v-model</code> 在表单元素上创建双向数据绑定</p><p>数据驱动是<code>Vue</code>最独特的特性之一</p><p>​ 开发过程中仅仅需要关注数据本身，不需要关心数据是如何渲染到视图中的。主流的<code>MVVM</code>框架都已经实现了数据响应式与双向绑定，所以可以将数据绑定到<code>DOM</code>上。</p><h1 id="3、响应式的核心原理"><a href="#3、响应式的核心原理" class="headerlink" title="3、响应式的核心原理"></a>3、响应式的核心原理</h1><h2 id="3-1-Vue2-x响应式原理"><a href="#3-1-Vue2-x响应式原理" class="headerlink" title="3.1 Vue2.x响应式原理"></a>3.1 <code>Vue2.x</code>响应式原理</h2><p>关于<code>Vue2.x</code>的响应式原理在官方文档中也有介绍。</p><p><code>https://cn.vuejs.org/v2/guide/reactivity.html</code></p><p>在该文档中，我们注意如下一段内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当你把一个普通的 JavaScript 对象传入 Vue 实例作为 data 选项，Vue 将遍历此对象所有的 property，并使用 Object.defineProperty 把这些 property 全部转为 getter/setter。Object.defineProperty 是 ES5 中一个无法 shim 的特性，这也就是 Vue 不支持 IE8 以及更低版本浏览器的原因。</span><br></pre></td></tr></table></figure><p>通过以上的文字，我们可以看到，在<code>Vue2.x</code>中响应式的实现是通过<code>Object.defineProperty</code>来完成的，注意该属性无法降级(shim)处理，所以<code>Vue</code>不支持<code>IE8</code>以及更低版本的浏览器的原因。</p><p>下面我们来看一下<code>Object.defineProperty</code>基本使用</p><p>修改<code>data</code>对象中的<code>msg</code>属性的值，实现视图的更新.(这也就是我们所说的响应式)</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>defineProperty<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//模拟Vue中的data选项(当)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> data = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">msg</span>: <span class="string">&quot;hello&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//模拟Vue的实例</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> vm = &#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//数据劫持，当访问或者设置vm中的成员的时候，做一些干预操作</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(vm, <span class="string">&quot;msg&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//可枚举(可遍历)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">enumerable</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//可配置（可以使用delete删除,可以通过defineProperty重新定义)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">configurable</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//当获取值的时候执行</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">get</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get:&quot;</span>, data.<span class="property">msg</span>);</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> data.<span class="property">msg</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 当设置值的时候执行</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;set:&quot;</span>, newValue);</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//设置的值与原有的值相同，则没有更改，所以不做任何操作</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (newValue === data.<span class="property">msg</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">          data.<span class="property">msg</span> = newValue;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//数据更改，更新DOM的值</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#app&quot;</span>).<span class="property">textContent</span> = data.<span class="property">msg</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//测试</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//执行set操作</span></span></span><br><span class="line"><span class="language-javascript">      vm.<span class="property">msg</span> = <span class="string">&quot;abc&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//执行get操作</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">msg</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在进行测试的时候，可以在浏览器的控制台中，输入<code>vm.msg</code>进行测试。</p><p>在上面的代码中，我们是将一个对象中的属性转换成了<code>getter/setter</code>的形式，那么这里我们还有一个问题:</p><p>如果有一个对象中多个属性需要转换<code>getter/setter</code>，那么应该如何处理？</p><p>我们可以通过循环遍历的方式，将对象中的多个属性转换成<code>getter/setter</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>defineProperty多个属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//模拟Vue中的data选项</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> data = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">msg</span>: <span class="string">&quot;hello&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">count</span>: <span class="number">10</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//模拟Vue实例</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> vm = &#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">proxyData</span>(data);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">proxyData</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//遍历data对象中的所有属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Object</span>.<span class="title function_">keys</span>(data).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 把data中的属性，转换成vm的setter/getter</span></span></span><br><span class="line"><span class="language-javascript">          <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(vm, key, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">enumerable</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">configurable</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">get</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get&quot;</span>, key, data[key]);</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">return</span> data[key];</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;set:&quot;</span>, key, newValue);</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">if</span> (newValue === data[key]) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">              data[key] = newValue;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#app&quot;</span>).<span class="property">textContent</span> = data[key];</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      vm.<span class="property">msg</span> = <span class="string">&quot;hello world&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">msg</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，我们通过循环的方式给<code>data</code>对象中的每个属性添加了<code>getter/setter</code>.</p><p>这里我们只是在视图中展示了<code>msg</code>属性的值，如果想展示<code>count</code>属性的值，可以在浏览器的控制台中，通过<code>vm.count=20</code>这种形式来展示，当然，在后期的课程中我们会分别展示出<code>msg</code>与<code>count</code>属性的值，</p><h2 id="3-2-Vue3响应式原理"><a href="#3-2-Vue3响应式原理" class="headerlink" title="3.2 Vue3响应式原理"></a>3.2 <code>Vue3</code>响应式原理</h2><p><code>Vue3</code>的响应式原理是通过<code>Proxy</code>来完成的。</p><p><code>Proxy</code>直接监听对象，而非属性，所以将多个属性转换成<code>getter/setter</code>的时候，不需要使用循环。</p><p><code>Proxy</code>是<code>ES6</code>课程中新增的，<code>IE</code>不支持</p><p><code>Proxy</code>实现响应式的基本代码如下(该代码的功能与上面所讲解的是一样的)：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Proxy<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//模拟Vue中的data选项</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> data = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">msg</span>: <span class="string">&quot;hello&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">count</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//模拟Vue实例</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//为data创建一个代理对象vm,这样就可以通过vm.msg来获取data中的msg属性的值，而这时候会执行get方法</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Proxy</span>(data, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 当访问vm的成员时会执行</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//target表示代理的对象（这里为data对象），key表示所代理的对象中的属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">get</span>(<span class="params">target, key</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get key:&quot;</span>, key, target[key]);</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> target[key];</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//当设置vm的成员时会执行</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">set</span>(<span class="params">target, key, newValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;set key:&quot;</span>, key, newValue);</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (target[key] === newValue) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">          target[key] = newValue;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#app&quot;</span>).<span class="property">textContent</span> = target[key];</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//测试</span></span></span><br><span class="line"><span class="language-javascript">      vm.<span class="property">msg</span> = <span class="string">&quot;aaaa&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">msg</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过以上的代码我们发现使用<code>Proxy</code>的代码是给对象中所有属性添加<code>getter/setter</code>,而不需要通过循环的方式来实现，所以代码更加的简洁。</p><h1 id="4、发布订阅模式"><a href="#4、发布订阅模式" class="headerlink" title="4、发布订阅模式"></a>4、发布订阅模式</h1><p>发布订阅模式：订阅者，发布者，信号中心</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我们假定，存在一个“信号中心”，某个任务执行完成，就向信号中心&quot;发布&quot;(publish)一个信号，其它任务可以向信号中心“订阅”(subscribe)这个信号，从而知道什么时候自己可以开始执行。这就叫做&quot;发布/订阅模式&quot;(publish-subscribe pattern)</span><br></pre></td></tr></table></figure><p>家长向学生所在的班级订阅了获取学生考试成绩的事件，当老师公布学生的成绩后，就会自动通知学生的家长。</p><p>在整个案例中，学生所在的班级为信号中心，老师为发布者，家长为订阅者</p><p><code>Vue</code> 的自定义事件就是基于发布订阅模式来实现的。</p><p>下面通过<code>Vue</code>中兄弟组件通信过程，来理解发布订阅模式</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// eventBus.js</span></span><br><span class="line"><span class="comment">// 事件中心</span></span><br><span class="line"><span class="keyword">let</span> eventHub=<span class="keyword">new</span> <span class="title class_">Vue</span>()</span><br><span class="line"><span class="comment">//ComponentA.vue</span></span><br><span class="line"><span class="attr">addTodo</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//发布消息(事件)</span></span><br><span class="line">    eventHub.$emit(<span class="string">&#x27;add-todo&#x27;</span>,&#123;<span class="attr">text</span>:<span class="variable language_">this</span>.<span class="property">newTodoText</span>&#125;)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">newTodoText</span>=<span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ComponentB.vue</span></span><br><span class="line"><span class="comment">//订阅者</span></span><br><span class="line"><span class="attr">created</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//订阅消息(事件)</span></span><br><span class="line">    eventHub.$on(<span class="string">&#x27;add-todo&#x27;</span>,<span class="variable language_">this</span>.<span class="property">addTodo</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以上代码，我们可以理解发布订阅模式中的核心概念。</p><p>下面我们模拟<code>Vue</code>中的自定义事件的实现</p><p>下面我们先来做一个基本的分析：</p><p>先来看如下代码：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue 自定义事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//Vue自定义事件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//注册事件(订阅消息)</span></span></span><br><span class="line"><span class="language-javascript">      vm.$on(<span class="string">&quot;dataChange&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;dataChange&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      vm.$on(<span class="string">&quot;dataChange&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;dataChange&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//触发事件(发布消息)</span></span></span><br><span class="line"><span class="language-javascript">      vm.$emit(<span class="string">&quot;dataChange&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过上面的代码，我们可以看到<code>$on</code>实现事件的注册，而且可以注册多个事件，那么我们可以推测在其内部有一个对象来存储注册的事件，对象的格式为:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#x27;click&#x27;:[fn1,fn2],&#x27;change&#x27;:[fn]&#125;</span><br></pre></td></tr></table></figure><p>以上格式说明了，我们注册了两个事件，分别为<code>click</code>与<code>change</code>.</p><p>下面我们根据以上的分析过程，来模拟实现自定义事件。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>发布订阅模式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">class</span> <span class="title class_">EventEmitter</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// &#123;&#x27;click&#x27;:[fn1,fn2],&#x27;change&#x27;:[fn]&#125;</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 存储事件与处理函数的对应关系</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">subs</span> = &#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//注册事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//第一个参数为事件名称</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 第二个参数为处理函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 将对应的处理函数添加到subs对象中</span></span></span><br><span class="line"><span class="language-javascript">        $on(eventType, fn) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//判断对应的eventType是否有相应的处理函数，如果有，直接添加到数组中，如果没有返回一个空数组。</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">subs</span>[eventType]) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">subs</span>[eventType] = [];</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">subs</span>[eventType].<span class="title function_">push</span>(fn);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//触发事件</span></span></span><br><span class="line"><span class="language-javascript">        $emit(eventType) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">subs</span>[eventType]) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">subs</span>[eventType].<span class="title function_">forEach</span>(<span class="function">(<span class="params">handler</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="title function_">handler</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//测试代码</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> em = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>();</span></span><br><span class="line"><span class="language-javascript">      em.$on(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;click1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      em.$on(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;click2&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      em.$emit(<span class="string">&quot;click&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="5、观察者模式"><a href="#5、观察者模式" class="headerlink" title="5、观察者模式"></a>5、观察者模式</h1><p><code>Vue</code>的响应式机制使用了观察者模式，所以我们首先要先了解一下观察者模式</p><p>观察者模式与发布订阅模式的区别是，观察者模式中没有事件中心，只有发布者与订阅者，并且发布者需要知道订阅者的存在。</p><p>观察者(订阅者)—<code>Watcher</code></p><p>​ <code>update():</code> 当事件发生时，具体要做的事情。</p><p>目标(发布者)–<code>Dep</code></p><p>​ <code>subs</code> 数组：存储所有的观察者</p><p>​ <code>addSub()</code> 添加观察者，将其保存到<code>subs</code>数组中</p><p><code>notify()</code>： 当事件发生后，调用所有观察者的<code>update()</code> 方法。</p><p>没事事件中心</p><p>具体代码实现如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>观察者模式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//发布者</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">class</span> <span class="title class_">Dep</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">//记录所有的订阅者</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">subs</span> = [];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//添加订阅者</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">addSub</span>(<span class="params">sub</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">//订阅者中必须有update方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">if</span> (sub &amp;&amp; sub.<span class="property">update</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">push</span>(sub);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//发布通知</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">notify</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">//遍历subs数组，调用每个订阅者中的update方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">sub</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            sub.<span class="title function_">update</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 订阅者--观察者</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">class</span> <span class="title class_">Watcher</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//必须有一update方法,当事件发生后，具体要做的事情</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">update</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;update something&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//测试</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">let</span> dep = <span class="keyword">new</span> <span class="title class_">Dep</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">let</span> watcher = <span class="keyword">new</span> <span class="title class_">Watcher</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      dep.<span class="title function_">addSub</span>(watcher);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      dep.<span class="title function_">notify</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面我们看一下观察者模式与发布订阅模式的区别。</p><p>观察者模式：是由具体目标调度的，比如当事件触发，<code>Dep</code>就会去调用观察者的方法，所以观察者模式的订阅者与发布者之间是存在依赖的。</p><p>发布订阅模式：由统一调度中心调用，因此发布者和订阅者不需要知道对方的存在。</p><h1 id="6、模拟-Vue-响应式原理–Vue"><a href="#6、模拟-Vue-响应式原理–Vue" class="headerlink" title="6、模拟 Vue 响应式原理–Vue"></a>6、模拟 Vue 响应式原理–Vue</h1><p>当我们在使用<code>Vue</code>的时候，首先会根据<code>Vue</code>类来创建<code>Vue</code>的实例。</p><p>那么<code>Vue</code>类主要的功能如下：</p><ul><li>负责接收初始化的参数(选项)</li><li>负责把<code>data</code>中的属性注入到<code>Vue</code>实例，转换成<code>getter/setter</code>(可以通过<code>this</code>来访问<code>data</code>中的属性)</li><li>负责调用<code>observer</code>监听<code>data</code>中所有属性的变化(当属性值发生变化后更新视图)</li><li>负责调用<code>compiler</code>解析指令&#x2F;差值表达式</li></ul><p>结构</p><p><code>Vue</code>中包含了<code>_proxyData</code>这个私有方法，该方法的作用就是将<code>data</code>中的属性转换成<code>getter/setter</code>并且注入到<code>Vue</code>的实例中。</p><p><code>模拟Vue/js/vue.js</code></p><p>基本代码实现如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vue</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="comment">// 1、通过属性保存选项的数据</span></span><br><span class="line">    <span class="comment">// options:表示在创建Vue实例的时候传递过来的参数，将其保存到$options中。</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$options</span> = options || &#123;&#125;;</span><br><span class="line">    <span class="comment">//获取参数中的data属性保存到$data中.</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$data</span> = options.<span class="property">data</span> || &#123;&#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$el</span> =</span><br><span class="line">      <span class="keyword">typeof</span> options.<span class="property">el</span> === <span class="string">&quot;string&quot;</span></span><br><span class="line">        ? <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(options.<span class="property">el</span>)</span><br><span class="line">        : options.<span class="property">el</span>;</span><br><span class="line">    <span class="comment">// 2、把data中的成员转换成getter和setter,注入到vue实例中.</span></span><br><span class="line">    <span class="comment">//通过proxy函数后，在控制台上，可以通过vm.msg直接获取数据，而不用输入vm.$data.msg</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">_proxyData</span>(<span class="variable language_">this</span>.<span class="property">$data</span>);</span><br><span class="line">    <span class="comment">//3.调用observer对象，监听数据的变化</span></span><br><span class="line">    <span class="comment">//4.调用compiler对象，解析指令和差值表达式</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">_proxyData</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="comment">//遍历data中的所有属性</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(data).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 把data中的属性输入注入到Value实例中，注意，这里使用的是箭头函数，this表示的就是Vue的实例。</span></span><br><span class="line">      <span class="comment">//后期我们可以通过this的形式来访问data中的属性。</span></span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">this</span>, key, &#123;</span><br><span class="line">        <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> data[key];</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (newValue === data[key]) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          data[key] = newValue;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>Vue</code>类中，我们主要实现四项内容：</p><p>1、通过属性保存选项的数据</p><p>2、把<code>data</code>中的成员转换成<code>getter</code>和<code>setter</code>,注入到<code>vue</code>实例中.</p><p>3、调用<code>observe</code>r 对象，监听数据的变化</p><p>4、调用<code>compiler</code>对象，解析指令和差值表达式</p><p>在上面的代码中，我们首先实现了前两项内容。</p><p>下面进行测试。</p><p><code>index.html</code>的代码如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>模拟Vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>差值表达式<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>v-text<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>v-model<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;count&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">msg</span>: <span class="string">&quot;Hello World&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">count</span>: <span class="number">12</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在模板中添加了<code>差值表达式</code>，<code>v-text</code>,<code>v-model</code>内容，同时导入了我们自己创建的<code>vue</code>,并且创建了<code>Vue</code>的实例。</p><p>在浏览器的控制台中查看对应效果</p><p><img src="/2022/07/13/Vue/Vue%20%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/Vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/vue%E5%AE%9E%E4%BE%8B.png"></p><h1 id="7、Observer"><a href="#7、Observer" class="headerlink" title="7、Observer"></a>7、<code>Observer</code></h1><p><code>Observer</code>的功能</p><ul><li>负责把<code>data</code>选项中的属性转换成响应式数据</li><li><code>data</code>中的某个属性也是对象，把该属性转换成响应式数据（例如<code>data</code>中的某个属性为<code>Student</code>对象，也要将<code>Student</code>对象中的属性转换成响应式）</li><li>数据变化发送通知</li></ul><p><code>observer.js</code>文件中的基本代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">walk</span>(data);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">walk</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="comment">//1、判断data是否是对象，以及data是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (!data || <span class="keyword">typeof</span> data !== <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2、遍历data对象中的所有属性</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(data).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">defineReactive</span>(data, key, data[key]);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">defineReactive</span>(<span class="params">obj, key, val</span>) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">      <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (newVal === val) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        val = newVal;</span><br><span class="line">        <span class="comment">//发送通知，更新视图</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面对以上代码进行测试。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vue</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="comment">// 1、通过属性保存选项的数据</span></span><br><span class="line">    <span class="comment">// options:表示在创建Vue实例的时候传递过来的参数，将其保存到$options中。</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$options</span> = options || &#123;&#125;;</span><br><span class="line">    <span class="comment">//获取参数中的data属性保存到$data中.</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$data</span> = options.<span class="property">data</span> || &#123;&#125;;</span><br><span class="line">    <span class="comment">//如果是字符串，转成dom对象</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$el</span> =</span><br><span class="line">      <span class="keyword">typeof</span> options.<span class="property">el</span> === <span class="string">&quot;string&quot;</span></span><br><span class="line">        ? <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(options.<span class="property">el</span>)</span><br><span class="line">        : options.<span class="property">el</span>;</span><br><span class="line">    <span class="comment">// 2、把data中的成员转换成getter和setter,注入到vue实例中.</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">_proxyData</span>(<span class="variable language_">this</span>.<span class="property">$data</span>);</span><br><span class="line">    <span class="comment">//3.调用observer对象，监听数据的变化</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Observer</span>(<span class="variable language_">this</span>.<span class="property">$data</span>);</span><br><span class="line">    <span class="comment">//4.调用compiler对象，解析指令和差值表达式</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>Vue</code>类的构造方法中的第三部，创建<code>Observer</code>的实例，同时传递<code>data</code>数据。</p><p>在<code>index.html</code>文件中，导入<code>observer.js</code>文件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;./js/observer.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>注意：由于在<code>vue.js</code>文件中使用了<code>Observer</code>对象，所以这里先导入<code>observer.js</code>文件。</p><p>下面我们修改一下代码，看一下效果：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">     <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">       <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">       <span class="attr">data</span>: &#123;</span><br><span class="line">         <span class="attr">msg</span>: <span class="string">&quot;Hello World&quot;</span>,</span><br><span class="line">         <span class="attr">count</span>: <span class="number">12</span>,</span><br><span class="line">       &#125;,</span><br><span class="line">     &#125;);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">msg</span>);</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在<code>index.html</code>中，我们打印输出了<code>vm</code>中的<code>msg</code>的值，</p><p>这时候，会执行<code>vue.js</code>文件中的<code>get</code>方法，也会执行<code>observer.js</code> 文件中的<code>get</code>方法。</p><p>如果将<code>observer.js</code>文件中的<code>get</code>方法修改成如下形式</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> obj[key];</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>会出现如下错误：</p><p><img src="/2022/07/13/Vue/Vue%20%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/Vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/%E5%BC%82%E5%B8%B8.png"></p><p>以上错误信息的含义为：堆栈溢出</p><p>为什么会出现以上错误呢？</p><p>因为<code>obj</code>就是<code>data</code>对象，而通过<code>obj[key]</code>的方式来获取值，还是会执行<code>get</code>方法，所以这里形成了死循环。</p><h1 id="8、完善-defineReactive-方法"><a href="#8、完善-defineReactive-方法" class="headerlink" title="8、完善 defineReactive 方法"></a>8、完善 defineReactive 方法</h1><p>如果，我们在<code>data</code>中添加一个对象，那么对象中的属性是否为响应式的呢？</p><p><img src="/2022/07/13/Vue/Vue%20%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/Vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/%E5%93%8D%E5%BA%94%E5%BC%8F.png"></p><p>在浏览器的控制台中，输出的<code>person</code>对象是响应式的，但是其内部属性并不是响应式的，下面处理一下这块内容。</p><p>而<code>Vue</code>中的对象是响应式的，对象中的属性也是响应式的。</p><p>关于这个问题的解决，非常的简单。</p><p>在<code>observer.js</code>文件中的<code>defineReactive</code>方法中，调用一次<code>walk</code>方法就可以了。如下代码所示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">defineReactive</span>(<span class="params">obj, key, val</span>) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="title function_">walk</span>(val);</span><br><span class="line">   <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">     <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">     <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">     <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="comment">// return obj[key];</span></span><br><span class="line">       <span class="keyword">return</span> val;</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">       <span class="keyword">if</span> (newVal === val) &#123;</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       val = newVal;</span><br><span class="line">       <span class="comment">//发送通知，更新视图</span></span><br><span class="line">     &#125;,</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，首先调用了<code>this.walk(val)</code>方法，同时传递了<code>val</code>这个参数。</p><p>这样在所调用<code>walk</code>方法的内部，会先判断传递过来的参数的类型，如果不是对象，就停止执行<code>walk</code>方法总的循环，而这时候会<code>Object.defineProperty</code>,但是</p><p>如果传递过来的参数就是一个对象，那么会进行循环遍历，取出每一个属性，为其添加<code>getter/setter</code></p><p>下面，我们在看另外一个问题，现在对<code>index.html</code>中<code>vue</code>对象中<code>data</code>中的<code>msg</code>属性重新赋值,并且赋值为一个对象，那么新赋值的这个对象的成员是否为响应式的呢？下面我们来测试一下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">      <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">          <span class="attr">msg</span>: <span class="string">&quot;Hello World&quot;</span>,</span><br><span class="line">          <span class="attr">count</span>: <span class="number">12</span>,</span><br><span class="line">          <span class="attr">person</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;zs&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">$data</span>.<span class="property">msg</span>);</span><br><span class="line">    vm.<span class="property">msg</span>=&#123;<span class="attr">text</span>:<span class="string">&#x27;abc&#x27;</span>&#125;<span class="comment">//重新给msg属性赋值</span></span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在浏览器的控制台中，打印<code>vm</code>，看一下对应的效果</p><p><img src="/2022/07/13/Vue/Vue%20%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/Vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/1.png"></p><p>通过上图，可以发现新赋值给<code>msg</code>属性的对象中的属性并不是响应式的，所以接下来，我们需要为其改造成响应式的。</p><p>当我们给<code>msg</code>属性赋值的时候，就会执行<code>observer.js</code>文件中的<code>defineReactive</code>方法中的<code>set</code>操作，在这里我们可以将传递过来的值再次调用<code>walk</code>方法，</p><p>这样又会对传递过来的值，进行判断是否为对象，然后进行遍历，同时为其属性添加<code>getter/setter</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">defineReactive</span>(<span class="params">obj, key, val</span>) &#123;</span><br><span class="line">     <span class="comment">// console.log(&quot;this==&quot;, this);//这里this指向的是Observer</span></span><br><span class="line">    <span class="keyword">let</span> that = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">walk</span>(val);</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">      <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// return obj[key];</span></span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">            <span class="comment">// console.log(&quot;this==&quot;, this);//这里this指向的是data对象。</span></span><br><span class="line">        <span class="keyword">if</span> (newVal === val) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        val = newVal;</span><br><span class="line">        that.<span class="title function_">walk</span>(newVal);<span class="comment">//注意this指向的问题</span></span><br><span class="line">        <span class="comment">//发送通知，更新视图</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>通过上面的代码可以看到，在<code>defineReactive</code>方法中的<code>set</code>操作中，又调用了<code>walk</code>方法，但是要注意的就是，这里需要处理<code>this</code>指向的问题。</p><h1 id="9、Compiler"><a href="#9、Compiler" class="headerlink" title="9、Compiler"></a>9、<code>Compiler</code></h1><p>功能</p><ul><li>负责编译模板，解析指令&#x2F;差值表达式</li><li>负责页面的首次渲染</li><li>当数据变化后重新渲染视图</li></ul><p>通过以上功能的描述，可以总结出<code>Compiler</code>主要就是对<code>Dom</code>进行操作。</p><p>在<code>js</code>目录下面创建<code>compiler.js</code>文件，实现代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Compiler</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">vm</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">el</span> = vm.<span class="property">$el</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">vm</span> = vm;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//编译模板，处理文本节点和元素节点.</span></span><br><span class="line">  <span class="title function_">compile</span>(<span class="params">el</span>) &#123;&#125;</span><br><span class="line">  <span class="comment">// 编译元素节点，处理指令</span></span><br><span class="line">  <span class="title function_">compileElement</span>(<span class="params">node</span>) &#123;&#125;</span><br><span class="line">  <span class="comment">// 编译文本节点，处理差值表达式</span></span><br><span class="line">  <span class="title function_">compileText</span>(<span class="params">node</span>) &#123;&#125;</span><br><span class="line">  <span class="comment">//判断元素属性是否为指令</span></span><br><span class="line">  <span class="title function_">isDirective</span>(<span class="params">attrName</span>) &#123;</span><br><span class="line">    <span class="comment">//指令都是以v-开头</span></span><br><span class="line">    <span class="keyword">return</span> attrName.<span class="title function_">startsWith</span>(<span class="string">&quot;v-&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 判断节点是否是元素节点</span></span><br><span class="line">  <span class="title function_">isElementNode</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="comment">//nodeType: 节点的类型  1：元素节点  3：文本节点</span></span><br><span class="line">    <span class="keyword">return</span> node.<span class="property">nodeType</span> === <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//判断节点是否是文本节点</span></span><br><span class="line">  <span class="title function_">isTextNode</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> node.<span class="property">nodeType</span> === <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-1-compile-方法实现"><a href="#9-1-compile-方法实现" class="headerlink" title="9.1 compile 方法实现"></a>9.1 compile 方法实现</h2><p>在调用<code>compile</code>方法的时候传递过来的参数<code>el</code>就是模板，也就是<code>index.html</code>中的<code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code></p><p>中的内容。</p><p>所以我们在<code>compile</code>方法中要遍历模板中的所有节点。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//编译模板，处理文本节点和元素节点.</span></span><br><span class="line">  <span class="title function_">compile</span>(<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="comment">//获取子节点.</span></span><br><span class="line">    <span class="keyword">let</span> childNodes = el.<span class="property">childNodes</span>;</span><br><span class="line">    <span class="comment">//childNodes是一个伪数组，需要转换成真正的数组，然后可以执行forEach来进行遍历，每遍历一次获取一个节点，然后判断节点的类型.</span></span><br><span class="line">    <span class="title class_">Array</span>.<span class="title function_">from</span>(childNodes).<span class="title function_">forEach</span>(<span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//处理文本节点</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isTextNode</span>(node)) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">compileText</span>(node);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isElementNode</span>(node)) &#123;</span><br><span class="line">        <span class="comment">// 处理元素节点</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">compileElement</span>(node);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//判断node节点，是有还有子节点，如果有子节点，需要递归调用compile方法</span></span><br><span class="line">      <span class="keyword">if</span> (node.<span class="property">childNodes</span> &amp;&amp; node.<span class="property">childNodes</span>.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">compile</span>(node);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>以上就是<code>compile</code>方法的基本实现.</p><h2 id="9-2-compileText方法实现"><a href="#9-2-compileText方法实现" class="headerlink" title="9.2 compileText方法实现"></a>9.2 <code>compileText</code>方法实现</h2><p><code>compileText</code>方法的作用就是对<code>对插值表达式进行解析</code>.</p><p>在编写<code>compileText</code>方法之前，我们先测试一下前面写的代码。</p><p>首先在<code>compiler.js</code>文件中的构造方法中，调用<code>compile</code>方法。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Compiler</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">vm</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">el</span> = vm.<span class="property">$el</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">vm</span> = vm;</span><br><span class="line">    <span class="comment">//调用compile方法</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">compile</span>(<span class="variable language_">this</span>.<span class="property">el</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>vue.js</code>文件中创建<code>Compiler</code>类的实例，传递的是<code>Vue</code>的实例。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vue</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="comment">// 1、通过属性保存选项的数据</span></span><br><span class="line">    <span class="comment">// options:表示在创建Vue实例的时候传递过来的参数，将其保存到$options中。</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$options</span> = options || &#123;&#125;;</span><br><span class="line">    <span class="comment">//获取参数中的data属性保存到$data中.</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$data</span> = options.<span class="property">data</span> || &#123;&#125;;</span><br><span class="line">    <span class="comment">//如果是字符串，转成dom对象</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$el</span> =</span><br><span class="line">      <span class="keyword">typeof</span> options.<span class="property">el</span> === <span class="string">&quot;string&quot;</span></span><br><span class="line">        ? <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(options.<span class="property">el</span>)</span><br><span class="line">        : options.<span class="property">el</span>;</span><br><span class="line">    <span class="comment">// 2、把data中的成员转换成getter和setter,注入到vue实例中.</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">_proxyData</span>(<span class="variable language_">this</span>.<span class="property">$data</span>);</span><br><span class="line">    <span class="comment">//3.调用observer对象，监听数据的变化</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Observer</span>(<span class="variable language_">this</span>.<span class="property">$data</span>);</span><br><span class="line">    <span class="comment">//4.调用compiler对象，解析指令和差值表达式</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Compiler</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在第四步中，创建了<code>Comiler</code>类的实例。</p><p>同时需要在<code>index.html</code>文件中引入<code>comiler.js</code>文件。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;./js/compiler.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/observer.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>注意导入的顺序。</p><p>在<code>compiler.js</code>文件中的<code>comileText</code>方法中可以先打印一下文本节点，看一下具体的文本节点。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 编译文本节点，处理差值表达式</span></span><br><span class="line"> <span class="title function_">compileText</span>(<span class="params">node</span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">dir</span>(node);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>下面完善一下<code>compileText</code>方法的实现如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 编译文本节点，处理差值表达式</span></span><br><span class="line"><span class="title function_">compileText</span>(<span class="params">node</span>) &#123;</span><br><span class="line">  <span class="comment">// console.dir(node);</span></span><br><span class="line">  <span class="comment">// &#123;&#123; msg &#125;&#125;</span></span><br><span class="line">  <span class="comment">//我们是用data中的属性值替换掉大括号中的内容</span></span><br><span class="line">  <span class="keyword">let</span> reg = <span class="regexp">/\&#123;\&#123;(.+)\&#125;\&#125;/</span>;</span><br><span class="line">  <span class="comment">//获取文本节点的内容</span></span><br><span class="line">  <span class="keyword">let</span> value = node.<span class="property">textContent</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//判断文本节点的内容是否能够匹配正则表达式</span></span><br><span class="line">  <span class="keyword">if</span> (reg.<span class="title function_">test</span>(value)) &#123;</span><br><span class="line">    <span class="comment">//获取插值表达式中的变量名,去掉空格（$1 表示获取第一个分组的内容。）</span></span><br><span class="line">    <span class="keyword">let</span> key = <span class="title class_">RegExp</span>.<span class="property">$1</span>.<span class="title function_">trim</span>();</span><br><span class="line">    <span class="comment">//根据变量名，获取data中的具体值，然后替换掉差值表达式中的变量名.</span></span><br><span class="line">    node.<span class="property">textContent</span> = value.<span class="title function_">replace</span>(reg, <span class="variable language_">this</span>.<span class="property">vm</span>[key]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时刷新浏览器，就可以看到对应效果。</p><h2 id="9-3-compileElement-方法实现"><a href="#9-3-compileElement-方法实现" class="headerlink" title="9.3 compileElement 方法实现"></a>9.3 compileElement 方法实现</h2><p><code> compileElement</code>方法，就是完成指令的解析。</p><p>在这里我们重点解析的指令为<code>v-text</code>与<code>v-model</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div v-text=&quot;msg&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; v-model=&quot;msg&quot; /&gt;</span><br></pre></td></tr></table></figure><p>这些指令本身就是<code>html</code>标签的属性。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 编译元素节点，处理指令</span></span><br><span class="line">  <span class="title function_">compileElement</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="comment">// 1、获取当前节点下的所有的属性，然后通过循环的方式，取出每个属性，判断其是否为指令</span></span><br><span class="line">    <span class="comment">// 2、 如果是指令，获取指令的名称与指令对应的值.</span></span><br><span class="line">    <span class="comment">// 3、 分别对v-text指令与v-model指令的情况进行处理.</span></span><br><span class="line">    <span class="comment">//通过node.attributes获取当前节点下所有属性，node.attributes是一个伪数组</span></span><br><span class="line">    <span class="title class_">Array</span>.<span class="title function_">from</span>(node.<span class="property">attributes</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">attr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//获取属性的名称</span></span><br><span class="line">      <span class="keyword">let</span> attrName = attr.<span class="property">name</span>;</span><br><span class="line">      <span class="comment">//判断是否为指令</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isDirective</span>(attrName)) &#123;</span><br><span class="line">        <span class="comment">//如果是指令，需要分别进行处理，也就是分别对v-text与v-model指令</span></span><br><span class="line">        <span class="comment">//进行处理。</span></span><br><span class="line">        <span class="comment">//为了避免在这里书写大量的if判断语句，这里做一个简单的处理.</span></span><br><span class="line">        <span class="comment">//对属性名字进行截取，只获取v-text/v-model中的text/model</span></span><br><span class="line">        attrName = attrName.<span class="title function_">substr</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//获取指令对应的值 v-text指令对应的值为msg,v-model指令对应的值为msg,cout</span></span><br><span class="line">        <span class="keyword">let</span> key = attr.<span class="property">value</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">update</span>(node, key, attrName);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">update</span>(<span class="params">node, key, attrName</span>) &#123;</span><br><span class="line">    <span class="comment">//根据传递过来的属性名字拼接Updater后缀获取方法。</span></span><br><span class="line">    <span class="keyword">let</span> updateFn = <span class="variable language_">this</span>[attrName + <span class="string">&quot;Updater&quot;</span>];</span><br><span class="line">    updateFn &amp;&amp; <span class="title function_">updateFn</span>(node, <span class="variable language_">this</span>.<span class="property">vm</span>[key]); <span class="comment">//注意：传递的是根据指令的值获取到的是data中对应属性的值。</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//处理v-text指令</span></span><br><span class="line">  <span class="title function_">textUpdater</span>(<span class="params">node, value</span>) &#123;</span><br><span class="line">    node.<span class="property">textContent</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//处理v-model</span></span><br><span class="line">  <span class="title function_">modelUpdater</span>(<span class="params">node, value</span>) &#123;</span><br><span class="line">    <span class="comment">//v-model是文本框的属性，给文本框赋值需要通过value属性</span></span><br><span class="line">    node.<span class="property">value</span> = value;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>通过以上的代码，我们可以看到，如果想以后在处理其它的指令，只需要添加方法就可以了，方法的名字后缀一定要有<code>Updater</code>.</p><p>这比写很多的判断语句方便多了。</p><p><code>compiler.js</code>文件完整代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Compiler</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">vm</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">el</span> = vm.<span class="property">$el</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">vm</span> = vm;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">compile</span>(<span class="variable language_">this</span>.<span class="property">el</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//编译模板，处理文本节点和元素节点.</span></span><br><span class="line">  <span class="title function_">compile</span>(<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="comment">//获取子节点.</span></span><br><span class="line">    <span class="keyword">let</span> childNodes = el.<span class="property">childNodes</span>;</span><br><span class="line">    <span class="comment">//childNodes是一个伪数组，需要转换成真正的数组，然后可以执行forEach来进行遍历，每遍历一次获取一个节点，然后判断节点的类型.</span></span><br><span class="line">    <span class="title class_">Array</span>.<span class="title function_">from</span>(childNodes).<span class="title function_">forEach</span>(<span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//处理文本节点</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isTextNode</span>(node)) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">compileText</span>(node);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isElementNode</span>(node)) &#123;</span><br><span class="line">        <span class="comment">// 处理元素节点</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">compileElement</span>(node);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//判断node节点，是有还有子节点，如果有子节点，需要递归调用compile方法</span></span><br><span class="line">      <span class="keyword">if</span> (node.<span class="property">childNodes</span> &amp;&amp; node.<span class="property">childNodes</span>.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">compile</span>(node);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 编译元素节点，处理指令</span></span><br><span class="line">  <span class="title function_">compileElement</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="comment">// 1、获取当前节点下的所有的属性，然后通过循环的方式，取出每个属性，判断其是否为指令</span></span><br><span class="line">    <span class="comment">// 2、 如果是指令，获取指令的名称与指令对应的值.</span></span><br><span class="line">    <span class="comment">// 3、 分别对v-text指令与v-model指令的情况进行处理.</span></span><br><span class="line">    <span class="comment">//通过node.attributes获取当前节点下所有属性，node.attributes是一个伪数组</span></span><br><span class="line">    <span class="title class_">Array</span>.<span class="title function_">from</span>(node.<span class="property">attributes</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">attr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//获取属性的名称</span></span><br><span class="line">      <span class="keyword">let</span> attrName = attr.<span class="property">name</span>;</span><br><span class="line">      <span class="comment">//判断是否为指令</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isDirective</span>(attrName)) &#123;</span><br><span class="line">        <span class="comment">//如果是指令，需要分别进行处理，也就是分别对v-text与v-model指令</span></span><br><span class="line">        <span class="comment">//进行处理。</span></span><br><span class="line">        <span class="comment">//为了避免在这里书写大量的if判断语句，这里做一个简单的处理.</span></span><br><span class="line">        <span class="comment">//对属性名字进行截取，只获取v-text/v-model中的text/model</span></span><br><span class="line">        attrName = attrName.<span class="title function_">substr</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//获取指令对应的值 v-text指令对应的值为msg,v-model指令对应的值为msg,cout</span></span><br><span class="line">        <span class="keyword">let</span> key = attr.<span class="property">value</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">update</span>(node, key, attrName);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">update</span>(<span class="params">node, key, attrName</span>) &#123;</span><br><span class="line">    <span class="comment">//根据传递过来的属性名字拼接Updater后缀获取方法。</span></span><br><span class="line">    <span class="keyword">let</span> updateFn = <span class="variable language_">this</span>[attrName + <span class="string">&quot;Updater&quot;</span>];</span><br><span class="line">    updateFn &amp;&amp; <span class="title function_">updateFn</span>(node, <span class="variable language_">this</span>.<span class="property">vm</span>[key]); <span class="comment">//注意：传递的是根据指令的值获取到的是data中对应属性的值。</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//处理v-text指令</span></span><br><span class="line">  <span class="title function_">textUpdater</span>(<span class="params">node, value</span>) &#123;</span><br><span class="line">    node.<span class="property">textContent</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//处理v-model</span></span><br><span class="line">  <span class="title function_">modelUpdater</span>(<span class="params">node, value</span>) &#123;</span><br><span class="line">    <span class="comment">//v-model是文本框的属性，给文本框赋值需要通过value属性</span></span><br><span class="line">    node.<span class="property">value</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 编译文本节点，处理差值表达式</span></span><br><span class="line">  <span class="title function_">compileText</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="comment">// console.dir(node);</span></span><br><span class="line">    <span class="comment">// &#123;&#123; msg &#125;&#125;</span></span><br><span class="line">    <span class="comment">//我们是用data中的属性值替换掉大括号中的内容</span></span><br><span class="line">    <span class="keyword">let</span> reg = <span class="regexp">/\&#123;\&#123;(.+)\&#125;\&#125;/</span>;</span><br><span class="line">    <span class="comment">//获取文本节点的内容</span></span><br><span class="line">    <span class="keyword">let</span> value = node.<span class="property">textContent</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断文本节点的内容是否能够匹配正则表达式</span></span><br><span class="line">    <span class="keyword">if</span> (reg.<span class="title function_">test</span>(value)) &#123;</span><br><span class="line">      <span class="comment">//获取插值表达式中的变量名,去掉空格（$1 表示获取第一个分组的内容。）</span></span><br><span class="line">      <span class="keyword">let</span> key = <span class="title class_">RegExp</span>.<span class="property">$1</span>.<span class="title function_">trim</span>();</span><br><span class="line">      <span class="comment">//根据变量名，获取data中的具体值，然后替换掉差值表达式中的变量名.</span></span><br><span class="line">      node.<span class="property">textContent</span> = value.<span class="title function_">replace</span>(reg, <span class="variable language_">this</span>.<span class="property">vm</span>[key]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//判断元素属性是否为指令</span></span><br><span class="line">  <span class="title function_">isDirective</span>(<span class="params">attrName</span>) &#123;</span><br><span class="line">    <span class="comment">//指令都是以v-开头</span></span><br><span class="line">    <span class="keyword">return</span> attrName.<span class="title function_">startsWith</span>(<span class="string">&quot;v-&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 判断节点是否是元素节点</span></span><br><span class="line">  <span class="title function_">isElementNode</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="comment">//nodeType: 节点的类型  1：元素节点  3：文本节点</span></span><br><span class="line">    <span class="keyword">return</span> node.<span class="property">nodeType</span> === <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//判断节点是否是文本节点</span></span><br><span class="line">  <span class="title function_">isTextNode</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> node.<span class="property">nodeType</span> === <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当页面首次渲染的时候，把数据更新到视图的功能，我们已经完成了，但是还没有实现对应的响应式，也就是数据更改后，视图也要进行更新。</p><p>下面我们就来实现对应的响应式机制。</p><h1 id="10、Dep类"><a href="#10、Dep类" class="headerlink" title="10、Dep类"></a>10、<code>Dep</code>类</h1><p>下面我们先来实现<code>Dep</code>这个类。</p><p>该类的功能：</p><p>收集依赖，添加观察者(<code>watcher</code>)</p><p>通知所有观察值</p><p>什么时候收集依赖呢？</p><p>也就是在<code>getter</code>中收集依赖，添加观察者</p><p>什么时候通知观察者呢？</p><p>在<code>setter</code>中通知依赖，通知观察者</p><p>在<code>dep.js</code>文件中编写如下代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dep</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//存储所有的观察者</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//添加观察者</span></span><br><span class="line">  <span class="title function_">addSub</span>(<span class="params">sub</span>) &#123;</span><br><span class="line">    <span class="comment">//判断传递过来的内容必须有值同时还必须是一个观察者，观察者中会有一个update方法</span></span><br><span class="line">    <span class="keyword">if</span> (sub &amp;&amp; sub.<span class="property">update</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">push</span>(sub);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//发送通知</span></span><br><span class="line">  <span class="title function_">notify</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">sub</span>) =&gt;</span> &#123;</span><br><span class="line">      sub.<span class="title function_">update</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改<code>Observer</code>类中的代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">defineReactive</span>(<span class="params">obj, key, val</span>) &#123;</span><br><span class="line">    <span class="comment">// console.log(&quot;this==&quot;, this);//这里this指向的是Observer</span></span><br><span class="line">    <span class="keyword">let</span> that = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="comment">//负责收集依赖，并发送通知</span></span><br><span class="line">    <span class="keyword">let</span> dep = <span class="keyword">new</span> <span class="title class_">Dep</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">walk</span>(val);</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">      <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//收集依赖，就是将watcher观察者添加到subs数组中。</span></span><br><span class="line">        <span class="comment">//这里可以通过Dep中的target来获取观察者（watcher对象），当然target属性还没有创建</span></span><br><span class="line">        <span class="comment">//后期在创建Watcher观察者的时候，来确定target属性</span></span><br><span class="line">        <span class="title class_">Dep</span>.<span class="property">target</span> &amp;&amp; dep.<span class="title function_">addSub</span>(<span class="title class_">Dep</span>.<span class="property">target</span>);</span><br><span class="line">        <span class="comment">// return obj[key];</span></span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">        <span class="comment">// console.log(&quot;this==&quot;, this);//这里this指向的是data对象。</span></span><br><span class="line">        <span class="keyword">if</span> (newVal === val) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        val = newVal;</span><br><span class="line">        that.<span class="title function_">walk</span>(newVal);</span><br><span class="line">        <span class="comment">//发送通知，更新视图</span></span><br><span class="line">        dep.<span class="title function_">notify</span>();</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>首先针对每一个响应式数据添加了一个<code>Dep</code>对象（发布者），然后在<code>set</code>方法中，当数据发生了变化后，会调用<code>dep</code>中的<code>notify</code>方法，完成更新视图的操作。</p><p>在<code>set</code>方法中添加依赖，也就是将<code>watcher</code>观察者添加到了<code>Dep</code>中的<code>subs</code>数组中。</p><p>以上代码无法进行测试，完成<code>Watcher</code>类可以进行测试</p><h1 id="11、Watcher类"><a href="#11、Watcher类" class="headerlink" title="11、Watcher类"></a>11、<code>Watcher</code>类</h1><h2 id="11-1-Watcher类创建"><a href="#11-1-Watcher类创建" class="headerlink" title="11.1 Watcher类创建"></a>11.1 <code>Watcher</code>类创建</h2><p>在编写<code>Watcher</code>类之前，我们先来看一张图，理解一下<code>Dep</code>与<code>Watcher</code>的关系</p><p>通过前面的学习，我们知道在<code>Observer</code>类中为每一个响应式的数据创建了<code>Dep</code>对象，而且在<code>getter</code> 中会收集依赖，所谓收集依赖就是将<code>watcher</code>观察者添加到<code>subs</code>数组中.</p><p>而在<code>setter</code>中会触发依赖，其实就是调用<code>Dep</code>对象中<code>notify</code>方法，该方法会获取<code>subs</code>数组中的所有的<code>watcher</code>,然后执行<code>watcher</code>中的<code>update</code>方法来更新对应的视图。</p><p><code>Watcher</code> 类的代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Watcher</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">vm, key, cb</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">vm</span> = vm;</span><br><span class="line">    <span class="comment">//data中的属性名称</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">key</span> = key;</span><br><span class="line">    <span class="comment">//回调函数负责更新视图</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cb</span> = cb;</span><br><span class="line">    <span class="comment">//获取更新前的旧值</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">oldValue</span> = vm[key];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 当数据发生变化的时候更新视图</span></span><br><span class="line">  <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//只要update方法调用，获取到的值就是新值,因为当数据发生了变化，才会调用该方法</span></span><br><span class="line">    <span class="keyword">let</span> newValue = <span class="variable language_">this</span>.<span class="property">vm</span>[<span class="variable language_">this</span>.<span class="property">key</span>];</span><br><span class="line">    <span class="keyword">if</span> (newValue === <span class="variable language_">this</span>.<span class="property">oldValue</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//调用cb回调函数更新视图，将新值传递到该回调函数中</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">cb</span>(newValue);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来还有一件事情需要处理一下：</p><p>当创建了·<code>Watcher</code>对象后，需要将当前创建的<code>Watcher</code>对象添加到<code>Dep</code>中的<code>subs</code>数组中。</p><p>我们可以查看<code>Observer</code>类，在<code>get</code>方法中已经写过将<code>Watcher</code>对象添加到<code>Dep</code>中的<code>subs</code>数组中了（<code> Dep.target &amp;&amp; dep.addSub(Dep.target);</code>），但是</p><p>问题是，我们并没有创建<code>target</code>属性，所以下面我们创建一下<code>target</code>属性。</p><p>下面在<code>Watcher</code>类的构造方法中，添加给<code>Dep</code>添加<code>target</code>属性，用来保存<code>Watcher</code>的实例。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Watcher</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">vm, key, cb</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">vm</span> = vm;</span><br><span class="line">    <span class="comment">//data中的属性名称</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">key</span> = key;</span><br><span class="line">    <span class="comment">//回调函数负责更新视图</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cb</span> = cb;</span><br><span class="line">    <span class="comment">// 把watcher对象记录添加到Dep类的静态属性target上.</span></span><br><span class="line">    <span class="title class_">Dep</span>.<span class="property">target</span> = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="comment">//触发get方法，因为在get方法中会调用addSub方法(下面我们通过vm来获取key对应的值的时候，就执行了get方法，因为我们已经将data属性编程了响应式,为其添加了`getter/setter`).</span></span><br><span class="line">    <span class="comment">//获取更新前的旧值</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">oldValue</span> = vm[key];</span><br><span class="line">    <span class="title class_">Dep</span>.<span class="property">target</span> = <span class="literal">null</span>; <span class="comment">//防止以后重复性的添加</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上内容需要重点去体会.</p><h2 id="11-2-创建Watcher对象"><a href="#11-2-创建Watcher对象" class="headerlink" title="11.2 创建Watcher对象"></a>11.2 创建<code>Watcher</code>对象</h2><p>下面来看一下关于<code>Watcher</code>对象的创建。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 编译文本节点，处理差值表达式</span></span><br><span class="line">  <span class="title function_">compileText</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="comment">// console.dir(node);</span></span><br><span class="line">    <span class="comment">// &#123;&#123; msg &#125;&#125;</span></span><br><span class="line">    <span class="comment">//我们是用data中的属性值替换掉大括号中的内容</span></span><br><span class="line">    <span class="keyword">let</span> reg = <span class="regexp">/\&#123;\&#123;(.+)\&#125;\&#125;/</span>;</span><br><span class="line">    <span class="comment">//获取文本节点的内容</span></span><br><span class="line">    <span class="keyword">let</span> value = node.<span class="property">textContent</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断文本节点的内容是否能够匹配正则表达式</span></span><br><span class="line">    <span class="keyword">if</span> (reg.<span class="title function_">test</span>(value)) &#123;</span><br><span class="line">      <span class="comment">//获取插值表达式中的变量名,去掉空格（$1 表示获取第一个分组的内容。）</span></span><br><span class="line">      <span class="keyword">let</span> key = <span class="title class_">RegExp</span>.<span class="property">$1</span>.<span class="title function_">trim</span>();</span><br><span class="line">      <span class="comment">//根据变量名，获取data中的具体值，然后替换掉差值表达式中的变量名.</span></span><br><span class="line">      node.<span class="property">textContent</span> = value.<span class="title function_">replace</span>(reg, <span class="variable language_">this</span>.<span class="property">vm</span>[key]);</span><br><span class="line">      <span class="comment">//创建Watcher对象，当数据发生变化后，更新视图</span></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Watcher</span>(<span class="variable language_">this</span>.<span class="property">vm</span>, key, <span class="function">(<span class="params">newValue</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">//newValue是更新后的值</span></span><br><span class="line">        node.<span class="property">textContent</span> = newValue;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>下面要在<code>index.html</code>文件中导入相关的<code>js</code>文件。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;./js/dep.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/watcher.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/compiler.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/observer.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>注意：以上导入文件的顺序，由于在<code>watcher.js</code>文件中使用了<code>dep.js</code>文件中的内容，所以先导入<code>dep</code>,同样在<code>compiler.js</code>文件中使用了<code>watcher.js</code>文件中内容，所以先导入了<code>watcher.js</code>.</p><p>下面可以进行测试了。</p><p>先将<code>index.html</code>文件中的，如下语句注释掉：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vm.msg = &#123; text: &quot;abc&quot; &#125;;</span><br></pre></td></tr></table></figure><p>然后，打开浏览器的控制台，输入如下内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vm.msg=&quot;abc&quot;</span><br></pre></td></tr></table></figure><p>对应的页面视图中的内容也发生了变化。这也就实现了响应式机制，所谓响应式就是当数据变化了，对应的视图也会进行更新。</p><p>所以需要在<code>textUpdater</code>和<code>modelUpdater</code>方法中完成<code>Watcher</code>对象的创建。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//处理v-text指令</span></span><br><span class="line"> <span class="title function_">textUpdater</span>(<span class="params">node, value, key</span>) &#123;</span><br><span class="line">   node.<span class="property">textContent</span> = value;</span><br><span class="line">   <span class="keyword">new</span> <span class="title class_">Watcher</span>(<span class="variable language_">this</span>.<span class="property">vm</span>, key, <span class="function">(<span class="params">newValue</span>) =&gt;</span> &#123;</span><br><span class="line">     node.<span class="property">textContent</span> = newValue;</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//处理v-model</span></span><br><span class="line"> <span class="title function_">modelUpdater</span>(<span class="params">node, value,key</span>) &#123;</span><br><span class="line">   <span class="comment">//v-model是文本框的属性，给文本框赋值需要通过value属性</span></span><br><span class="line">   node.<span class="property">value</span> = value;</span><br><span class="line">   <span class="keyword">new</span> <span class="title class_">Watcher</span>(<span class="variable language_">this</span>.<span class="property">vm</span>, key, <span class="function">(<span class="params">newValue</span>) =&gt;</span> &#123;</span><br><span class="line">     node.<span class="property">value</span> = newValue;</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">update</span>(<span class="params">node, key, attrName</span>) &#123;</span><br><span class="line">  <span class="comment">//根据传递过来的属性名字拼接Updater后缀获取方法。</span></span><br><span class="line">  <span class="keyword">let</span> updateFn = <span class="variable language_">this</span>[attrName + <span class="string">&quot;Updater&quot;</span>];</span><br><span class="line">  updateFn &amp;&amp; updateFn.<span class="title function_">call</span>(<span class="variable language_">this</span>, node, <span class="variable language_">this</span>.<span class="property">vm</span>[key], key); <span class="comment">//注意：传递的是根据指令的值获取到的是data中对应属性的值。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="12、双向数据绑定"><a href="#12、双向数据绑定" class="headerlink" title="12、双向数据绑定"></a>12、双向数据绑定</h1><p>这一小节，我们看一下<code>Vue</code>的双向数据绑定。</p><p>双向数据绑定包含两部分内容，数据变化更新视图，视图变化更新数据。</p><p>怎样实现双向绑定呢？</p><p>基本的思路就是，我们可以给文本框（第一个文本框）添加一个<code>input</code>事件，在输入完数据后触发该事件，同时将用户在文本框中输入的数据赋值给<code>data</code>中的属性（视图变化，更新数据，而当数据变化后，会执行行<code>observer.js</code>中的<code>set</code>方法，更新视图，也就是触发了响应式的机制）。</p><p>那么我们应该在哪实现数据的双向绑定呢？</p><p>我们知道，这里是对文本框的操作，所以需要<code>compiler.js</code>文件中的<code>modelUpdater</code>方法中，实现双向绑定。因为<code>modelUpdater</code>方法就是处理<code>v-model</code>.</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//处理v-model</span></span><br><span class="line">  <span class="title function_">modelUpdater</span>(<span class="params">node, value, key</span>) &#123;</span><br><span class="line">    <span class="comment">//v-model是文本框的属性，给文本框赋值需要通过value属性</span></span><br><span class="line">    node.<span class="property">value</span> = value;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Watcher</span>(<span class="variable language_">this</span>.<span class="property">vm</span>, key, <span class="function">(<span class="params">newValue</span>) =&gt;</span> &#123;</span><br><span class="line">      node.<span class="property">value</span> = newValue;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//实现双向绑定</span></span><br><span class="line">    node.<span class="title function_">addEventListener</span>(<span class="string">&quot;input&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">vm</span>[key] = node.<span class="property">value</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们为当前的文本框节点添加了<code>input</code>事件，当在文本框中输入内容的时候会触发该事件，同时，将用户在文本框节点中输入的值重新赋值给了<code>data</code>中对应的属性。</p><p>下面我们可以进行测试，在文本框中输入值，对应的差值表达式和<code>v-text</code>中的内容都会发生改变。同时在控制台中输出<code>vm.msg</code>的值会发现数据也发生了变化。</p><p>而我们知道，当给<code>data</code>中的属性赋值后，会执行<code>observer.js</code>中的<code>set</code>方法，更新视图，也就是触发了响应式的机制。</p><p>现在整个<code>Vue</code>的模拟实现，我们就完成了。</p><p>当然，我们这里只是模拟了最核心的内容也就是数据响应式与双向绑定。</p><h1 id="13、总结"><a href="#13、总结" class="headerlink" title="13、总结"></a>13、总结</h1><p>首先我们先来看一下最开始提出的问题。</p><p>第一个：给属性重新赋值成对象，是否是响应式的？答案：是响应式的。</p><p>应当我们给<code>data</code>中的<code>属性</code>进行重新赋值的时候，会执行<code>Observer</code>类中的<code>defineReactive</code>方法的<code>set</code>方法</p><p>在<code>set</code>方法中，调用了<code>walk</code>方法，该方法中判断重新给<code>data</code>属性中赋的值是否为对象，如果是对象，会将对象中的每个属性都修改成响应式的。</p><p>第二个问题：给<code>Vue</code>实例新增一个成员是否是响应式的？</p><p>例如如下代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  &lt;script&gt;</span><br><span class="line">      <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">          <span class="attr">msg</span>: <span class="string">&quot;Hello World&quot;</span>,</span><br><span class="line">          <span class="attr">count</span>: <span class="number">12</span>,</span><br><span class="line">          <span class="attr">person</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;zs&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">$data</span>.<span class="property">msg</span>);</span><br><span class="line">      <span class="comment">// vm.msg = &#123; text: &quot;abc&quot; &#125;;</span></span><br><span class="line"><span class="comment">//给Vue实例新增加了一个属性test属性</span></span><br><span class="line">      vm.<span class="property">test</span> = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在<code>index.html</code>文件中，创建了<code>Vue</code>的实例后，给<code>Vue</code>实例后新增了<code>test</code>的属性，那么这个<code>test</code>属性是否为</p><p>响应式的呢？</p><p>答案：不是响应式的。</p><p>因为，我们所有的操作都是在创建<code>Vue</code>的实例的时候完成的，也就是在<code>Vue</code>类的构造函数中完成的。</p><p>在<code>Vue</code>类的构造函数中，创建了<code>Observer</code>的实例，完成了监听数据的变化。</p><p>所以当<code>Vue</code>的实例创建完成后，在为其添加属性，该属性并不是一个响应式的。</p><p>当然，为了解决这个问题，<code>Vue</code>中也给出了相应的解决方案，可以查看官方的文档：</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 性能优化</title>
      <link href="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-性能优化"><a href="#JavaScript-性能优化" class="headerlink" title="JavaScript 性能优化"></a>JavaScript 性能优化</h1><h2 id="1、什么是内存管理"><a href="#1、什么是内存管理" class="headerlink" title="1、什么是内存管理"></a>1、什么是内存管理</h2><ul><li>申请内存空间</li><li>使用内存空间</li><li>释放内存空间</li></ul><p><code>JavaScript</code>在内存管理上与其它语言是类似的，也是经过了以上三个阶段。</p><h2 id="2、什么是垃圾回收"><a href="#2、什么是垃圾回收" class="headerlink" title="2、什么是垃圾回收"></a>2、什么是垃圾回收</h2><p>如果程序在后续的执行中，发现某些对象不再被引用时就会被认为是垃圾</p><p><code>JavaScript</code>的执行引擎会回收这些垃圾对象所占用的内存空间，这个过程就是<code>JavaScript</code>的垃圾回收。(如果某个对象一直可以被访问使用，就不是垃圾，而这种可以被访问到的对象，我们称之为’可达对象’)</p><p>所谓”可达对象”：指的就是可以被访问到的对象就是可达对象。</p><h2 id="3、引用计数算法优缺点"><a href="#3、引用计数算法优缺点" class="headerlink" title="3、引用计数算法优缺点"></a>3、引用计数算法优缺点</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">优点</span><br><span class="line">      1、发现垃圾立即回收</span><br><span class="line">      2、最大限度的减少了程序的暂停</span><br><span class="line"> 缺点</span><br><span class="line">      1、无法回收循环引用的对象</span><br><span class="line">      2、时间开销比较大</span><br></pre></td></tr></table></figure><h2 id="4、标记清除算法介绍"><a href="#4、标记清除算法介绍" class="headerlink" title="4、标记清除算法介绍"></a>4、标记清除算法介绍</h2><p>第一个阶段，遍历所有对象，找到活动的对象，然后进行标记</p><p>第二个阶段还是会遍历所有对象，并对没有标记的对象进行清除</p><h2 id="5、V8-引擎介绍"><a href="#5、V8-引擎介绍" class="headerlink" title="5、V8 引擎介绍"></a>5、V8 引擎介绍</h2><p><code>V8</code>引擎的性能是非常高的。性能高的原因：</p><p>第一：优秀的内存管理机制</p><p>第二：<code>V8</code>引擎采用即时编译。也就是可以直接将<code>javascript</code>代码翻译成机器码进行执行。这样导致的结果就是执行的速度非常快。</p><p>第三：<code>V8</code>引擎内存是有上限的，在 64 位操作系统中，内存不超过<code>1.5G</code>.对 32 位操作系统是不超过<code>800M</code>.</p><h2 id="6、V8-引擎垃圾回收的机制"><a href="#6、V8-引擎垃圾回收的机制" class="headerlink" title="6、V8 引擎垃圾回收的机制"></a>6、V8 引擎垃圾回收的机制</h2><p><code>V8</code>引擎采用分代回收的思想，将内存分为新生代和老生代。</p><p>第一步： 在 From 空间中分配了 3 个对象 A、B、C</p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B61.jpg"></p><p>第二步：<code>GC</code>进来判断对象 B 没有其他引用，可以回收，对象 A 和 C 依然为活跃对象.</p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B62.jpg"></p><p>第三步：将活跃对象 A、C 从 From 空间复制到 To 空间</p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B63.jpg"></p><p>第四步：清空 From 空间的全部内存</p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B64.jpg"></p><p>第五步：交换 From 空间和 To 空间</p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B65.jpg"></p><p>第六步：在 From 空间中又新增了 2 个对象 D、E</p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B66.jpg"></p><p>第七步：下一轮<code>GC</code>进来发现对象 D 没有引用了，做标记</p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B67.jpg"></p><p>第八步：将活跃对象 A、C、E 从 From 空间复制到 To 空间</p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B68.jpg"></p><p>第九步：清空 From 空间全部内存</p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B69.jpg"></p><p>第十步：继续交换 From 空间和 To 空间，开始下一轮</p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B610.jpg"></p><p>当一个对象经过多次复制后仍然存活，它就会被认为是生命周期较长的对象，这种生命周期较长的对象会被移动到老生代中。</p><p>对象从新生代移动到老生代的过程就叫做晋升。</p><p>对象晋升的条件主要有两个：</p><p>第一：对象从 From 空间复制到 To 空间时，会检查它的内存地址来判断这个对象是否已经经历过一次清除回收。如果已经经历过了，会将该对象从 From 空间移动到老生代空间中，如果没有，则复制到 To 空间</p><p>第二：当要从 From 空间复制一个对象到 To 空间时，如果 To 空间已经使用了超过 25%，则这个对象直接晋升到老生代中。设置 25%这个阈值的原因是当这次清除回收完成后，这个 To 空间会变为 From 空间，接下来的内存分配将在这个空间中进行。如果占比过高，内存就不够了，这样就会影响后续的内存分配。</p><p>下面我们再来看一下**<code>V8</code>引擎对老生代对象回收的实现过程。**</p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B611.jpg"></p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B612.jpg"></p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B613.jpg"></p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B614.jpg"></p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B615.jpg"></p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B616.jpg"></p><p><img src="/2022/07/13/JavaScript/JavaScript%20%E9%9D%A2%E8%AF%95%E7%B2%BE%E8%AE%B2/JavaScript%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B617.jpg"></p><h2 id="7、全局变量问题"><a href="#7、全局变量问题" class="headerlink" title="7、全局变量问题"></a>7、全局变量问题</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、全局变量查找比较消耗时间</span><br><span class="line"> 2、全局变量一直存储在内存中，降低了内存的使用。</span><br><span class="line"> 3、局部变量与全局变量重名的问题。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 基础</title>
      <link href="/2022/07/13/Vue/Vue%E5%9F%BA%E7%A1%80/Vue%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/07/13/Vue/Vue%E5%9F%BA%E7%A1%80/Vue%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Vue知识点串讲"><a href="#一、Vue知识点串讲" class="headerlink" title="一、Vue知识点串讲"></a>一、<code>Vue</code>知识点串讲</h1><p>复习一下<code>Vue</code>中的核心知识点。</p><p>复习完基本的知识点以后，后面再来看一下其它的面试内容</p><h2 id="1、基本使用"><a href="#1、基本使用" class="headerlink" title="1、基本使用"></a>1、基本使用</h2><p>下面，先来看一段最简单的代码，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;Vue基本使用&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">      &#123;&#123; msg &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      //创建vue实例</span><br><span class="line">      const app = new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data() &#123;</span><br><span class="line">          return &#123;</span><br><span class="line">            msg: &quot;hello world&quot;,</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">      setTimeout(() =&gt; &#123;</span><br><span class="line">        app.msg = &quot;hello Vue&quot;;</span><br><span class="line">      &#125;, 1000);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在上面的代码中,创建了<code>vue</code>的实例，并且指定了数据，最终数据展示在<code>id</code> 为<code>app</code>的这个<code>div</code>中，并且在停顿了 1 秒中以后，通过<code>Vue</code>的实例来修改对应的<code>msg</code>数据。</p><p>通过上面的代码，我们能够够看到<code>Vue</code>的核心理念是数据驱动的理念，所谓的数据驱动的理念：当数据发生变化的时候，用户界面也会发生相应的变化，开发者并不需要手动的去修改<code>dom</code>.</p><p>简单的理解：就是<code>vue.js</code>帮我们封装了数据和<code>dom</code>对象操作的映射，我们只需要关心数据的逻辑处理，数据的变</p><p>化就能够自然的通知页面进行页面的重新渲染。</p><p>这样做给我们带来的好处就是，我们不需要在代码中去频繁的操作<code>dom</code>了，这样提高了开发的效率，同时也避免了在操作<code>Dom</code>的时候出现的错误。</p><p><code>Vue.js</code>的数据驱动是通过<code>MVVM</code>这种框架来实现的，<code>MVVM</code> 框架主要包含三部分：<code>Model</code>,<code>View</code>,<code>ViewMode</code></p><p><code>Model</code>:指的是数据部分，对应到前端就是<code>JavaScript</code>对象。</p><p><code>View</code>:指的就是视图部分</p><p><code>ViewModel</code>: 就是连接视图与数据的中间件(中间桥梁)</p><p>以上三部分对应到代码中的位置如下图所示：</p><p><img src="/2022/07/13/Vue/Vue%E5%9F%BA%E7%A1%80/Vue%E5%9F%BA%E7%A1%80/1.png"></p><p>下面，我们再来看一张图来理解一下<code>MVVM</code>框架的作用：</p><p><img src="/2022/07/13/Vue/Vue%E5%9F%BA%E7%A1%80/Vue%E5%9F%BA%E7%A1%80/2.png"></p><p>数据(<code>Model</code>)和视图(<code>View</code>)是不能直接通讯的，而是需要通过<code>ViewModel</code>来实现双方的通讯。当数据(<code>Model</code>)变化的时候，<code>ViewModel</code>能够监听到这种变化，并及时通知<code>View</code>视图做出修改。同样的，当页面有事件触发的时候，<code>ViewModel</code>也能够监听到事件，并通知数据(<code>Model</code>)进行响应。所以<code>ViewModel</code>就相当于一个观察者，监控着双方的动作，并及时通知对方进行相应的操作。</p><p>简单的理解就是：<code>MVVM</code> 实现了将业务(数据)与视图进行分离的功能。</p><p>在这里还需要注意的一点就是：</p><p><code>MVVM</code>框架的三要素：响应式，模板引擎，渲染</p><p>响应式：<code>vue</code>如何监听数据的变化？</p><p>模板：<code>Vue</code>的模板如何编写和解析？怎样将具体的值替换掉<code>&#123;&#123;msg&#125;&#125;</code>内容，这就是模板引擎的解析。</p><p>渲染：<code>Vue</code>如何将模板转换成<code>html</code>? 其实就是有虚拟<code>DOM</code> 向真实<code>DOM</code>的转换。</p><p>在后面的课程中，我们还会深入探讨这块内容，包括我们自己模拟实现一个数据驱动的框架。</p><p>以上内容也是面试的时候，会问到的问题。</p><h2 id="2、模板语法"><a href="#2、模板语法" class="headerlink" title="2、模板语法"></a>2、模板语法</h2><h3 id="2-1-属性绑定"><a href="#2-1-属性绑定" class="headerlink" title="2.1 属性绑定"></a>2.1 属性绑定</h3><p>属性的绑定，下面先来看一下关于对属性的绑定</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">      &lt;h2 v-bind:title=&quot;msg&quot;&gt;</span><br><span class="line">        &#123;&#123;msg&#125;&#125;</span><br><span class="line">      &lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们通过<code>v-bind</code>的方式给<code>h2</code>绑定了一个<code>title</code>属性。</p><p>当然，上面的代码我们也可以使用如下的方式来进行简化</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:title</span>=<span class="string">&quot;msg&quot;</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为了避免闪烁的问题，也就是最开始的时候，出现:<code>&#123;&#123;msg&#125;&#125;</code>的情况，可以使用如下的绑定方式。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">      &lt;h2 :title=&quot;msg&quot;&gt;</span><br><span class="line">        &lt;!-- &#123;&#123;msg&#125;&#125; --&gt;</span><br><span class="line">        &lt;span v-text=&quot;msg&quot;&gt;&lt;/span&gt;</span><br><span class="line">      &lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="3、-列表渲染"><a href="#3、-列表渲染" class="headerlink" title="3、 列表渲染"></a>3、 列表渲染</h2><p>我们可以使用<code>v-for</code>指令基于一个数组来渲染一个列表.<code>v-for</code>指令需要使用<code>item in items</code>形式的语法。其中<code>items</code> 是源数组，而<code>item</code>则是被迭代的数组元素的别名。</p><p>基本实现的代码如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>列表渲染<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- users表示数组，item表示从数组中取出的对象,这个名字可以随意取 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注意 v-for必须结合key属性来使用，它会唯一标识数组中的每一项，未来当数组中的那一项改变的时候，它会只更新那一项，好处就是提升性能。注意key的值唯一，不能重复 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- index表示数组的索引值，该名字可以随意定义 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in users&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">          编号：&#123;&#123;item.id&#125;&#125; 姓名:&#123;&#123;item.name&#125;&#125;---索引:&#123;&#123;index&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">users</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">id</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">id</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">id</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">name</span>: <span class="string">&quot;老王&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">          ],</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：为了能够保证列表渲染的性能，我们需要给<code>v-for</code>添加<code>key</code>属性。<code>key</code>值必须唯一，而且不能使用<code>index</code>与<code>random</code>作为<code>key</code>的值。</p><p>关于这一点是与虚拟<code>DOM</code>算法密切相关的。在后面的课程中会最为一个重点来探讨虚拟<code>DOM</code>的内容。这也是面试的时候经常被问到的问题。</p><h2 id="4、v-model"><a href="#4、v-model" class="headerlink" title="4、v-model"></a>4、v-model</h2><p>在前面讲解<code>vue</code>简介的时候，我们说过，如果<code>model</code>中的数据发生了改变，会通过<code>ViewModel</code>通知<code>View</code>更新数据，这个效果前面我们也已经演示了，现在演示一下当<code>view</code>中的数据发生了变化后，怎样通过<code>ViewModel</code>来通知 model 来完成数据的更新。</p><p>其实这就是我们常说的，<strong>“双向数据绑定”</strong></p><p>怎样实现这种效果呢？可以通过 v-model 来实现。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- v-model指令用来双向数据绑定：就是model和view中的值进行同步变化 --&gt;</span><br><span class="line">&lt;!-- v-model只能在input/textarea/selet  也就是表单元素--&gt;</span><br></pre></td></tr></table></figure><p>具体代码实现如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;</span><br><span class="line">    &lt;title&gt;双向数据绑定&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; v-model=&quot;userName&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      const vm = new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">          userName: &quot;zhangsan&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>怎样验证 v-model 实现了双向数据绑定呢？</p><p>可以打开控制台，然后输入：<code>vm.userName</code> 发现输出的值为<code>&quot;zhangsan&quot;,</code> 取的是模型中的数据。</p><p>当在文本框中输入新的值后，在敲一下<code>vm.userName</code>发现对应的数据发生了变化，也就是视图中的数据发生了变化，模型中的数据也 会发生变化。</p><p>那么在控制台中直接给<code>vm.userName=&quot;lisi&quot;,</code>发现文本框中的值也发生了变化。</p><p>关于<code>v-model</code> 这个知识点，面试的时候经常会被问到的一个问题就是，自己能否模拟实现一个类似于<code>v-model</code>的双向数据绑定的效果。关于这个问题你可以先思考一下，在后面的课程中，我们会详细的讲解。</p><h2 id="5、v-on"><a href="#5、v-on" class="headerlink" title="5、v-on"></a>5、v-on</h2><p>怎样监听<code>dom</code>的事件呢？可以通过<code>v-on</code>指令完成，具体的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123; name &#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;!-- 通过v-on来指定对应的事件，然后后面跟上对应的方法名，方法的定义在methods完成 --&gt;</span><br><span class="line">      &lt;button v-on:click=&quot;changeName&quot;&gt;更换姓名&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      var vm = new new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">          name: &quot;zhangsan&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        // 通过methods完成函数或方法的定义</span><br><span class="line">        methods: &#123;</span><br><span class="line">          changeName() &#123;</span><br><span class="line">            // 在methods中要获取data中的属性，需要通过this来完成，this表示的是vue实例。</span><br><span class="line">            this.name = &quot;itcast&quot;;</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)();</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>还可以通过简写的形式。建议以后都使用简写的形式</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button @click=&quot;changeName&quot;&gt;更换姓名&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>带参数的形式如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button @click=&quot;changeNameByArg(&#x27;laowang&#x27;)&quot;&gt;带参数的情况&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var vm = new new Vue(&#123;</span><br><span class="line">  el: &quot;#app&quot;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    name: &quot;zhangsan&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  // 通过methods完成函数或方法的定义</span><br><span class="line">  methods: &#123;</span><br><span class="line">    changeName() &#123;</span><br><span class="line">      // 在methods中要获取data中的属性，需要通过this来完成，this表示的是vue实例。</span><br><span class="line">      this.name = &quot;itcast&quot;;</span><br><span class="line">    &#125;,</span><br><span class="line">    changeNameByArg(userName) &#123;</span><br><span class="line">      this.name = userName;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>除了绑定鼠标的单击事件以外，也可以绑定键盘的实际。</p><p>例如，页面有有一个文本框，用户在该文本框中输入内容，按下回车键，获取到用户输入的内容。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;name&#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;!-- 通过v-on来指定对应的事件，然后后面跟上对应的方法名，方法的定义在methods完成 --&gt;</span><br><span class="line">      &lt;button @click=&quot;changeName&quot;&gt;更换姓名&lt;/button&gt;</span><br><span class="line">      &lt;button @click=&quot;changeNameByArg(&#x27;laowang&#x27;)&quot;&gt;带参数的情况&lt;/button&gt;</span><br><span class="line">    &lt;!--给文本框添加键盘事件--&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; @keydown.enter=&quot;changeUserName&quot; v-model=&quot;name&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>在<code>mehtods</code>中定义<code>changeUserName</code>方法</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过methods完成函数或方法的定义</span></span><br><span class="line">       <span class="attr">methods</span>: &#123;</span><br><span class="line">         <span class="title function_">changeName</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="comment">// 在methods中要获取data中的属性，需要通过this来完成，this表示的是vue实例。</span></span><br><span class="line">           <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;itcast&quot;</span>;</span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="title function_">changeNameByArg</span>(<span class="params">userName</span>) &#123;</span><br><span class="line">           <span class="variable language_">this</span>.<span class="property">name</span> = userName;</span><br><span class="line">         &#125;,</span><br><span class="line">            <span class="comment">//定义处理文本框键盘事件的方法。</span></span><br><span class="line">         <span class="title function_">changeUserName</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">         &#125;,</span><br><span class="line">       &#125;,</span><br></pre></td></tr></table></figure><p>在上面的案例中，我们使用了按键的修饰符：<code>.enter</code>,在官方文档中，还有其它的按键修饰符，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://cn.vuejs.org/v2/guide/events.html#%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6</span><br></pre></td></tr></table></figure><p>与之相关的就是事件修饰符，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://cn.vuejs.org/v2/guide/events.html#%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6</span><br></pre></td></tr></table></figure><p>以上内容，大家可以在课下的时候，仔细看一下。</p><h2 id="6、Class-与-Style-绑定"><a href="#6、Class-与-Style-绑定" class="headerlink" title="6、Class 与 Style 绑定"></a>6、Class 与 Style 绑定</h2><p>这块主要内容主要与样式设置有关。</p><p>操作元素的 <code>class</code> 列表和内联样式是数据绑定的一个常见需求。因为它们都是 <code>attribute</code>，所以我们可以用 <code>v-bind</code> 处理它们：只需要通过表达式计算出字符串结果即可。不过，字符串拼接麻烦且易错。因此，在将 <code>v-bind</code> 用于 <code>class</code> 和 <code>style</code> 时，<code>Vue.js </code>做了专门的增强。表达式结果的类型除了字符串之外，还可以是对象或数组。</p><p>下面先来看一下<code>Class</code>的绑定。</p><p>在”列表渲染”中给每个列表项添加对应的样式。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">   <span class="selector-class">.actived</span> &#123;</span><br><span class="line">     <span class="attribute">background-color</span>: <span class="number">#dddddd</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &lt;/style&gt;</span><br></pre></td></tr></table></figure><p>下面给<code>li</code>列表添加上面所定义的样式。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;li v-for=&quot;(item, index) in users&quot; :key=&quot;item.id&quot; :class=&quot;&#123; actived: true &#125;&quot;&gt;</span><br><span class="line">          编号：&#123;&#123;item.id&#125;&#125; 姓名:&#123;&#123;item.name&#125;&#125;---索引:&#123;&#123;index&#125;&#125;</span><br><span class="line">        &lt;/li&gt;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们可以看到，给<code>li</code>标签绑定了<code>class</code>属性，同时<code>actived</code>的值为<code>true</code>,表示给<code>li</code>添加<code>actived</code>样式。</p><p>现在有一个需求，就是当鼠标移动到列表项上的时候，更改对应的背景色。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;li</span><br><span class="line">  v-for=&quot;(item,index) in users&quot;</span><br><span class="line">  :key=&quot;item.id&quot;</span><br><span class="line">  :class=&quot;&#123;actived:selectItem===item&#125;&quot;</span><br><span class="line">  @mousemove=&quot;selectItem=item&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>在对<code>class</code>进行绑定的时候，做了一个判断，判断一下<code>selectItem</code>是否与<code>item</code>相等，如果相等添加样式。</p><p>当鼠标移动到某个<code>li</code> 列表上的时候，触发<code>mousemove</code>事件，将<code>item</code>的值给<code>selectItem</code>.</p><p>在<code>data</code>中定义<code>selectItem</code>.</p><p>如下所示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">selectItem</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">users</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;老王&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure><p>完整 代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;列表渲染&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">      .actived &#123;</span><br><span class="line">        background-color: #dddddd;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;!-- users表示数组，item表示从数组中取出的对象,这个名字可以随意取 --&gt;</span><br><span class="line">        &lt;!-- 注意 v-for必须结合key属性来使用，它会唯一标识数组中的每一项，未来当数组中的那一项改变的时候，它会只更新那一项，好处就是提升性能。注意key的值唯一，不能重复 --&gt;</span><br><span class="line">        &lt;!-- index表示数组的索引值，该名字可以随意定义 --&gt;</span><br><span class="line">        &lt;li</span><br><span class="line">          v-for=&quot;(item, index) in users&quot;</span><br><span class="line">          :key=&quot;item.id&quot;</span><br><span class="line">          :class=&quot;&#123; actived: selectItem === item &#125;&quot;</span><br><span class="line">          @mousemove=&quot;selectItem = item&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          编号：&#123;&#123; item.id &#125;&#125; 姓名:&#123;&#123; item.name &#125;&#125;---索引:&#123;&#123; index &#125;&#125;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">          selectItem: &quot;&quot;,</span><br><span class="line">          users: [</span><br><span class="line">            &#123;</span><br><span class="line">              id: 1,</span><br><span class="line">              name: &quot;张三&quot;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              id: 2,</span><br><span class="line">              name: &quot;李四&quot;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              id: 3,</span><br><span class="line">              name: &quot;老王&quot;,</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>下面，我们再来看一下<code>Style</code>的绑定。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;li</span><br><span class="line">  v-for=&quot;(item, index) in users&quot;</span><br><span class="line">  :key=&quot;item.id&quot;</span><br><span class="line">  :style=&quot;&#123; backgroundColor: selectItem === item ? &#x27;#dddddd&#x27; : &#x27;transparent&#x27; &#125;&quot;</span><br><span class="line">  @mousemove=&quot;selectItem = item&quot;</span><br><span class="line">&gt;</span><br><span class="line">          编号：&#123;&#123;item.id&#125;&#125; 姓名:&#123;&#123;item.name&#125;&#125;---索引:&#123;&#123;index&#125;&#125;</span><br><span class="line">        &lt;/li&gt;</span><br></pre></td></tr></table></figure><p>通过上面的代码，可以看到通过绑定<code>style</code>的方式来处理样式是非常麻烦的。</p><h2 id="7、条件渲染"><a href="#7、条件渲染" class="headerlink" title="7、条件渲染"></a>7、条件渲染</h2><p>v-if 和 v-show 指令可以用来控制元素的显示和隐藏</p><p>下面，我们先来看一下<code>v-if</code>的应用。</p><p>这里还是对用户数据进行判断。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">      &lt;p v-if=&quot;users.length===0&quot;&gt;没有任何用户数据&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">      &lt;ul v-else&gt;</span><br><span class="line">        &lt;!-- users表示数组，item表示从数组中取出的对象,这个名字可以随意取 --&gt;</span><br><span class="line">        &lt;!-- 注意 v-for必须结合key属性来使用，它会唯一标识数组中的每一项，未来当数组中的那一项改变的时候，它会只更新那一项，好处就是提升性能。注意key的值唯一，不能重复 --&gt;</span><br><span class="line">        &lt;!-- index表示数组的索引值，该名字可以随意定义 --&gt;</span><br><span class="line">        &lt;!-- &lt;li</span><br><span class="line">          v-for=&quot;(item,index) in users&quot;</span><br><span class="line">          :key=&quot;item.id&quot;</span><br><span class="line">          :class=&quot;&#123;actived:selectItem===item&#125;&quot;</span><br><span class="line">          @mousemove=&quot;selectItem=item&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          编号：&#123;&#123;item.id&#125;&#125; 姓名:&#123;&#123;item.name&#125;&#125;---索引:&#123;&#123;index&#125;&#125;</span><br><span class="line">        &lt;/li&gt; --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;li</span><br><span class="line">          v-for=&quot;(item,index) in users&quot;</span><br><span class="line">          :key=&quot;item.id&quot;</span><br><span class="line">          :style=&quot;&#123;backgroundColor:selectItem===item?&#x27;#dddddd&#x27;:&#x27;transparent&#x27;&#125;&quot;</span><br><span class="line">          @mousemove=&quot;selectItem=item&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          编号：&#123;&#123;item.id&#125;&#125; 姓名:&#123;&#123;item.name&#125;&#125;---索引:&#123;&#123;index&#125;&#125;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们首先对<code>users</code>数组做了一个判断，如果没有数据，就在页面上展示：“没有任何用户数据”</p><p>否则渲染整个列表。</p><p>上面是关于<code>v-if</code>的使用，下面看一下<code>v-show</code>.</p><p><code>v-show</code> 是通过<code>css</code>属性<code>display</code>控制元素显示，元素总是存在的。</p><p><code>v-if</code>:通过控制<code>dom</code>来控制元素的显示和隐藏,如果一开始条件为<code>false</code>,元素是不存在的。</p><p>什么时候使用<code>v-show</code>,什么时候使用<code>v-if</code>呢？</p><p>如果需要频繁的控制元素的显示与隐藏，建议使用<code>v-show</code>. 从而避免大量<code>DOM</code>操作，提高性能。</p><p>而如果某个元素满足条件后，渲染到页面中，并且以后变化比较少，可以使用<code>v-if</code></p><h2 id="8、计算属性"><a href="#8、计算属性" class="headerlink" title="8、计算属性"></a>8、计算属性</h2><p>计算属性出现的目的是解决模板中放入过多的逻辑会让模板过重且难以维护的问题.</p><p>计算属性是根据 data 中已有的属性，计算得到一个新的属性.</p><p>下面，我们可以通过一个案例来学习一下计算属性、</p><p>在一个文本框中输入第一个名字，第二个文本框中输入第二个名字，然后展示全部名称。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt;</span><br><span class="line">        &lt;!-- 这样是模板逻辑变得非常复杂，不易维护 --&gt;</span><br><span class="line">        &lt;div&gt;全名：&#123;&#123;firstName + lastName&#125;&#125;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;div&gt;全名：&#123;&#123;fullName&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var vm = new Vue(&#123;</span><br><span class="line">            el: &#x27;#app&#x27;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                firstName: &#x27;&#x27;,</span><br><span class="line">                lastName: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            // 创建计算属性通过computed关键字，它是一个对象</span><br><span class="line">            computed: &#123;</span><br><span class="line">                // 这里fullName就是一个计算属性，它是一个函数，但这个函数可以当成属性来使用</span><br><span class="line">                fullName() &#123;</span><br><span class="line">                    return this.firstName + this.lastName</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>了解了计算属性后，下面对用户列表添加一个功能，要求是计算总人数。</p><p>可以在<code>ul</code>列表下面，添加如下的代码。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">  总人数：&#123;&#123;users.length+&quot;个&quot;&#125;&#125;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>最终展示出了，对应的人数，但是这里在模板中做了运算（在这里做了字符串拼接，虽然计算简单，但是最好还是通过计算属性来完成），为了防止在模板中放入过多的逻辑计算，这里可以使用计算属性来解决。</p><p>下面对代码进行改造：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">        &lt;!-- 总人数：&#123;&#123;users.length+&quot;个&quot;&#125;&#125; --&gt;</span><br><span class="line">        总人数：&#123;&#123;total&#125;&#125;</span><br><span class="line">      &lt;/p&gt;</span><br></pre></td></tr></table></figure><p>计算属性实现：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &quot;#app&quot;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    selectItem: &quot;&quot;,</span><br><span class="line">    users: [</span><br><span class="line">      &#123;</span><br><span class="line">        id: 1,</span><br><span class="line">        name: &quot;张三&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        id: 2,</span><br><span class="line">        name: &quot;李四&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        id: 3,</span><br><span class="line">        name: &quot;老王&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  computed: &#123;</span><br><span class="line">    total() &#123;</span><br><span class="line">      // 计算属性是有缓存性：如果值没有发生变化，则页面不会重新渲染</span><br><span class="line">      return this.users.length + &quot;个&quot;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">v</span><br></pre></td></tr></table></figure><p>通过上面的代码，可以看到使用计算属性，让界面变得更加的简洁。</p><p>使用计算属性还有一个好处：</p><p>其实细心的话就会发现，调用 methods 里的方法也能实现和计算属性一样的效果，既然使用 methods 就可以实现，那为什么还需要计算属性呢？原因就是计算属性是基于他的依赖缓存的（所依赖的还是<code>data</code>中的数据）。一个计算属性所依赖的数据发生变化时，他才会重新取值</p><p>也就是说：只要相关依赖没有改变，对此访问计算属性得到的是之前缓 存的结果，不会多次执行。</p><p>下面我们测试一下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">        &lt;!-- 总人数：&#123;&#123;users.length+&quot;个&quot;&#125;&#125; --&gt;</span><br><span class="line">        总人数：&#123;&#123;total&#125;&#125; 总人数：&#123;&#123;total&#125;&#125;</span><br><span class="line">      &lt;/p&gt;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们使用<code>total</code>了两次。</p><p>下面在看一下关于计算属性中的代码修改：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">computed: &#123; total() &#123; console.log(&quot;aaa&quot;); //</span><br><span class="line">计算属性是有缓存性：如果值没有发生变化，则页面不会重新渲染 return</span><br><span class="line">this.users.length + &quot;个&quot;; &#125;, &#125;,</span><br></pre></td></tr></table></figure><p>这里，我们通过<code>console</code>输出字符串<code>aaa</code>,但是在控制台上只是输出了一次，因为，第二次使用<code>total</code>的时候，发现值没有变化，所以直接从缓存中获取了对应的值。并没有重新进行计算，这样带来的好处就是，性能得到了提升。</p><p>下面，我们换成<code>methods</code>函数的形式来看一下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">        &lt;!-- 总人数：&#123;&#123;users.length+&quot;个&quot;&#125;&#125; --&gt;</span><br><span class="line">        总人数：&#123;&#123;total&#125;&#125; 总人数：&#123;&#123;total&#125;&#125; 总人数：&#123;&#123;getTotal()&#125;&#125;</span><br><span class="line">        总人数：&#123;&#123;getTotal()&#125;&#125;</span><br><span class="line">      &lt;/p&gt;</span><br></pre></td></tr></table></figure><p>在上面的代码中，调用了两次<code>getTotal</code>方法。</p><p><code>getTotal</code>方法的实现如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="attr">getTotal</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;methods&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">users</span>.<span class="property">length</span> + <span class="string">&quot;个&quot;</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure><p>实现的方式是差不多的，但是这里却执行了两次。（注意：由于本案例中给每一个<code>li</code>标签添加了<code> *@mousemove*</code>,所以只要鼠标移动到列表上，就会导致页面重新渲染，这时会不断的调用<code>getTotal</code>方法。）</p><p>所以通过上面案例的演示，可以明确的看出计算属性是有缓存的，也就是所依赖的<code>data</code>属性中的数据没有变化，那么是不会重新计算的。所以提升了对应的性能。</p><p>所以说，在进行大量耗时计算的时候，建议使用计算属性来完成。</p><p>如下代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">         <span class="attr">selectItem</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">         <span class="attr">num</span>: <span class="number">100</span></span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><p>在<code>data</code>中定义了<code>num</code> 属性，并且初始值为 100、</p><p>下面在计算属性中进行求和的运算，代码实现如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">         <span class="title function_">total</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">           <span class="comment">// 计算属性是有缓存性：如果值没有发生变化，则页面不会重新渲染</span></span><br><span class="line">           <span class="comment">// return this.users.length + &quot;个&quot;;</span></span><br><span class="line">           <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= <span class="variable language_">this</span>.<span class="property">num</span>; i++) &#123;</span><br><span class="line">             count += i;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> count;</span><br><span class="line">         &#125;,</span><br><span class="line">       &#125;,</span><br></pre></td></tr></table></figure><p>通过演示，可以发现计算属性只是在第一次调用的时候，执行了一次，后续由于所依赖的数据<code>num</code>没有发生变化，所以即时调用多次，也并没有重新进行计算，而是获取上次计算的结果，所以说在进行大量耗时计算的时候，通过计算属性可以提升性能。</p><h2 id="9、侦听器"><a href="#9、侦听器" class="headerlink" title="9、侦听器"></a>9、侦听器</h2><p>侦听器就是侦听<code>data</code>中的数据变化，如果数据一旦发生变化就通知侦听器所绑定方法，来执行相应的操作。从这一点上，与计算属性是非常类似的。</p><p>但是，侦听器也有自己独有的应用场景。</p><p>执行异步或开销较大的操作。</p><p>下面，先来看一下侦听器的基本使用</p><p>我们使用侦听器来统计总人数。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">   </span><br><span class="line">        总人数：&#123;&#123;totalCount&#125;&#125;</span><br><span class="line">      &lt;/p&gt;</span><br></pre></td></tr></table></figure><p>在<code>data</code>中定义<code>totalCount</code>属性。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">         <span class="attr">selectItem</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">         <span class="attr">num</span>: <span class="number">100</span>,</span><br><span class="line">         <span class="attr">totalCount</span>: <span class="number">0</span></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>使用<code>watch</code>来监听<code>users</code>数组的数据变化。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">       <span class="attr">users</span>: &#123;</span><br><span class="line">         <span class="attr">immediate</span>: <span class="literal">true</span>, <span class="comment">//立即执行</span></span><br><span class="line">         <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span><br><span class="line">           <span class="variable language_">this</span>.<span class="property">totalCount</span> = newValue.<span class="property">length</span> + <span class="string">&quot;个人&quot;</span>;</span><br><span class="line">         &#125;,</span><br><span class="line">       &#125;,</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>当<code>users</code>数组发生了变化后，就会执行<code>handler</code>这个函数，同时用于加上了<code>immediate</code>属性，并且该属性的值为<code>true</code>，表示的就是在初始化绑定的时候，也会去执行侦听器。因为<code>watch</code>在初始化绑定的时候是不会执行的，等到所监听的内容改变之后才会去侦听执行。</p><p>以上就是<code>watch</code>侦听器的基本使用，但是通过这个案例，我们发现还是使用计算属性来统计总人数更加的方便一些。</p><p>当然，侦听器有自己的应用场景，它的应用场景就是在执行异步请求或者进行开销比较大的操作的时候，会使用侦听器。</p><p>下面我们在通过一个案例，来体会一下<code>watch</code>侦听器的应用场景。</p><p>下面我们来看一个异步操作的情况。就是当用户在一个文本框中输入了用户名以后，要将输入的用户名发送到服务端，来检查该用户名是否已经被占用。</p><p>具体的实现代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;侦听器&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;span&gt;用户名&lt;/span&gt;</span><br><span class="line">        &lt;!--这里使用了lazy,保证当文本框失去焦点后，才去执行对应操作--&gt;</span><br><span class="line">        &lt;span&gt;&lt;input type=&quot;text&quot; v-model.lazy=&quot;uname&quot; /&gt;&lt;/span&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      const vm = new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">          uname: &quot;&quot;,</span><br><span class="line">          message: &quot;&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">          checkUserName: function (userName) &#123;</span><br><span class="line">            let that = this;</span><br><span class="line">            setTimeout(function () &#123;</span><br><span class="line">              if (userName === &quot;admin&quot;) &#123;</span><br><span class="line">                that.message = &quot;用户名已经存在,请更改....&quot;;</span><br><span class="line">              &#125; else &#123;</span><br><span class="line">                that.message = &quot;该用户名可以使用.....&quot;;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;, 3000);</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        watch: &#123;</span><br><span class="line">          uname: function (value) &#123;</span><br><span class="line">            //调用后台接口，来验证用户名是被占用</span><br><span class="line">            this.checkUserName(value);</span><br><span class="line">            this.message = &quot;正在校验用户名....&quot;;</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>以上的案例，就是通过<code>watch</code>来监听<code>uname</code>的值是否发生变化，如果发生了变化，就通过发送异步请求来检查<code>uname</code>中的值，是否已经被占用。</p><p>通过以上的案例：我们可以看到<code>watch</code>是允许异步操作的，并且在我们得到最终的结果前，可以设置中间状态，这些都是计算属性无法做到的。</p><p>最后我们把计算属性与侦听器做一个总结，看一下它们的应用场景。</p><p>第一点：语境上的差异：</p><p><code>watch</code>适合一个值发生了变化，对应的要做一些其它的事情，适合一个值影响多个值的情形。</p><p>例如，上面案例中的用户名检测，这里是一个<code>uname</code>发生了变化，但是这里做了很多其它的事情，例如修改<code>message</code>的值，发送异步请求。</p><p>而计算属性<code>computed</code>:一个值由其它的值得来，其它值发生了变化，对应的值也会变化，适合做多个值影响一个值的情形。</p><p>例如如下代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="title function_">fullName</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span>+<span class="string">&#x27; &#x27;</span>+<span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二点：计算属性有缓存性。</p><p>由于这个特点，我们在实际的应用中，能用计算属性的，会首先考虑先使用计算属性。</p><p>第三点：侦听器选项提供了更加通用的方法，适合执行异步操作或者较大开销操作。</p><h2 id="10、生命周期简介"><a href="#10、生命周期简介" class="headerlink" title="10、生命周期简介"></a>10、生命周期简介</h2><p>每个<code>Vue</code>实例在被创建时都要经过一系列的初始化过程，例如：需要设置数据的监听，编译模板，将实例挂载到<code>DOM</code>上，并且在数据变化时更新<code>DOM</code>等，这些过程统称为<code>Vue</code>实例的<code>生命周期</code>。同时在这个过程中也会运行一些叫做<strong>生命周期钩子</strong>的函数，这给了用户在不同阶段添加自己的代码的机会。</p><p>下面，我们来看一下这些钩子函数的应用。</p><p>通过一个异步获取列表数据的案例，来查看这些生命周期的钩子函数应用。</p><p>在这里是通过异步的方式获取用户列表的数据。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>列表渲染<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="selector-class">.actived</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">background-color</span>: <span class="number">#dddddd</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;users.length===0&quot;</span>&gt;</span>没有任何用户数据<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-else</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- users表示数组，item表示从数组中取出的对象,这个名字可以随意取 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 注意 v-for必须结合key属性来使用，它会唯一标识数组中的每一项，未来当数组中的那一项改变的时候，它会只更新那一项，好处就是提升性能。注意key的值唯一，不能重复 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- index表示数组的索引值，该名字可以随意定义 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- &lt;li</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">          v-for=&quot;(item,index) in users&quot;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">          :key=&quot;item.id&quot;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">          :class=&quot;&#123;actived:selectItem===item&#125;&quot;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">          @mousemove=&quot;selectItem=item&quot;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">          编号：&#123;&#123;item.id&#125;&#125; 姓名:&#123;&#123;item.name&#125;&#125;---索引:&#123;&#123;index&#125;&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">        &lt;/li&gt; --&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in users&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:style</span>=<span class="string">&quot;&#123;backgroundColor:selectItem===item?&#x27;#dddddd&#x27;:&#x27;transparent&#x27;&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          @<span class="attr">mousemove</span>=<span class="string">&quot;selectItem=item&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          编号：&#123;&#123;item.id&#125;&#125; 姓名:&#123;&#123;item.name&#125;&#125;---索引:&#123;&#123;index&#125;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 总人数：&#123;&#123;users.length+&quot;个&quot;&#125;&#125; --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 总人数：&#123;&#123;total&#125;&#125; 总人数：&#123;&#123;total&#125;&#125; 总人数：&#123;&#123;getTotal()&#125;&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">        总人数：&#123;&#123;getTotal()&#125;&#125; --&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        总人数：&#123;&#123;totalCount&#125;&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">selectItem</span>: <span class="string">&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">num</span>: <span class="number">100</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">totalCount</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//指定users默认数据为一个空数组。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">users</span>: [],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//组件实例已创建时，执行created方法，来调用getUserList方法，发送异步请求获取数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//将获取到的数据交个users这个状态数组。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">async</span> <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">const</span> users = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getUserList</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">users</span> = users;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">getTotal</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;methods&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">users</span>.<span class="property">length</span> + <span class="string">&quot;个&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//在getUserList方法中，模拟一个异步请求。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">getUserList</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">resolve</span>([</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">id</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">id</span>: <span class="number">2</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">id</span>: <span class="number">3</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">name</span>: <span class="string">&quot;老王&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                ]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;, <span class="number">2000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">watch</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">users</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">immediate</span>: <span class="literal">true</span>, <span class="comment">//立即执行</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">this</span>.<span class="property">totalCount</span> = newValue.<span class="property">length</span> + <span class="string">&quot;个人&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// computed: &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//   total() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     console.log(&quot;aaa&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     // 计算属性是有缓存性：如果值没有发生变化，则页面不会重新渲染</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     // return this.users.length + &quot;个&quot;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     let count = 0;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     for (let i = 0; i &lt;= this.num; i++) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//       count += i;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     return count;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//   &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的代码，还是对原有的“列表渲染”内容进行更改。</p><p>第一：将<code>users</code>的值定义为空数组</p><p>第二：定义<code>getUserList</code>方法，在该方法中模拟异步操作，最终返回的是一个<code>Promise</code>对象。</p><p>第三：在<code>created</code>阶段调用<code>getUserList</code>方法来获取数据，将获取到的数据赋值给<code>users</code>这个状态数组，注意这里需要将<code>created</code>修改成<code>async</code>与<code>await</code>的形式。同时还要注意<code>created</code>的执行时机：组件实例已创建时，执行 created 方法。</p><p>现在已经对生命周期有了一个简单的了解，下面我们继续探讨生命周期的内容。</p><h2 id="11、生命周期探讨"><a href="#11、生命周期探讨" class="headerlink" title="11、生命周期探讨"></a>11、生命周期探讨</h2><p>在这一小节中，我们看一下<code>vue</code>生命周期中其它的一些钩子函数内容。</p><p>其实<code>Vue</code>实例的生命周期，主要分为三个阶段，分别为</p><ul><li>挂载(初始化相关属性,例如<code>watch</code>属性，<code>method</code>属性)<ol><li><code>beforeCreate</code></li><li><code>created</code></li><li><code>beforeMount</code></li><li><code>mounted</code></li></ol></li><li>更新(元素或组件的变更操作)<ol><li><code>beforeUpdate</code></li><li><code>updated</code></li></ol></li><li>销毁（销毁相关属性）<ol><li><code>beforeDestroy</code></li><li><code>destroyed</code></li></ol></li></ul><p>下面，我们再来看一道面试题：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">关于Vue的生命周期，下列哪项是不正确的？()[单选题]</span><br><span class="line">A、Vue 实例从创建到销毁的过程，就是生命周期。</span><br><span class="line">B、页面首次加载会触发beforeCreate, created, beforeMount, mounted, beforeUpdate, updated。</span><br><span class="line">C、created表示完成数据观测，属性和方法的运算，初始化事件，$el属性还没有显示出来。</span><br><span class="line">D、DOM渲染在mounted中就已经完成了。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分析：</p><p>选项<code>A</code>是没有问题的，<code>Vue</code>实例从创建到销毁的过程就是生命周期。</p><p>关于<code>B</code>选项，我们可以通过写一个程序来进行验证。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;生命周期&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;&#123;&#123; foo &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      const vm = new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">          foo: &quot;foo&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeCreate() &#123;</span><br><span class="line">          console.log(&quot;beforCreate&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line">          console.log(&quot;created&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeMount() &#123;</span><br><span class="line">          console.log(&quot;beforeMount&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line">          console.log(&quot;mounted&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeUpdate() &#123;</span><br><span class="line">          console.log(&quot;beforeUpdate&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line">        updated() &#123;</span><br><span class="line">          console.log(&quot;updated&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeDestroy() &#123;</span><br><span class="line">          console.log(&quot;beforeDestroy&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line">        destroyed() &#123;</span><br><span class="line">          console.log(&quot;destroyed&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;script&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们将所有的钩子函数都添加上了，然后打开浏览器，看下执行结果：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">beforCreate</span><br><span class="line">created</span><br><span class="line">beforeMount</span><br><span class="line">mounted</span><br></pre></td></tr></table></figure><p>以上就是初次加载时所执行的钩子函数，并没有<code>beforeUpdate</code> 与<code>updated</code>,所以选项<code>B</code>是错误的。</p><p>那么<code>beforeUpdate</code>与<code>updated</code>什么时候会执行呢？是在，组件或者是元素更新的时候。</p><p>下面，我们来测试一下，看一下效果。</p><p>首先增加一个”更新”按钮</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">      &#123;&#123;foo&#125;&#125;</span><br><span class="line">      &lt;button @click=&quot;update&quot;&gt;更新&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>对应的<code>update</code>方法的实现如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="attr">update</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">foo</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure><p>在<code>update</code>方法中，修改了<code>foo</code>属性的值。打开浏览器，单击“更新”按钮后，看到的效果如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">beforeUpdate</span><br><span class="line">updated</span><br></pre></td></tr></table></figure><p>通过以上的测试，可以验证在更新元素的时候，会执行在“更新”阶段的钩子函数。</p><p>下面，我们在测试一下，看一下“销毁”阶段的钩子函数的执行。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">      &#123;&#123;foo&#125;&#125;</span><br><span class="line">      &lt;button @click=&quot;update&quot;&gt;更新&lt;/button&gt;</span><br><span class="line">      &lt;button @click=&quot;destroy&quot;&gt;销毁&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>在上面的代码中增加了一个销毁的按钮，对应的<code>destroy</code>方法的实现如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">      <span class="attr">update</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">foo</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">destroy</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//销毁资源</span></span><br><span class="line">        <span class="variable language_">this</span>.$destroy();</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>在<code>destroy</code>方法中，调用了系统中的<code>$destroy</code>方法销毁了所有资源，这时会触发销毁阶段的钩子函数，所以这时会输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">beforeDestroy</span><br><span class="line">destroyed</span><br></pre></td></tr></table></figure><p>这时，如果你去单击“更新”按钮，就会发现什么效果也没有了，也就是无法完成元素的更新了，因为元素已经被销毁了。</p><p>下面，我们通过官方的生命周期图来再次看一下整个生命周期的流程。也是为了看一下上面所出题的<code>C</code>和<code>D</code>的选项是说法否正确。</p><p><img src="/2022/07/13/Vue/Vue%E5%9F%BA%E7%A1%80/Vue%E5%9F%BA%E7%A1%80/lifecycle.png"></p><p><code>beforeCreate</code>: <code>Vue</code>实例初始化之后，以及事件初始化，以及组件的父子关系确定后执行该钩子函数，一般在开发中很少使用</p><p><code>created</code>: 在调用该方法之前，初始化会被使用到的状态，状态包括<code>props</code>,<code>methods</code>,<code>data</code>,<code>computed</code>,<code>watch</code>.</p><p>而且会实现对<code>data</code>中属性的监听，也就是在<code>created</code>的时候数据已经和<code>data</code>属性进行了绑定。(放在<code>data</code>中的属性当值发生改变的时候，视图也会改变)。同时也会对传递到组件中的数据进行校验。</p><p>所以在执行<code>created</code>的时候，所有的状态都初始化完成，我们也完全可以在该阶段发送异步的<code>ajax</code>请求，获取数据。</p><p>但是，在<code>created</code>方法中，是无法获取到对应的的<code>$el</code>选项,也就是无法获取<code>Dom</code>. 所以说上题中选项<code>c</code>的说法是正确的。</p><p>如下代码所示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;created&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;el===&quot;</span>, <span class="variable language_">this</span>.<span class="property">$el</span>);<span class="comment">// undefined</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;data==&quot;</span>, <span class="variable language_">this</span>.<span class="property">$data</span>);<span class="comment">// 可以获取数据</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo==&quot;</span>, <span class="variable language_">this</span>.<span class="property">foo</span>);<span class="comment">//可以获取数据</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><code>created</code>方法执行完毕后，下面会判断对象中有没有<code>el</code>选项。如果有，继续执行下面的流程，也就是判断是否有<code>template</code>选项，如果没有<code>el</code>选项，则停止整个生命周期的流程，直到执行了<code>vm.$mount(el)</code></p><p>后，才会继续向下执行生命周期的流程。</p><p>下面我们测试一下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">const vm = new Vue(&#123;</span><br><span class="line">  // el: &quot;#app&quot;,  //去掉了el选项</span><br><span class="line">  data: &#123;</span><br><span class="line">    foo: &quot;fooData&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    update: function () &#123;</span><br><span class="line">      this.foo = &quot;hello&quot;;</span><br><span class="line">    &#125;,</span><br><span class="line">    destroy: function () &#123;</span><br><span class="line">      //销毁资源</span><br><span class="line">      this.$destroy();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeCreate() &#123;</span><br><span class="line">    console.log(&quot;beforCreate&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    console.log(&quot;created&quot;);</span><br><span class="line">    console.log(&quot;el===&quot;, this.$el);</span><br><span class="line">    console.log(&quot;data==&quot;, this.$data);</span><br><span class="line">    console.log(&quot;foo==&quot;, this.foo);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeMount() &#123;</span><br><span class="line">    console.log(&quot;beforeMount&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(&quot;mounted&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeUpdate() &#123;</span><br><span class="line">    console.log(&quot;beforeUpdate&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  updated() &#123;</span><br><span class="line">    console.log(&quot;updated&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeDestroy() &#123;</span><br><span class="line">    console.log(&quot;beforeDestroy&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  destroyed() &#123;</span><br><span class="line">    console.log(&quot;destroyed&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们将<code>el</code>选项去掉了，运行上面的代码后，我们发现执行完<code>created</code>方法后，整个流程就停止了。</p><p>现在，我们不添加<code>el</code>选项，但是手动执行<code>vm.$mount(el)</code>,也能够使暂停的生命周期进行下去。</p><p>如下代码所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">const vm = new Vue(&#123;</span><br><span class="line">  // el: &quot;#app&quot;,//去掉了el选项</span><br><span class="line">  data: &#123;</span><br><span class="line">    foo: &quot;fooData&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    update: function () &#123;</span><br><span class="line">      this.foo = &quot;hello&quot;;</span><br><span class="line">    &#125;,</span><br><span class="line">    destroy: function () &#123;</span><br><span class="line">      //销毁资源</span><br><span class="line">      this.$destroy();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeCreate() &#123;</span><br><span class="line">    console.log(&quot;beforCreate&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    console.log(&quot;created&quot;);</span><br><span class="line">    console.log(&quot;el===&quot;, this.$el);</span><br><span class="line">    console.log(&quot;data==&quot;, this.$data);</span><br><span class="line">    console.log(&quot;foo==&quot;, this.foo);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeMount() &#123;</span><br><span class="line">    console.log(&quot;beforeMount&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(&quot;mounted&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeUpdate() &#123;</span><br><span class="line">    console.log(&quot;beforeUpdate&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  updated() &#123;</span><br><span class="line">    console.log(&quot;updated&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeDestroy() &#123;</span><br><span class="line">    console.log(&quot;beforeDestroy&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  destroyed() &#123;</span><br><span class="line">    console.log(&quot;destroyed&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">vm.$mount(&quot;#app&quot;); //添加了$mount方法</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>运行上面的代码，可以看到，虽然<code>vm</code>对象中没有<code>el</code>参数，但是通过<code>$mount(el)</code>动态添加的方式，也能够使生命周期顺利进行。</p><p>我们继续向下看，就是判断在对象中是否有<code>template</code>选项。</p><p>第一：如果<code>Vue</code>实例对象中有<code>template</code>参数选项，则将其作为模板编译成<code>render</code>函数，来完成渲染。</p><p>第二：如果没有<code>template</code>参数选项，则将外部的<code>HTML作</code>为模板编译（<code>template</code>），也就是说，<code>template</code>参数选项的优先级要比外部的<code>HTML</code>高</p><p>第三：如果第一条,第二条件都不具备，则报错</p><p>下面，我们看一下添加<code>template</code>的情况。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;生命周期2&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      const vm = new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        template: &quot;&lt;p&gt;Hello &#123;&#123;message&#125;&#125;&lt;/p&gt;&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">          message: &quot;vue&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>以上是在<code>Vue</code>实例中添加<code>template</code>的情况。</p><p>那么这里有一个比较有趣的问题就是，当模板同时放在<code>template</code>参数选项和外部<code>HTML</code>中，会出现什么情况呢？</p><p>如下代码所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;生命周期2&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">      &lt;p&gt;你好&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      const vm = new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        template: &quot;&lt;p&gt;Hello &#123;&#123;message&#125;&#125;&lt;/p&gt;&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">          message: &quot;vue&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们添加了<code>template</code>属性，同时也在外部添加了模板内容，但是最终在页面上显示的是<code>Hello vue</code> 而不是“你好”。就是因为<code>template</code>参数的优先级比外部<code>HTML</code>的优先级要高。</p><p>当然，我们在开发中，基本上都是使用外部的<code>HTML</code>模板形式，因为更加的灵活。</p><p>在这里，还需要你再次思考一个问题，就是为什么先判断 <code>el</code> 选项，然后在判断<code>template</code>选项呢？</p><p>其实通过上面的总结，我们是可以完全总结出来的。</p><p>就是因为<code>Vue</code>需要通过<code>el</code>的“选择器”找到对应的<code>template</code>.也就是说，<code>Vue</code>首先通过<code>el</code>参数去查找对应的<code>template</code>.如果没有找到<code>template</code>参数，则到外部<code>HTML</code>中查找，找到后将模板编译成<code>render</code></p><p>函数（<code>Vue</code>的编译实际上就是指<code>Vue</code>把模板编译成<code>render</code>函数的过程）。</p><p>下面，我们继续看一下生命周期的流程图。</p><p>接下来会触发<code>beforeMount</code>这个钩子函数：</p><p>在执行该钩子函数的时候，虚拟<code>DOM</code>已经创建完成，马上就要渲染了，在这里可以更改<code>data</code>中的数据，不会触发<code>updated</code>, 其实在<code>created</code>中也是可以更改数据，也不会触发<code>updated</code>函数</p><p>测试代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">beforeMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;beforeMount&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;beforeMount el===&quot;</span>, <span class="variable language_">this</span>.<span class="property">$el</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;data==&quot;</span>, <span class="variable language_">this</span>.<span class="property">$data</span>);</span><br><span class="line">        <span class="comment">//this.foo = &quot;abc&quot;; //修改数据</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo==&quot;</span>, <span class="variable language_">this</span>.<span class="property">foo</span>);</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure><p>通过上面的代码，我们可以获取<code>el</code>中的内容，同时也可以修改数据。</p><p>但是，这里需要注意的输入的<code>el</code>中的内容，<code>&#123;&#123;foo&#125;&#125;</code>还没有被真正的数据替换掉。而且对应的内容还没有挂载到页面上。</p><p>下面执行了<code>Create VM.$el and replace &quot;el&quot; with it</code></p><p>经过这一步后，在模板中所写的<code>&#123;&#123;foo&#125;&#125;</code>会被具体的数据所替换掉。</p><p>所以下面执行<code>mounted</code>的时候，可以看到真实的数据。同时整个组件内容已经挂载到页面中了，数据以及真实<code>DOM</code>都已经处理好了，可以在这里操作真实<code>DOM</code>了，也就是在<code>mounted</code>的时候，页面已经被渲染完毕了，在这个钩子函数中，我们可以去发送<code>ajax</code>请求。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mounted&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mounted el===&quot;</span>, <span class="variable language_">this</span>.<span class="property">$el</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;data==&quot;</span>, <span class="variable language_">this</span>.<span class="property">$data</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo==&quot;</span>, <span class="variable language_">this</span>.<span class="property">foo</span>);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>所以说，最开始的问题中，<code>D</code>选项：<code>DOM渲染在mounted中就已经完成了</code>这句话的描述也是正确的。</p><p>下面继续看生命周期的流程，如下图所示：</p><p><img src="/2022/07/13/Vue/Vue%E5%9F%BA%E7%A1%80/Vue%E5%9F%BA%E7%A1%80/update.png"></p><p>当整个组件挂在完成后，有可能会进行数据的修改，当<code>Vue</code>发现<code>data</code>中的数据发生了变化，会触发对应组件的重新渲染，先后调用了<code>beforeUpdate</code> 和<code>updated</code>钩子函数。</p><p>在<code>updated</code>之前<code>beoreUpdate</code>之后有一个非常重要的操作就是虚拟<code>DOM</code>会重新构建，也就是新构建的虚拟<code>DOM</code>与上一次的虚拟<code>DOM</code>树利用<code>diff</code>算法进行对比之后重新渲染。</p><p>而到了<code>updated</code>这个方法，就表示数据已经更新完成，<code>dom</code>也重新<code>render</code>完成。</p><p>下面如果我们调用了<code>vm.$destroy</code>方法后，就会销毁所有的资源。</p><p><img src="/2022/07/13/Vue/Vue%E5%9F%BA%E7%A1%80/Vue%E5%9F%BA%E7%A1%80/destroyed.png"></p><p>首先会执行<code>beforeDestroy</code> 这个钩子函数，这个钩子函数在实例销毁前调用，在这一步，实例仍然可用。</p><p>在该方法中，可以做一些清理的工作，例如：清除定时器等。</p><p>但是执行到<code>destroyed</code>钩子函数的时候，<code>Vue</code>实例已经被销毁，所有的事件监听器会被移除，所有的子实例也会被销毁。</p><p>最后做一个简单的总结：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">beforeCreate( )// 该钩子函数执行时，组件实例还未创建.</span><br><span class="line">created()//组件初始化完毕，各种数据可以使用，可以使用ajax发送异步请求获取数据</span><br><span class="line">beforeMounted()// 未执行渲染，更新，虚拟DOM完成，真实DOM未创建</span><br><span class="line">mounted()// 初始化阶段结束，真实DOM已经创建，可以发送异步请求获取数据,也可以访问dom元素</span><br><span class="line">beforeUpdate()//更新前，可用于获取更新前各种状态数据</span><br><span class="line">updated()//更新后执行该钩子函数，所有的状态数据是最新的。</span><br><span class="line">beforeDestroy() // 销毁前执行，可以用于一些定时器的清除。</span><br><span class="line">destroyed()//组件已经销毁，事件监听器被移除，所有的子实例也会被销毁。</span><br></pre></td></tr></table></figure><p>以上为生命周期的内容。</p><h2 id="12、组件化应用"><a href="#12、组件化应用" class="headerlink" title="12、组件化应用"></a>12、组件化应用</h2><h3 id="12-1-组件概述"><a href="#12-1-组件概述" class="headerlink" title="12.1 组件概述"></a>12.1 组件概述</h3><p>在这一小节中，重点要理解的就是组件的编程思想。</p><p>组件表示页面中的部分功能（包含自己的逻辑与样式），可以组合多个组件实现完整的页面功能。</p><p>如下图所示：</p><p><img src="/2022/07/13/Vue/Vue%E5%9F%BA%E7%A1%80/Vue%E5%9F%BA%E7%A1%80/%E7%BB%84%E4%BB%B6.png"></p><p><strong>问题是，如何确定页面中哪些内容划分到一个组件中呢？</strong></p><p>但你如何确定应该将哪些部分划分到一个组件中呢？你可以将组件当作一种函数或者是对象来考虑（函数的功能是单一的），根据[<strong>单一功能原则</strong>]来判定组件的范围。也就是说，一个组件原则上只能负责一个功能。如果它需要负责更多的功能，这时候就应该考虑将它拆分成更小的组件。</p><p>当然，在上图中，我们发现’Name‘和’Price’ 表头 并没有单独的划分到一个组件中，主要考虑的是功能简单，就是展示的作用，所以没有划分到单独一个组件中。如果，该表头具有了一些比较复杂的功能，例如排序。那么这里可以单独的将表头内容划分到一个组件中。</p><p>组件有什么特点呢？</p><p>可复用、维护、可组合</p><p>可复用：每个组件都是具有独立功能的，它可以被使用在多个场景中。</p><p>可组合：一个组件可以和其它的组件一起使用或者可以直接嵌套在另一个组件内部。</p><p>可维护：每个组件仅仅包含自身的逻辑，更容易被理解和维护。</p><p>下面，看一下怎样创建组件？</p><h3 id="12-2-组件的基本使用"><a href="#12-2-组件的基本使用" class="headerlink" title="12.2 组件的基本使用"></a>12.2 组件的基本使用</h3><p>组件具体的创建过程如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;index&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;我是首页的组件&lt;/div&gt;&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>第一个参数指定了所创建的组件的名字，第二个参数指定了模板。</p><p>组件创建好以后，具体的使用方式如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">index</span>&gt;</span><span class="tag">&lt;/<span class="name">index</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：1. 模板 template 中只能有一个根节点;2. 组件的名字，如果采用驼峰命令的话，在使用的时候，就要加上 “-”，比如组件名字叫 indexA，那么在使用的时候就叫 index-a。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;componentA&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;创建一个新的组件&lt;/div&gt;&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>组件的使用</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component-a</span>&gt;</span><span class="tag">&lt;/<span class="name">component-a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 Vue 实例中所使用的选项，在组件中都可以使用<strong>，但是要注意 data,在组件中使用时必须是一个函数。</strong></p><p>下面创建一个 about 组件。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;about&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;button @click=&quot;showMsg&quot;&gt;单击&lt;/button&gt;&lt;/div&gt;&#x27;</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&quot;大家好&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">showMsg</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">msg</span> = <span class="string">&quot;关于组件&quot;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>组件的使用如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">about</span>&gt;</span><span class="tag">&lt;/<span class="name">about</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在组件中关于 data 不是一个对象，而是一个函数的原因，官方文档有明确的说明</p><p><a href="https://cn.vuejs.org/v2/guide/components.html">https://cn.vuejs.org/v2/guide/components.html</a></p><p>组件创建完整的代码如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>组件创建<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">component-a</span>&gt;</span><span class="tag">&lt;/<span class="name">component-a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">index</span>&gt;</span><span class="tag">&lt;/<span class="name">index</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">index</span>&gt;</span><span class="tag">&lt;/<span class="name">index</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">about</span>&gt;</span><span class="tag">&lt;/<span class="name">about</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;componentA&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;创建一个新的组件&lt;/div&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;index&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;我是首页的组件&lt;/div&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;about&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;button @click=&quot;showMsg&quot;&gt;单击&lt;/button&gt;&lt;/div&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&quot;大家好&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          &#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">showMsg</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">msg</span> = <span class="string">&quot;关于组件&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在使用组件的时候，需要注意以下几点内容：</p><p>第一点：<code>data</code>必须是一个函数</p><p>关于这一点，官方文档有比较详细清楚的说明：<code>https://cn.vuejs.org/v2/guide/components.html</code></p><p>第二：组件模板中必须有一个跟元素。</p><p>第三：组件模板内容可以使用模板字符串。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vue.component(&quot;about&quot;, &#123; template: `</span><br><span class="line">&lt;div&gt;</span><br><span class="line">                 &#123;&#123;msg&#125;&#125;</span><br><span class="line">                &lt;button @click=&#x27;showMsg&#x27;&gt;单击</span><br><span class="line">                &lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">`, data() &#123; return &#123; msg: &quot;大家好&quot;, &#125;; &#125;, methods: &#123; showMsg() &#123; this.msg =</span><br><span class="line">&quot;关于VUE组件&quot;; &#125;, &#125;, &#125;);</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们在组件的模板中使用类模板字符串，这样就可以调整对应的格式，例如换行等。</p><p>第四：现在我们创建的组件是全局组件，可以在其它组件中使用。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;组件基本使用&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">      &lt;index&gt;&lt;/index&gt;</span><br><span class="line">      &lt;component-a&gt;&lt;/component-a&gt;</span><br><span class="line">      &lt;about&gt;&lt;/about&gt;</span><br><span class="line">      &lt;!-- 使用HelloWorld组件 --&gt;</span><br><span class="line">      &lt;hello-world&gt;&lt;/hello-world&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      Vue.component(&quot;index&quot;, &#123;</span><br><span class="line">        template: &quot;&lt;div&gt;我是Index组件&lt;/div&gt;&quot;,</span><br><span class="line">      &#125;);</span><br><span class="line">      //   创建了HelloWorld组件</span><br><span class="line">      Vue.component(&quot;HelloWorld&quot;, &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">          return &#123;</span><br><span class="line">            msg: &quot;Hello World&quot;,</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: &quot;&lt;div&gt;&#123;&#123; msg&#125;&#125;&lt;/div&gt;&quot;,</span><br><span class="line">      &#125;);</span><br><span class="line">      //   使用HelloWorld组件</span><br><span class="line">      Vue.component(&quot;componentA&quot;, &#123;</span><br><span class="line">        template: &quot;&lt;div&gt;我是一个新的组件:&lt;HelloWorld&gt;&lt;/HelloWorld&gt;&lt;/div&gt;&quot;,</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      Vue.component(&quot;about&quot;, &#123;</span><br><span class="line">        template: `&lt;div&gt;</span><br><span class="line">                 &#123;&#123;msg&#125;&#125;</span><br><span class="line">                &lt;button @click=&#x27;showMsg&#x27;&gt;单击</span><br><span class="line">                &lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;`,</span><br><span class="line">        data() &#123;</span><br><span class="line">          return &#123;</span><br><span class="line">            msg: &quot;大家好&quot;,</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">          showMsg() &#123;</span><br><span class="line">            this.msg = &quot;关于VUE组件&quot;;</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">      const vm = new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;&#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上面的代码中，我们又创建了一个<code>HelloWorld</code>组件，并且在<code>componentA</code>组件中去使用了<code>HelloWorld</code>组件，这里还需要注意的一点就是，在<code>componentA</code>这个组件中使用<code>HelloWorld</code>这个组件的时候，可以使用驼峰命名的方式，但是在<code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code>这个普通的标签模板中，必须使用短横线的方式，才能使用组件。</p><h3 id="12-3-局部组件注册"><a href="#12-3-局部组件注册" class="headerlink" title="12.3 局部组件注册"></a>12.3 局部组件注册</h3><p>我们可以在一个组件中，再次注册另外一个组件，这样就构成了父子关系。</p><p>可以通过 components 来创建对应的子组件。</p><p>组件的创建过程如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">Vue.component(&quot;father&quot;, &#123;</span><br><span class="line">  template: &quot;&lt;div&gt;&lt;p&gt;我是父组件&lt;/p&gt;&lt;son&gt;&lt;/son&gt;&lt;/div&gt;&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    // 创建一个子组件</span><br><span class="line">    son: &#123;</span><br><span class="line">      template: &quot;&lt;p&gt;我是子组件&lt;/p&gt;&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &quot;#app&quot;,</span><br><span class="line">  data: &#123;&#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>组件的使用</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">father</span>&gt;</span><span class="tag">&lt;/<span class="name">father</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;</span><br><span class="line">    &lt;title&gt;父子组件创建&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">      &lt;father&gt;&lt;/father&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      Vue.component(&quot;father&quot;, &#123;</span><br><span class="line">        template: &quot;&lt;div&gt;&lt;p&gt;我是父组件&lt;/p&gt;&lt;son&gt;&lt;/son&gt;&lt;/div&gt;&quot;,</span><br><span class="line">        components: &#123;</span><br><span class="line">          // 创建一个子组件</span><br><span class="line">          son: &#123;</span><br><span class="line">            template: &quot;&lt;p&gt;我是子组件&lt;/p&gt;&quot;,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">      var vm = new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;&#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们是在全局的<code>father</code>组件中，又创建了一个子组件<code>son</code>.</p><p>那么<code>son</code>这个子组件也就是一个局部的组件。也就是它只能在<code>father</code>组件中使用。</p><p>当然，我们在<code>father</code>中定义子组件<code>son</code>的时候，直接在其内部构件模板内容，这样如果代码非常多的时候，就不是很直观。</p><p>所以这里，我们可以将<code>son</code>组件，单独的进行定义，然后在<code>father</code>组件中进行注册。</p><p>改造后的代码如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;局部组件&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">      &lt;father&gt;&lt;/father&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      const son = &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">          return &#123;</span><br><span class="line">            msg: &quot;Hello 我是子组件&quot;,</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: `&lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;`,</span><br><span class="line">      &#125;;</span><br><span class="line">      Vue.component(&quot;father&quot;, &#123;</span><br><span class="line">        template: &quot;&lt;div&gt;&lt;p&gt;我是父组件&lt;/p&gt;&lt;son&gt;&lt;/son&gt;&lt;/div&gt;&quot;,</span><br><span class="line">        components: &#123;</span><br><span class="line">          // 创建一个子组件</span><br><span class="line">          //   son: &#123;</span><br><span class="line">          //     template: &quot;&lt;p&gt;我是子组件&lt;/p&gt;&quot;,</span><br><span class="line">          //   &#125;,</span><br><span class="line">          son: son,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">      var vm = new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;&#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们将<code>son</code>组件单独的进行了定义，这时注意写法，是一个对象的格式，在对象中包含了关于组件很重要的内容为<code>data</code>函数与<code>template</code>属性。</p><p>同时在<code>father</code>组件中通过<code>components</code>属性完成了对<code>son</code>组件的注册。</p><p>我们说过<code>son</code>组件是一个局部的组件，那么只能在其注册的父组件中使用。</p><p>现在，我们可以测试一下：</p><p>完整代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;局部组件&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">      &lt;father&gt;&lt;/father&gt;</span><br><span class="line">      &lt;!-- 使用ComponentA组件 --&gt;</span><br><span class="line">      &lt;component-a&gt;&lt;/component-a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      const son = &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">          return &#123;</span><br><span class="line">            msg: &quot;Hello 我是子组件&quot;,</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: `&lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;`,</span><br><span class="line">      &#125;;</span><br><span class="line">      //定义ComponentA组件</span><br><span class="line">      Vue.component(&quot;ComponentA&quot;, &#123;</span><br><span class="line">        template: &quot;&lt;div&gt;&lt;son&gt;&lt;/son&gt;&lt;/div&gt;&quot;,</span><br><span class="line">      &#125;);</span><br><span class="line">      Vue.component(&quot;father&quot;, &#123;</span><br><span class="line">        template: &quot;&lt;div&gt;&lt;p&gt;我是父组件&lt;/p&gt;&lt;son&gt;&lt;/son&gt;&lt;/div&gt;&quot;,</span><br><span class="line">        components: &#123;</span><br><span class="line">          // 创建一个子组件</span><br><span class="line">          //   son: &#123;</span><br><span class="line">          //     template: &quot;&lt;p&gt;我是子组件&lt;/p&gt;&quot;,</span><br><span class="line">          //   &#125;,</span><br><span class="line">          son: son,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">      var vm = new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;&#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们又创建了一个全局的组件<code>ComponentA</code>,并且在该组件中使用了<code>son</code>组件，注意这里没有在<code>ComponentA</code>中使用<code>components</code>来注册<code>son</code>组件，而是直接使用。同时在<code>&lt;div id=&#39;app&#39;&gt;&lt;/div&gt;</code>中使用了<code>ComponentA</code>组件。这时在浏览器中，打开上面的程序，会出现错误。</p><p>如果现在就想在<code>ComponentA</code>组件中使用<code>son</code>组件，就需要使用<code>components</code>来注册。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;ComponentA&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;&lt;son&gt;&lt;/son&gt;&lt;/div&gt;&quot;</span>,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="attr">son</span>: son,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>现在在<code>ComponentA</code>组件中已经注册了<code>son</code>组件，这时刷新浏览器就不会出错了。</p><p>在上面这些案例中，我们是在一个全局的组件中注册一个局部的组件，其实，我们也可以在<code>Vue</code>实例中，</p><p>注册对应的局部组件。因为，我们也可以将<code>vue</code>实例作为一个组件。</p><p>详细代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;局部组件&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">      &lt;father&gt;&lt;/father&gt;</span><br><span class="line">      &lt;component-a&gt;&lt;/component-a&gt;</span><br><span class="line">      &lt;hello-msg&gt;&lt;/hello-msg&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      const son = &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">          return &#123;</span><br><span class="line">            msg: &quot;Hello 我是子组件&quot;,</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: `&lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;`,</span><br><span class="line">      &#125;;</span><br><span class="line">      // 定义HelloMsg组件</span><br><span class="line">      const HelloMsg = &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">          return &#123;</span><br><span class="line">            msg: &quot;Hello World&quot;,</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: `&lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;`,</span><br><span class="line">      &#125;;</span><br><span class="line">      Vue.component(&quot;ComponentA&quot;, &#123;</span><br><span class="line">        template: &quot;&lt;div&gt;&lt;son&gt;&lt;/son&gt;&lt;/div&gt;&quot;,</span><br><span class="line">        components: &#123;</span><br><span class="line">          son: son,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">      Vue.component(&quot;father&quot;, &#123;</span><br><span class="line">        template: &quot;&lt;div&gt;&lt;p&gt;我是父组件&lt;/p&gt;&lt;son&gt;&lt;/son&gt;&lt;/div&gt;&quot;,</span><br><span class="line">        components: &#123;</span><br><span class="line">          // 创建一个子组件</span><br><span class="line">          //   son: &#123;</span><br><span class="line">          //     template: &quot;&lt;p&gt;我是子组件&lt;/p&gt;&quot;,</span><br><span class="line">          //   &#125;,</span><br><span class="line">          son: son,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">      var vm = new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;&#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">          &quot;hello-msg&quot;: HelloMsg,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们又创建了一个组件<code>HelloMsg</code></p><p>然后将<code>HelloMsg</code>组件注册到了 <code>Vue</code>实例中，注意：在进行注册的时候的语法格式。</p><p>左侧为组件的名称，由于这个组件创建的时候采用的是驼峰命名的方式，所以组件的名称采用短横线的方式。</p><p>右侧为组件的内容。</p><p>下面就可以在其<code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code>中使用了。</p><p>同理，在其他的组件中是无法使用<code>HelloMsg</code>组件的。</p><h2 id="13、组件通信"><a href="#13、组件通信" class="headerlink" title="13、组件通信"></a>13、组件通信</h2><h3 id="13-1-父组件向子组件传值"><a href="#13-1-父组件向子组件传值" class="headerlink" title="13.1 父组件向子组件传值"></a>13.1 父组件向子组件传值</h3><p>当我们将整个页面都拆分了不同的组件以后，这样就会涉及到组件之间的数据传递问题。</p><p>常见的组件的通信可以分为三类：</p><p>第一类: 父组件向子组件传递数据</p><p>第二类: 子组件向父组件传递数据</p><p>第三类：兄弟组件的数据传递。</p><p>下面，我们先来看一下父组件向子组件传递数据的情况</p><p>第一：子组件内部通过<code>props</code>接收传递过来的值。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;menu-item&#x27;</span>,&#123;</span><br><span class="line"> <span class="attr">props</span>:[<span class="string">&#x27;title&#x27;</span>] <span class="comment">// props后面跟一个数组，数组中的内容为字符串，这个字符串可以当做属性类使用。</span></span><br><span class="line"> <span class="attr">template</span>:<span class="string">&#x27;&lt;div&gt;&#123;&#123;title&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>第二: 父组件通过属性将值传递给子组件</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">menu-item</span> <span class="attr">title</span>=<span class="string">&quot;向子组件传递数据&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">menu-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menu-item</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">menu-item</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--可以使用动态绑定的方式来传值--&gt;</span></span><br></pre></td></tr></table></figure><p>下面看一下具体的案例演示：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">father</span>&gt;</span><span class="tag">&lt;/<span class="name">father</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 创建一个父组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;father&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 2、在使用子组件的地方，通过v-bind指令来给子组件中的props赋值。</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;&lt;p&gt;我是父组件&lt;/p&gt;&lt;son :myName=&quot;mySonName&quot;&gt;&lt;/son&gt;&lt;/div&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">mySonName</span>: <span class="string">&quot;小强&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建一个子组件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.声明props,它的作用是：用来接收父组件传递过来的数据。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// props可以跟一个数组，数组里面的内容可以是字符串，这个字符串可以当属性来使用。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">son</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">props</span>: [<span class="string">&quot;myName&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">template</span>: <span class="string">&quot;&lt;p&gt;我是子组件,我的名字叫&#123;&#123;myName&#125;&#125;&lt;/p&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)();</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面我们在看一个例子，这个例子是前面我们写的关于局部组件的案例，我们在这个案例的基础上实现组件的传值。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>局部组件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">father</span>&gt;</span><span class="tag">&lt;/<span class="name">father</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">component-a</span>&gt;</span><span class="tag">&lt;/<span class="name">component-a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hello-msg</span> <span class="attr">title</span>=<span class="string">&quot;你好&quot;</span> <span class="attr">:pcontent</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">hello-msg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> son = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&quot;Hello 我是子组件&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          &#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`&lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;`</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 定义HelloMsg组件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title class_">HelloMsg</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>: [<span class="string">&quot;title&quot;</span>, <span class="string">&quot;pcontent&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&quot;Hello World&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          &#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`&lt;div&gt;&#123;&#123;msg+&#x27;----------&#x27;+title+&#x27;-----------&#x27;+pcontent&#125;&#125;&lt;/div&gt;`</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;ComponentA&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;&lt;son&gt;&lt;/son&gt;&lt;/div&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">son</span>: son,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;father&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;&lt;p&gt;我是父组件&lt;/p&gt;&lt;son&gt;&lt;/son&gt;&lt;/div&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 创建一个子组件</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//   son: &#123;</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//     template: &quot;&lt;p&gt;我是子组件&lt;/p&gt;&quot;,</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//   &#125;,</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">son</span>: son,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">content</span>: <span class="string">&quot;来自父组件中的内容&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&quot;hello-msg&quot;</span>: <span class="title class_">HelloMsg</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，我们首先给<code>hello-msg</code> 这个组件传递了一个属性<code>title</code>,该属性的值是固定的。在对应的<code>HelloMsg</code>组件内容定义<code>props</code>,来接收传递过来的<code>title</code>属性的值。然后在<code>template</code>模板中展示<code>title</code>的值。</p><p>接下来，又在<code>vue</code>实例中指定了一个<code>content</code>的属性，下面要将该属性的值传递给<code>HelloMsg</code>组件。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hello-msg</span> <span class="attr">title</span>=<span class="string">&quot;你好&quot;</span> <span class="attr">:pcontent</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">hello-msg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里需要动态绑定的方式将<code>content</code>的值传递到<code>HelloMsg</code>组件。这里动态绑定的属性为<code>pcontent</code>,所以在<code>HelloMsg</code>组件内部，需要在<code>props</code>的数组中添加一个<code>pcontent</code>,最后在<code>template</code>模板中展示出<code>pcontent</code>的内容。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义HelloMsg组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HelloMsg</span> = &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&quot;title&quot;</span>, <span class="string">&quot;pcontent&quot;</span>],</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&quot;Hello World&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;div&gt;&#123;&#123;msg+&#x27;----------&#x27;+title+&#x27;-----------&#x27;+pcontent&#125;&#125;&lt;/div&gt;`</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过上面的案例，我们可以看到，在子组件中可以使用<code>props</code>来接收父组件中传递过来的数据。</p><p>但是，<code>props</code>在进行命名的时候，也是有一定的规则的。</p><p>如果在<code>props</code>中使用驼峰形式，模板中需要短横线的形式，如下代码案例所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vue.component(&#x27;menu-item&#x27;,&#123; //在JavaScript中是驼峰形式 props:[&#x27;menuTitle&#x27;],</span><br><span class="line">template:&#x27;</span><br><span class="line">&lt;div&gt;&#123;&#123;menuTitle&#125;&#125;&lt;/div&gt;</span><br><span class="line">&#x27; &#125;)</span><br><span class="line">&lt;!--在html中是短横线方式---&gt;</span><br><span class="line">&lt;menu-item menu-title=&quot;hello world&quot;&gt;&lt;/menu-item&gt;</span><br></pre></td></tr></table></figure><p>下面看一下具体的代码演示：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>组件传值<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">menu-item</span> <span class="attr">:menu-title</span>=<span class="string">&quot;ptitle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">menu-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;menu-item&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>: [<span class="string">&quot;menuTitle&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`&lt;div&gt;来自&#123;&#123;menuTitle&#125;&#125;&lt;/div&gt;`</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">ptitle</span>: <span class="string">&quot;父组件中的数据&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面再来看一下<code>props</code>属性值的类型。</p><p><code>props</code> 可以接收各种类型的值。</p><p>如下：</p><p>字符串（<code>String</code>）</p><p>数值(<code>Number</code>)</p><p>布尔值(<code>Boolean</code>)</p><p>数组(<code>Array</code>)</p><p>对象(<code>Object</code>)</p><p>下面，将上面的类型都演示一下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>props类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">menu-item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:str</span>=<span class="string">&quot;str&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:num</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">b</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:marr</span>=<span class="string">&quot;arr&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:obj</span>=<span class="string">&quot;obj&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span><span class="tag">&lt;/<span class="name">menu-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      Vue.component(&quot;menu-item&quot;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        props: [&quot;str&quot;, &quot;num&quot;, &quot;b&quot;, &quot;marr&quot;, &quot;obj&quot;],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">str</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">typeof</span> num&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">typeof</span> b&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                   <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">:key</span>=<span class="string">item.id</span> <span class="attr">v-for</span>=<span class="string">&#x27;item in marr&#x27;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item.userName</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">               <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">               <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                姓名： </span><span class="template-variable">&#123;&#123;<span class="name">obj.name</span>&#125;&#125;</span><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                年龄:</span><span class="template-variable">&#123;&#123;<span class="name">obj.age</span>&#125;&#125;</span><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        el: &quot;#app&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          str: &quot;hello&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          arr: [</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#123; id: 1, userName: &quot;zhangsan&quot; &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              id: 2,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              userName: &quot;lisi&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          ],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          obj: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            name: &quot;wangwu&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            age: 18,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，向<code>menu-item</code>组件中传递了各种类型的数据。</p><p>注意：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">menu-item</span> <span class="attr">:str</span>=<span class="string">&quot;str&quot;</span> <span class="attr">:num</span>=<span class="string">&quot;10&quot;</span> <span class="attr">b</span>=<span class="string">&quot;true&quot;</span> <span class="attr">:marr</span>=<span class="string">&quot;arr&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">menu-item</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，<code>:num=&quot;10&quot;</code>表示传递的是数字，如果写成<code>num=&#39;10&#39;</code> 表示传递的是字符，</p><p>同理<code>b=&quot;true&quot;</code>传递的是字符，如果修改成<code>:b=true</code>表示传递的是布尔类型。</p><p>最后还传递了数组类型与对象类型的内容。</p><h3 id="13-2-子组件向父组件传值"><a href="#13-2-子组件向父组件传值" class="headerlink" title="13.2 子组件向父组件传值"></a>13.2 子组件向父组件传值</h3><p>第一：子组件通过自定义事件向父组件传递信息。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button v-on:click=&#x27;$emit(&quot;countSum&quot;)&#x27;&gt; 计算&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>第二：父组件监听子组件的事件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;menu-item v-on:countSum=&#x27;sum+=1&#x27;&gt;&lt;/menu-item&gt;</span><br></pre></td></tr></table></figure><p>具体的实现步骤如下：</p><p>1、构建基本的结构</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;&lt;/div&gt;;</span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>2、构建相应的父组件。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;father&#x27;</span>, &#123;</span><br><span class="line">          <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;我的儿子叫&#123;&#123;mySonName&#125;&#125;&lt;/div&gt;&#x27;</span>,</span><br><span class="line">          <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> &#123;</span><br><span class="line">                  <span class="attr">mySonName</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、 构建相应的子组件, 并且单击子组件中的按钮给父组件传值。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;father&#x27;</span>, &#123;</span><br><span class="line">          <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;我的儿子叫&#123;&#123;mySonName&#125;&#125;&lt;/div&gt;&#x27;</span>,</span><br><span class="line">          <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> &#123;</span><br><span class="line">                  <span class="attr">mySonName</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">      <span class="attr">components</span>: &#123;</span><br><span class="line">              <span class="attr">son</span>: &#123;</span><br><span class="line">                  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">                      <span class="keyword">return</span> &#123;</span><br><span class="line">                          <span class="attr">myName</span>: <span class="string">&#x27;小强&#x27;</span></span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;,</span><br><span class="line">                  <span class="attr">template</span>: <span class="string">&#x27;&lt;button @click=&quot;emitMyName&quot;&gt;我叫&#123;&#123;myName&#125;&#125;&lt;/button&gt;&#x27;</span>,</span><br><span class="line">                  <span class="attr">methods</span>: &#123;</span><br><span class="line">                      <span class="title function_">emitMyName</span>(<span class="params"></span>) &#123;</span><br><span class="line">                          <span class="comment">// 子组件传值给父组件需要用到$emit()方法，这个方法可以传递两个参数，一个是事件名称，一个是需要传递的数据</span></span><br><span class="line">                          <span class="variable language_">this</span>.$emit(<span class="string">&#x27;tellMyFatherMyName&#x27;</span>, <span class="variable language_">this</span>.<span class="property">myName</span>)</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、父组件接收子组件传递过来的数据。</p><p>注意在父组件中引用子组件，同时指定在子组件中定义的事件。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;father&#x27;</span>, &#123;</span><br><span class="line">         <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;我的儿子叫&#123;&#123;mySonName&#125;&#125;&lt;son @tellMyFatherMyName=&quot;getMySonName&quot;&gt;&lt;/son&gt;&lt;/div&gt;&#x27;</span>,</span><br><span class="line">         <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">             <span class="keyword">return</span> &#123;</span><br><span class="line">                 <span class="attr">mySonName</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">             &#125;</span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="attr">methods</span>: &#123;</span><br><span class="line">             <span class="title function_">getMySonName</span>(<span class="params">data</span>) &#123;</span><br><span class="line">                 <span class="variable language_">this</span>.<span class="property">mySonName</span> = data;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、组件使用</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">father</span>&gt;</span><span class="tag">&lt;/<span class="name">father</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6、完整代码如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">father</span>&gt;</span><span class="tag">&lt;/<span class="name">father</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;father&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">template</span>:</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;&lt;div&gt;我的儿子叫&#123;&#123;mySonName&#125;&#125;&lt;son @tellMyFatherMyName=&quot;getMySonName&quot;&gt;&lt;/son&gt;&lt;/div&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">mySonName</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">getMySonName</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">mySonName</span> = data;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">son</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">myName</span>: <span class="string">&quot;小强&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">template</span>: <span class="string">&#x27;&lt;button @click=&quot;emitMyName&quot;&gt;我叫&#123;&#123;myName&#125;&#125;&lt;/button&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">emitMyName</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">// 子组件传值给父组件需要用到$emit()方法，这个方法可以传递两个参数，一个是事件名称，一个是需要传递的数据</span></span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.$emit(<span class="string">&quot;tellMyFatherMyName&quot;</span>, <span class="variable language_">this</span>.<span class="property">myName</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)();</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="13-3-兄弟组件之间数据传递"><a href="#13-3-兄弟组件之间数据传递" class="headerlink" title="13.3 兄弟组件之间数据传递"></a>13.3 兄弟组件之间数据传递</h3><p>兄弟组件传值，通过事件总线完成。</p><p>1、定义父组件并且在父组件中，完成两个兄弟组件的创建。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">      <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;father&#x27;</span>, &#123;</span><br><span class="line">          <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;&lt;son&gt;&lt;/son&gt;&lt;daughter&gt;&lt;/daughter&gt;&lt;/div&gt;&#x27;</span>,</span><br><span class="line">          <span class="attr">components</span>: &#123;</span><br><span class="line">              <span class="attr">son</span>: &#123;</span><br><span class="line">                  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">                      <span class="keyword">return</span> &#123;</span><br><span class="line">                          <span class="attr">mySisterName</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;,</span><br><span class="line">                  <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;我妹妹叫&#123;&#123;mySisterName&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">daughter</span>: &#123;</span><br><span class="line">                  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">                      <span class="keyword">return</span> &#123;</span><br><span class="line">                          <span class="attr">myName</span>: <span class="string">&#x27;小雪&#x27;</span></span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;,</span><br><span class="line">                  <span class="attr">template</span>: <span class="string">&#x27;&lt;button @click=&quot;emitMyName&quot;&gt;告诉哥哥我叫&#123;&#123;myName&#125;&#125;&lt;/button&gt;&#x27;</span>,</span><br><span class="line">                  <span class="attr">methods</span>: &#123;</span><br><span class="line">                      <span class="title function_">emitMyName</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">          <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">          <span class="attr">data</span>: &#123;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>2、创建事件总线</p><p>通过事件总线发射一个事件名称和需要传递的数据 。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个空的vue实例，作为事件总线</span></span><br><span class="line">      <span class="keyword">var</span> eventbus = <span class="keyword">new</span> <span class="title class_">Vue</span>()</span><br><span class="line">        <span class="attr">daughter</span>: &#123;</span><br><span class="line">                  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">                      <span class="keyword">return</span> &#123;</span><br><span class="line">                          <span class="attr">myName</span>: <span class="string">&#x27;小雪&#x27;</span></span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;,</span><br><span class="line">                  <span class="attr">template</span>: <span class="string">&#x27;&lt;button @click=&quot;emitMyName&quot;&gt;告诉哥哥我叫&#123;&#123;myName&#125;&#125;&lt;/button&gt;&#x27;</span>,</span><br><span class="line">                  <span class="attr">methods</span>: &#123;</span><br><span class="line">                      <span class="title function_">emitMyName</span>(<span class="params"></span>) &#123;</span><br><span class="line">                          <span class="comment">// 通过事件总线发射一个事件名称和需要传递的数据</span></span><br><span class="line">                          eventbus.$emit(<span class="string">&#x27;tellBroMyName&#x27;</span>, <span class="variable language_">this</span>.<span class="property">myName</span>)</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3、通过 eventbus 的$on()方法去监听兄弟节点发射过来的事件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">son</span>: &#123;</span><br><span class="line">                   <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">                       <span class="keyword">return</span> &#123;</span><br><span class="line">                           <span class="attr">mySisterName</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;,</span><br><span class="line">                   <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;我妹妹叫&#123;&#123;mySisterName&#125;&#125;&lt;/div&gt;&#x27;</span>,</span><br><span class="line">                   <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">                       <span class="comment">// 通过eventbus的$on()方法去监听兄弟节点发射过来的事件</span></span><br><span class="line">                       <span class="comment">// $on有两个参数，一个是事件名称，一个是函数，该函数的默认值就是传递过来的数据</span></span><br><span class="line">                       eventbus.$on(<span class="string">&#x27;tellBroMyName&#x27;</span>, <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">                           <span class="variable language_">this</span>.<span class="property">mySisterName</span> = data</span><br><span class="line">                       &#125;)</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;,</span><br></pre></td></tr></table></figure><p>4、组件的使用</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">father</span>&gt;</span><span class="tag">&lt;/<span class="name">father</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5、完整的代码如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">father</span>&gt;</span><span class="tag">&lt;/<span class="name">father</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 创建一个空的vue实例，作为事件总线</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> eventbus = <span class="keyword">new</span> <span class="title class_">Vue</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;father&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;&lt;son&gt;&lt;/son&gt;&lt;daughter&gt;&lt;/daughter&gt;&lt;/div&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">son</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">mySisterName</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;我妹妹叫&#123;&#123;mySisterName&#125;&#125;&lt;/div&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 通过eventbus的$on()方法去监听兄弟节点发射过来的事件</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// $on有两个参数，一个是事件名称，一个是函数，该函数的默认值就是传递过来的数据</span></span></span><br><span class="line"><span class="language-javascript">            eventbus.$on(<span class="string">&quot;tellBroMyName&quot;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.<span class="property">mySisterName</span> = data;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">daughter</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">myName</span>: <span class="string">&quot;小雪&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">template</span>:</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&#x27;&lt;button @click=&quot;emitMyName&quot;&gt;告诉哥哥我叫&#123;&#123;myName&#125;&#125;&lt;/button&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">emitMyName</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">// 通过事件总线发射一个事件名称和需要传递的数据</span></span></span><br><span class="line"><span class="language-javascript">              eventbus.$emit(<span class="string">&quot;tellBroMyName&quot;</span>, <span class="variable language_">this</span>.<span class="property">myName</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="14、组件插槽应用"><a href="#14、组件插槽应用" class="headerlink" title="14、组件插槽应用"></a>14、组件插槽应用</h2><h3 id="14-1-插槽基本使用"><a href="#14-1-插槽基本使用" class="headerlink" title="14.1 插槽基本使用"></a>14.1 插槽基本使用</h3><p><strong>生活中的插槽</strong></p><p>其实我们生活中有很多很多的插槽。比如电脑的<code>USB</code>插槽、插板中的电源插槽等等。每个插槽都有它们之间的价值。比如电脑的<code>USB</code>插槽，可以用来插 U 盘，链接鼠标，链接手机、音响等等，通过这些插槽，大大拓展了原有设备的功能。</p><p><strong>组件中的插槽</strong></p><p>组件中的插槽，<strong>让使用者可以决定组件内部的一些内容到底展示什么</strong>，也就是，插槽可以实现父组件向子组件传递模板内容。具有插槽的组件将会有更加强大的拓展性，</p><p>下面看一个实际应用的例子来体会一下插槽的引用场景。</p><p><img src="/2022/07/13/Vue/Vue%E5%9F%BA%E7%A1%80/Vue%E5%9F%BA%E7%A1%80/%E6%8F%92%E6%A7%BD.jpg"></p><p>三个页面中都有导航栏，基本结构都是一样的：左中右分别有一个东西，只是显示的内容不同而已。那我们如何来实现这种<strong>结构相似但是内容不同</strong>呢？<br>  你一定是想着，直接定义三个组件，然后在模板中分别显示不同的内容，对不对？恭喜你，你就快要被炒了。<br>  首先，如果我们封装成三个组件，显然不合适，比如每个页面都有返回，这部分的内容我们就要重复去封装<br>  其次，如果我们封装成一个，还是不合理，因为有些左侧是菜单栏，有些中间是搜索框，有些是文字。<br>那我们该怎么办呢？其实很简单，用组件插槽。</p><p>上面最佳的解决办法是<strong>将共性抽取到组件中，将不同暴露给插槽</strong>，一旦我们<strong>使用了插槽，就相当于预留了空间</strong>，<strong>空间的内容取决于使用者</strong></p><p>如下图所示：</p><p><img src="/2022/07/13/Vue/Vue%E5%9F%BA%E7%A1%80/Vue%E5%9F%BA%E7%A1%80/%E6%8F%92%E6%A7%BD1.png"></p><p>通过上图，我们可以在父组件中使用子组件，同时由于在子组件中创建插槽<code>slot</code>，也就是相当于预留了空间，这时在父组件中使用子组件时，可以传递不同的内容。</p><p>下面看一下插槽的应用</p><p>基本使用方式</p><p>第一：确定插槽的位置</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;alert-box&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">   &lt;div class=&quot;demo-alert-box&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;strong&gt;子组件&lt;/strong&gt;</span></span><br><span class="line"><span class="string">    &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">   &lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在子组件中，通过<code>&lt;slot&gt;</code>确定出插槽的位置。</p><p>第二：插槽内容</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">alert-box</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">alert-box</span>&gt;</span></span><br></pre></td></tr></table></figure><p>向插槽中传递内容。</p><p>下面看一下具体的代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;插槽基本使用&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">      &lt;alert-box&gt;程序出现了bug&lt;/alert-box&gt;</span><br><span class="line">      &lt;alert-box&gt;程序出现了警告&lt;/alert-box&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      Vue.component(&quot;alert-box&quot;, &#123;</span><br><span class="line">        template: `</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;strong&gt;ERROR:&lt;/strong&gt;</span><br><span class="line">                    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">                &lt;/div&gt;    </span><br><span class="line">            `,</span><br><span class="line">      &#125;);</span><br><span class="line">      const vm = new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;&#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>通过上面的代码我们可以看到，在<code>alert-box</code>这个组件中，定义了一个插槽，也就是预留了一个位置，下面使用该组件的时候，都可以向该插槽中传递数据。而<code>&lt;strong&gt;</code>标签中的内容就相当于是一个公共的内容了。</p><p>当然在插槽中也是可以添加默认的内容的。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">alert-box</span>&gt;</span>程序出现了bug<span class="tag">&lt;/<span class="name">alert-box</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">alert-box</span>&gt;</span>程序出现了警告<span class="tag">&lt;/<span class="name">alert-box</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">alert-box</span>&gt;</span><span class="tag">&lt;/<span class="name">alert-box</span>&gt;</span></span></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    Vue.component(&quot;alert-box&quot;, &#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      template: `</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">              <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                  <span class="tag">&lt;<span class="name">strong</span>&gt;</span>ERROR:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                  <span class="tag">&lt;<span class="name">slot</span>&gt;</span>默认内容<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">          `,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;);</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    const vm = new Vue(&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      el: &quot;#app&quot;,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      data: &#123;&#125;,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;);</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>在上面的代码中，我们给插槽添加了默认的内容，如果在使用<code>alert-box</code>组件的时候，没有给插槽传递值，就会展示插槽中的默认内容。</p><h3 id="14-2-具名插槽"><a href="#14-2-具名插槽" class="headerlink" title="14.2 具名插槽"></a>14.2 具名插槽</h3><p>所谓的具名插槽就是有名字的插槽。</p><p>第一：插槽定义</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二：插槽内容</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">slot</span>=<span class="string">&quot;header&quot;</span>&gt;</span>标题内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>底部内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面我们来看一下具体的代码实现</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>具名插槽<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">&quot;header&quot;</span>&gt;</span>头部内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>底部信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      Vue.component(&quot;base-layout&quot;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                     <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                     <span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                     <span class="tag">&lt;/<span class="name">main</span>&gt;</span> </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                     <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                     <span class="tag">&lt;/<span class="name">footer</span>&gt;</span>   </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                     </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        el: &quot;#app&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，<code> &lt;p slot=&quot;header&quot;&gt;头部内容&lt;/p&gt;</code>会插入到<code>base-layout</code> 组件的<code>header</code>这个插槽中。</p><p><code> &lt;p slot=&quot;footer&quot;&gt;底部信息&lt;/p&gt;</code>会插入到<code>footer</code>这个插槽中。</p><p>剩余的内容会插入到默认的（没有名称）的插槽内。</p><p>在上面的应用中，有一个问题就是，我们把插槽的名称给了某个<code>html</code>标签，例如<code>p</code>标签，这样就只能将该标签插入到插槽中。</p><p>但是，在实际的应用中，有可能需要向插槽中插入大量的内容，这时就需要用到<code>template</code>标签。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>具名插槽<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &lt;base-layout&gt;</span></span><br><span class="line"><span class="comment">        &lt;p slot=&quot;header&quot;&gt;头部内容&lt;/p&gt;</span></span><br><span class="line"><span class="comment">        &lt;p&gt;主要内容1&lt;/p&gt;</span></span><br><span class="line"><span class="comment">        &lt;p&gt;主要内容2&lt;/p&gt;</span></span><br><span class="line"><span class="comment">        &lt;p slot=&quot;footer&quot;&gt;底部信息&lt;/p&gt;</span></span><br><span class="line"><span class="comment">      &lt;/base-layout&gt; --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>标题名称<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>标题区域的布局<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>中间内容区域的布局实现<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>底部信息<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>对底部内容区域进行布局<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      Vue.component(&quot;base-layout&quot;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                     <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                     <span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                     <span class="tag">&lt;/<span class="name">main</span>&gt;</span> </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                     <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                     <span class="tag">&lt;/<span class="name">footer</span>&gt;</span>   </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                     </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        el: &quot;#app&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，我们给<code>template</code>标签添加了插槽的名称，并且在<code>template</code>标签中嵌入了其它的多个标签，从而完成布局。</p><p>在这里，可以统一查看浏览器端所生成的代码结构。</p><h3 id="14-3-作用域插槽"><a href="#14-3-作用域插槽" class="headerlink" title="14.3 作用域插槽"></a>14.3 作用域插槽</h3><p>应用场景：父组件对子组件的内容进行加工处理。这也是作用域插槽的一个很重要特性，</p><p>下面我们通过一个例子来体会一下这句话的作用。</p><p>首先，我们先创建一个用户列表。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>作用域插槽<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">user-list</span> <span class="attr">:list</span>=<span class="string">&quot;userList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">user-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      Vue.component(&quot;user-list&quot;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        props: [&quot;list&quot;],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span> <span class="attr">v-for</span>=<span class="string">&#x27;item in list&#x27;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item.userName</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                 <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>   </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        el: &quot;#app&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          userList: [</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              id: 1,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              userName: &quot;张三&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              id: 2,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              userName: &quot;李四&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              id: 3,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              userName: &quot;王五&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          ],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，我们首先创建了一个<code>user-list</code>组件，在这个组件中接收父组件传递过来的用户数据，通过循环的方式展示传递过来的用户数据。</p><p>现在，这里有一个新的需求，就是修改某个用户名的颜色，让其高亮显示。这个需求应该怎样来处理呢？</p><p>我们是否可以在子组件<code>user-list</code>中实现这个功能呢？</p><p>虽然可以，但是一般不建议你这么做，因为一个组件创建好以后，一般不建议修改。你可以想一下，如果这个组件是其它人创建的，而且很多人都在用，如果直接修改这个子组件，就会造成很多的问题。</p><p>所以这里，还是从父组件中进行修改。也是通过父组件来决定子组件中的哪个用户名进行高亮显示。</p><p>下面对代码进行修改：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>作用域插槽<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">user-list</span> <span class="attr">:list</span>=<span class="string">&quot;userList&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">strong</span> <span class="attr">v-if</span>=<span class="string">&quot;slotProps.info.id===2&quot;</span></span></span><br><span class="line"><span class="tag">            &gt;</span>&#123;&#123;slotProps.info.userName&#125;&#125;&lt;/strong</span><br><span class="line">          &gt;</span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>&#123;&#123;slotProps.info.userName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">user-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      Vue.component(&quot;user-list&quot;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        props: [&quot;list&quot;],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span> <span class="attr">v-for</span>=<span class="string">&#x27;item in list&#x27;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:info</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                            </span><span class="template-variable">&#123;&#123;<span class="name">item.userName</span>&#125;&#125;</span><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                            <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                 <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>   </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        el: &quot;#app&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          userList: [</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              id: 1,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              userName: &quot;张三&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              id: 2,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              userName: &quot;李四&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              id: 3,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              userName: &quot;王五&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          ],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过上面的代码可以看到，为了能够实现父组件决定子组件中哪个用户名能够高亮显示，需要在设计子组件的时候，为其添加对应的插槽。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">template: `</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:info</span>=<span class="string">&quot;item&quot;</span>&gt;</span> &#123;&#123;item.userName&#125;&#125; <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">`,</span><br></pre></td></tr></table></figure><p>在子组件的<code>template</code>模板中，添加了插槽，同时为其动态绑定一个属性<code>info</code>(这个属性的名字是可以随意命名的)，该属性的值为用户的信息。</p><p>绑定该属性的目的就是为了能够在父组件中获取用户的信息。</p><p>下面看一下父组件中的修改</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">      &lt;user-list :list=&quot;userList&quot;&gt;</span><br><span class="line">        &lt;template slot-scope=&quot;slotProps&quot;&gt;</span><br><span class="line">          &lt;strong v-if=&quot;slotProps.info.id===2&quot;</span><br><span class="line">            &gt;&#123;&#123;slotProps.info.userName&#125;&#125;&lt;/strong</span><br><span class="line">          &gt;</span><br><span class="line">          &lt;span v-else&gt;&#123;&#123;slotProps.info.userName&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/user-list&gt;</span><br><span class="line">    &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>父组件在使用子组件<code>user-list</code>的时候，这里为其添加了<code>template</code>这个标签，而且这个标签的属性<code>slot-scope</code>是固定的，为其指定了一个值为<code>slotProps</code>,该值中，存储的就是从子组件中获取到的用户数据。</p><p>所以接下来通过<code>slotProps</code>获取<code>info</code>（注意这里要与子组件中的<code>slot</code>属性保持一致）中的用户数据。然后进行判断，如果用户编号为 2 的，为其加错，否者正常展示。</p><p>通过以上的案例，我们可以看到父组件通过作用域插槽实现了对子组件中数据的处理。其实这也就是为什么叫做作用域插槽的原因：</p><p>是因为模板虽然是在父级作用域（父组件）中渲染的，却能拿到子组件的数据。</p><h3 id="14-4-作用域插槽案例"><a href="#14-4-作用域插槽案例" class="headerlink" title="14.4. 作用域插槽案例"></a>14.4. 作用域插槽案例</h3><p>下面，我们通过一个列表的案例，来体会一下作用域插槽的应用。</p><p>首先我们先来做一个基本的列表组件</p><p><img src="/2022/07/13/Vue/Vue%E5%9F%BA%E7%A1%80/Vue%E5%9F%BA%E7%A1%80/%E5%88%97%E8%A1%A8.png"></p><p>这里，我们首先使用的是具名插槽完成的，如下代码所示：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>作用域插槽案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">my-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span> 用户列表 <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in listData&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span>&#123;&#123;item.userName&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">my-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      Vue.component(&quot;my-list&quot;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-title&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-content&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        el: &quot;#app&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          listData: [</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#123; id: 1, userName: &quot;张三&quot; &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              id: 2,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              userName: &quot;李四&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              id: 3,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              userName: &quot;王五&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          ],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，我们在子组件<code>my-list</code>中使用了<code>具名插槽</code>。然后父组件在使用子组件<code>my-list</code>的时候，可以通过<code>template</code>标签加上<code>slot</code>属性向具名插槽中传递数据。</p><p>虽然以上的写法满足了基本的需求，但是作为组件的使用者，这样的一个组件会让我们感觉非常的麻烦，也就是我们在使用<code>my-list</code>这个组件的时候，还需要自己去编写<code>content</code>区域的循环逻辑。这样就比较麻烦了，下面对上面的代码在做一些修改。</p><p>为了解决这个问题，我们可以把循环写到子组件中，这样我们在使用的时候，不需要写循环了，只是传递数据就可以了，这样就方便多了。其实这里我们就可以不用具名插槽了。</p><p>所以修改后的代码如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>作用域插槽案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">my-list</span> <span class="attr">title</span>=<span class="string">&quot;用户列表&quot;</span> <span class="attr">:content</span>=<span class="string">&quot;listData&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">my-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      Vue.component(&quot;my-list&quot;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        props: [&quot;title&quot;, &quot;content&quot;],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-title&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        </span><span class="template-variable">&#123;&#123;<span class="name">title</span>&#125;&#125;</span><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-content&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list-content&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in content&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item.userName</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span> </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        el: &quot;#app&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          listData: [</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#123; id: 1, userName: &quot;张三&quot; &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              id: 2,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              userName: &quot;李四&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              id: 3,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              userName: &quot;王五&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          ],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，我们没有使用插槽，直接将数据传递到子组件<code>my-list</code>中，然后在该子组件中接收到数据，并进行了循环遍历。</p><p>经过这一次的改造，满足了我们前面所提到的易用性问题，但是现在又有了新的问题，组件的拓展性不好。</p><p>每次只能生成相同结构的列表，一旦业务需要发生了变化，组件就不再使用了。比如，我现在有了新的需求，在一个列表的每个列表项前面加上一个小的<code>logo</code>,我总不能又写一个新的组件来适应需求的变化吧？</p><p>这里就可以使用作用域插槽来解决这个问题。</p><p>具体的实现代码如下所示：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>作用域插槽案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 如果没有传递模板，那么子组件的插槽中只会展示用户名 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">my-list</span> <span class="attr">title</span>=<span class="string">&quot;用户列表&quot;</span> <span class="attr">:content</span>=<span class="string">&quot;listData&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-list</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 传递模板 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">my-list</span> <span class="attr">title</span>=<span class="string">&quot;用户列表2&quot;</span> <span class="attr">:content</span>=<span class="string">&quot;listData&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./one.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;20&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;scope.item.userName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">my-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      Vue.component(&quot;my-list&quot;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        props: [&quot;title&quot;, &quot;content&quot;],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-title&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        </span><span class="template-variable">&#123;&#123;<span class="name">title</span>&#125;&#125;</span><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-content&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                   <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list-content&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in content&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                           <span class="comment">&lt;!--这里将content中的每一项数据绑定到slot的itemb变量上，在父组件中就可以获取到item变量--&gt;</span>     </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:item</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item.userName</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                                </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span> </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        el: &quot;#app&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          listData: [</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#123; id: 1, userName: &quot;张三&quot; &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              id: 2,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              userName: &quot;李四&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              id: 3,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              userName: &quot;王五&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          ],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，我们首先在子组件<code>my-list</code>中，添加了作用域的插槽。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list-content&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in content&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里将content中的每一项数据绑定到slot的itemb变量上，在父组件中就可以获取到item变量--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:item</span>=<span class="string">&quot;item&quot;</span>&gt;</span>&#123;&#123;item.userName&#125;&#125;<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同时在父组件中，使用对应的插槽</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 如果没有传递模板，那么子组件的插槽中只会展示用户名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-list</span> <span class="attr">title</span>=<span class="string">&quot;用户列表&quot;</span> <span class="attr">:content</span>=<span class="string">&quot;listData&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-list</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 传递模板 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-list</span> <span class="attr">title</span>=<span class="string">&quot;用户列表2&quot;</span> <span class="attr">:content</span>=<span class="string">&quot;listData&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./one.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;20&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;scope.item.userName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">my-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再回到开始的问题，作用域插槽到底是干嘛用的？很显然，它的作用就如官网所说的一样：将组件的数据暴露出去。而这么做，给了组件的使用者根据数据定制模板的机会，组件不再是写死成一种特定的结构。</p><p>以上就是作用域插槽的应用，需要你仔细体会。</p><p>那么，在这里再次问一个问题，就是在你所使用的<code>Vue</code>插件或者是第三方的库中，有没有遇到使用作用域插槽的情况呢？</p><p>其实，比较典型的就是<code>element-ui</code>的<code>table</code>组件，它就可以通过添加作用域插槽改变渲染的原始数据。</p><p>如下图所示：</p><p><img src="/2022/07/13/Vue/Vue%E5%9F%BA%E7%A1%80/Vue%E5%9F%BA%E7%A1%80/%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%92%E6%A7%BD.png"></p><h3 id="14-5-插槽应用总结"><a href="#14-5-插槽应用总结" class="headerlink" title="14.5 插槽应用总结"></a>14.5 插槽应用总结</h3><p><strong>为什么要使用插槽</strong></p><p>组件的最大特性就是复用性，而用好插槽能大大提高组件的可复用能力。</p><p>组件的复用性常见情形如<em>在有相似功能的模块中，他们具有类似的 UI 界面，通过使用组件间的通信机制传递数据，从而达到一套代码渲染不同数据的效果</em>。</p><p>然而这种利用组件间通信的机制只能满足在结构上相同，渲染数据不同的情形；假设两个相似的页面，他们只在某一模块（区域）有不同的<code>UI</code>效果(例如，前面所做的列表，发现可以显示不同的<code>ui</code>效果)，以上办法就做不到了。可能你会想，使用 <code>v-if</code> 和 <code>v-else</code>来特殊处理这两个功能模块，不就解决了？很优秀，解决了，但不完美。极端一点，假设我们有一百个这种页面，就需要写一百个<code>v-if</code>、<code>v-else-if</code>、<code>v-else</code>来处理？那组件看起来将不再简小精致，维护起来也不容易。</p><p>而 插槽 “**<code>SLOT</code>**”就可以完美解决这个问题</p><p><strong>什么情况下使用插槽</strong></p><p>顾名思义，插槽即往卡槽中插入一段功能块。还是举刚才的例子。如果有一百个基本相似，只有一个模块功能不同的页面，而我们只想写一个组件。可以将不同的那个模块单独处理成一个卡片，在需要使用的时候将对应的卡片插入到组件中即可实现对应的完整的功能页。而不是在组件中把所有的情形用<code>if-else</code>罗列出来（这里还是体会用户列表的案例）</p><p>可能你会想，那我把一个组件分割成一片片的插槽，需要什么拼接什么，岂不是只要一个组件就能完成所有的功能？思路上没错，但是需要明白的是，卡片是在父组件上代替子组件实现的功能，使用插槽无疑是在给父组件页面增加规模，如果全都使用拼装的方式，和不用组件又有什么区别（例如，用户列表案例中需要其他的显示方式，需要在父组件中进行添加）。因此，<strong>插槽并不是用的越多越好</strong>。</p><p><strong>插槽是组件最大化利用的一种手段，而不是替代组件的策略，当然也不能替代组件</strong>。如果能在组件中实现的模块，或者只需要使用一次<code>v-else</code>， 或一次<code>v-else-if</code>，<code>v-else</code>就能解决的问题，都建议直接在组件中实现。</p><h2 id="15、Vue组件化的理解"><a href="#15、Vue组件化的理解" class="headerlink" title="15、Vue组件化的理解"></a>15、<code>Vue</code>组件化的理解</h2><p>关于<code>Vue</code>组件的内容，我们已经学习很多了，那么你能谈一下对<code>Vue</code>组件化的理解吗？</p><p>其实这也是一个比较常见的面试题。</p><p>当然，这个问题的面是非常广的。可以通过以下几点来描述：</p><p><strong>定义</strong>：组件是可复用的<code>Vue</code>实例，准确讲它是<code>VueComponent</code>的实例，继承自<code>Vue</code></p><p>优点：组件化可以增加代码的复用性，可维护性和可测试性。</p><p><strong>使用场景</strong>：什么时候使用组件？以下分类可以作为参数</p><p>第一：通用组件：实现最基本的功能，具有通用性，复用性。例如按钮组件，输入框组件，布局组件等。(<code>Element UI</code>组件库就是属于这种通用的组件)</p><p>第二：业务组件，用于完成具体的业务，具有一定的复用性。例如登录组件，轮播图组件。</p><p>第三：页面组件，组织应用各部分独立内容，需要时在不同页面组件间切换，例如：商品列表页，详情页组件。</p><p><strong>如何使用组件</strong></p><ul><li><p>定义：<code>Vue.component()</code>，<code>components</code>选项</p></li><li><p>分类：有状态组件(有 data 属性)，<code>functional</code></p></li><li><p>通信：<code>props</code>，<code>$emit()/$on()</code>，<code>provide/inject</code></p></li><li><p>内容分发：<code>&lt;slot&gt;</code>，<code>&lt;template&gt;</code>，<code>v-slot </code></p></li><li><p>使用及优化：<code>is</code>，<code>keep-alive</code>，<code>异步组件</code>(这些内容在后面的课程中会详细的讲解)</p></li></ul><p><strong>组件的本质</strong></p><p><code>vue</code>中的组件经历如下过程 组件配置 &#x3D;&gt;<code> VueComponent</code>实例 &#x3D;&gt; <code>render() </code>&#x3D;&gt; <code>Virtual DOM</code>&#x3D;&gt; <code>DOM</code><br>所以组件的本质是产生虚拟<code>DOM</code></p><p>关于这块内容，在后面的课程中还会深入的探讨，包虚拟<code>dom</code>,以及<code>vue</code>的源码。</p><h2 id="16、常用API说明"><a href="#16、常用API说明" class="headerlink" title="16、常用API说明"></a>16、常用<code>API</code>说明</h2><h3 id="16-1-Vue-set"><a href="#16-1-Vue-set" class="headerlink" title="16.1  Vue.set"></a>16.1 <code> Vue.set</code></h3><p>向响应式对象中添加一个属性，并确保这个新属性同样是响应式的，且会触发视图更新。</p><p>使用方法：<code>Vue.set(target,propertyName,value)</code></p><p>下面通过一个案例来演示一下,这个案例是在以前所做的用户列表的案例上进行修改的，</p><p>这里需求是给每个用户动态的添加身高。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>列表渲染<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.actived</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#dddddd</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;users.length===0&quot;</span>&gt;</span>没有任何用户数据<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in users&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:style</span>=<span class="string">&quot;&#123;backgroundColor:selectItem===item?&#x27;#dddddd&#x27;:&#x27;transparent&#x27;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">mousemove</span>=<span class="string">&quot;selectItem=item&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">          编号：&#123;&#123;item.id&#125;&#125; 姓名:&#123;&#123;item.name&#125;&#125;---身高:&#123;&#123;item.height&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>总人数：&#123;&#123;totalCount&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">selectItem</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">num</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">totalCount</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">users</span>: [],</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//组件实例已创建时</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> users = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getUserList</span>();</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">users</span> = users;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//批量更新用户身高</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="title function_">batchUpdate</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//批量更新身高，动态的给users中添加身高属性</span></span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">batchUpdate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              c.<span class="property">height</span> = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">getTotal</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;methods&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">users</span>.<span class="property">length</span> + <span class="string">&quot;个&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">getUserList</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">resolve</span>([</span></span><br><span class="line"><span class="language-javascript">                  &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                  &#125;,</span></span><br><span class="line"><span class="language-javascript">                  &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                  &#125;,</span></span><br><span class="line"><span class="language-javascript">                  &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&quot;老王&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                  &#125;,</span></span><br><span class="line"><span class="language-javascript">                ]);</span></span><br><span class="line"><span class="language-javascript">              &#125;, <span class="number">2000</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">users</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">immediate</span>: <span class="literal">true</span>, <span class="comment">//立即执行</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.<span class="property">totalCount</span> = newValue.<span class="property">length</span> + <span class="string">&quot;个人&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，我首先把列表中，展示的内容做了一个修改，这里不在显示索引值，而是展示身高。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">编号：&#123;&#123;item.id&#125;&#125; 姓名:&#123;&#123;item.name&#125;&#125;---身高:&#123;&#123;item.height&#125;&#125;</span><br></pre></td></tr></table></figure><p>但是我们知道在<code>users</code>中是没有<code>height</code>这个属性的，所以下面可以动态添加这个属性。</p><p>所以在<code>create</code>方法中，调用了<code>batchUpdate</code>方法，来动态更新。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//组件实例已创建时</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> users = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getUserList</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">users</span> = users;</span><br><span class="line">      <span class="comment">//批量更新用户身高</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">batchUpdate</span>();</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>在<code>methods</code>中，添加了<code>batchUpdate</code>方法。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//批量更新身高，动态的给users中添加身高属性</span></span><br><span class="line">        <span class="title function_">batchUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> &#123;</span><br><span class="line">            c.<span class="property">height</span> = <span class="number">0</span>;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上面的代码中，对<code>users</code>进行遍历，每遍历一次，取出一个对象后，动态添加一个属性<code>height</code>,并且初始值为 0.</p><p>这样刷新浏览器，可以看到对应的效果。</p><p>下面，我们在做一个功能，就是用户在一个文本框中，输入一个身高值，单击按钮，统一把所有用户的身高进行更新。</p><p>首先在<code>data</code>中添加一个属性<code>height</code>,该属性会与文本框进行绑定。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">         <span class="attr">selectItem</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">         <span class="attr">num</span>: <span class="number">100</span>,</span><br><span class="line">         <span class="attr">totalCount</span>: <span class="number">0</span>,</span><br><span class="line">         <span class="attr">users</span>: [],</span><br><span class="line">         <span class="attr">height</span>: <span class="number">0</span>,</span><br><span class="line">       &#125;,</span><br></pre></td></tr></table></figure><p>下面创建文本框，以及更新按钮</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;height&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;batchUpdate&quot;</span>&gt;</span>批量更新用户身高<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这里我们需要在文本框中输入的值为数字类型，所以添加了一个<code>number</code>的后缀。现在，文本框与<code>height</code>属性绑定在一起了。下面单击按钮后，还是去执行<code>batchUpdate</code>方法。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//批量更新身高，动态的给users中添加身高属性</span></span><br><span class="line">         <span class="title function_">batchUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> &#123;</span><br><span class="line">             c.<span class="property">height</span> = <span class="variable language_">this</span>.<span class="property">height</span>;</span><br><span class="line">           &#125;);</span><br><span class="line">         &#125;,</span><br></pre></td></tr></table></figure><p>这里我们可以看到，我们是用文本框中输入的值，更新了<code>users</code>数组中的<code>height</code>属性的值。</p><p>但是，当我们在浏览器中，单击按钮进行更新的时候，发现不起作用。</p><p>因为，现在动态所添加的<code>height</code>属性并不是响应式的。</p><p>但是，当把鼠标移动到列表项的时候，数据发生了变化，就是因为这时触发了我们给列表所添加的<code>mousemove</code></p><p>这个事件，导致页面重新刷新，这时发现数据发生变化了。</p><p>那么我们应该怎样解决这个问题呢？</p><p>这就需要，在<code>batchUpdate</code>方法中，使用<code>Vue.set()</code>方法</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">batchUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//   c.height = this.height;</span></span><br><span class="line">            <span class="title class_">Vue</span>.<span class="title function_">set</span>(c, <span class="string">&quot;height&quot;</span>, <span class="variable language_">this</span>.<span class="property">height</span>);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><p>修改的代码含义就是通过<code>Vue.set</code>方法，给<code>users</code>数组中每个对象，设置一个<code>height</code>属性，这时该属性就变成了响应式的，同时把 <code>data</code>中的<code>height</code>属性的值赋值给<code>height</code>.</p><p>完整代码如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>列表渲染<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.actived</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#dddddd</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 批量更新身高 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;height&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;batchUpdate&quot;</span>&gt;</span>批量更新用户身高<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;users.length===0&quot;</span>&gt;</span>没有任何用户数据<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in users&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:style</span>=<span class="string">&quot;&#123;backgroundColor:selectItem===item?&#x27;#dddddd&#x27;:&#x27;transparent&#x27;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">mousemove</span>=<span class="string">&quot;selectItem=item&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">          编号：&#123;&#123;item.id&#125;&#125; 姓名:&#123;&#123;item.name&#125;&#125;---身高:&#123;&#123;item.height&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>总人数：&#123;&#123;totalCount&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">selectItem</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">num</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">totalCount</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">users</span>: [],</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">height</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//组件实例已创建时</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> users = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getUserList</span>();</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">users</span> = users;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//批量更新用户身高</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="title function_">batchUpdate</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//批量更新身高，动态的给users中添加身高属性</span></span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">batchUpdate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">//   c.height = this.height;</span></span></span><br><span class="line"><span class="language-javascript">              <span class="comment">//   Vue.set(c, &quot;height&quot;, this.height);</span></span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.$set(c, <span class="string">&quot;height&quot;</span>, <span class="variable language_">this</span>.<span class="property">height</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">getTotal</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;methods&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">users</span>.<span class="property">length</span> + <span class="string">&quot;个&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">getUserList</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">resolve</span>([</span></span><br><span class="line"><span class="language-javascript">                  &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                  &#125;,</span></span><br><span class="line"><span class="language-javascript">                  &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                  &#125;,</span></span><br><span class="line"><span class="language-javascript">                  &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&quot;老王&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                  &#125;,</span></span><br><span class="line"><span class="language-javascript">                ]);</span></span><br><span class="line"><span class="language-javascript">              &#125;, <span class="number">2000</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">users</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">immediate</span>: <span class="literal">true</span>, <span class="comment">//立即执行</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.<span class="property">totalCount</span> = newValue.<span class="property">length</span> + <span class="string">&quot;个人&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="16-2-Vue-delete"><a href="#16-2-Vue-delete" class="headerlink" title="16.2 Vue.delete"></a>16.2 <code>Vue.delete</code></h3><p>删除对象的属性，如果对象是响应式的，确保删除能触发更新视图。</p><p>使用方式：<code>Vue.delete(target,propertyName)</code></p><p>如果使用<code>delete obj[&#39;property&#39;]</code> 是不能更新页面的。</p><p>以上两个方法<code>Vue.set()</code>和<code>Vue.delete()</code>等同于以下两个实例方法。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vm.$set()</span><br><span class="line">vm.$delete()</span><br></pre></td></tr></table></figure><p><code>vm</code> 表示的是<code>Vue</code>的实例。</p><p>所以我们在<code>batchUpdate</code>中也可以采用如下的方式，来批量更新用户的身高数据。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">batchUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> &#123;</span><br><span class="line">             <span class="comment">//   c.height = this.height;</span></span><br><span class="line">             <span class="comment">//   Vue.set(c, &quot;height&quot;, this.height);</span></span><br><span class="line">             <span class="variable language_">this</span>.$set(c, <span class="string">&quot;height&quot;</span>, <span class="variable language_">this</span>.<span class="property">height</span>);</span><br><span class="line">           &#125;);</span><br><span class="line">         &#125;,</span><br></pre></td></tr></table></figure><h3 id="16-3-vm-on与vm-emit"><a href="#16-3-vm-on与vm-emit" class="headerlink" title="16.3 vm.$on与vm.$emit"></a>16.3 <code>vm.$on</code>与<code>vm.$emit</code></h3><h4 id="16-3-1-列表组件设计"><a href="#16-3-1-列表组件设计" class="headerlink" title="16.3.1 列表组件设计"></a>16.3.1 列表组件设计</h4><p>这两个<code>api</code>在前面的课程中，我们也已经讲解过，主要用来实现:事件总线。</p><p>下面，我们将这两个<code>API</code>应用到用户列表这个案例中。主要是把<code>事件总线</code>这个应用再次复习一下。</p><p>当然，这里首先是把用户列表这个案例，按照我们前面所学习的组件的知识，进行拆分一下，实现组件化的应用。</p><p>初步改造后的代码，如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>列表渲染<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.actived</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#dddddd</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 批量更新身高 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;height&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;batchUpdate&quot;</span>&gt;</span>批量更新用户身高<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 用户列表组件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">user-list</span> <span class="attr">:users</span>=<span class="string">&quot;users&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">user-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>总人数：&#123;&#123;totalCount&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 用户列表组件创建</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;user-list&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">selectItem</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          &#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">users</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="title class_">Array</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">default</span>: [],</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;p v-if=&quot;users.length===0&quot;&gt;没有任何用户数据&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;ul v-else&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;li</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                v-for=&quot;(item,index) in users&quot;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                :key=&quot;item.id&quot;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                :style=&quot;&#123;backgroundColor:selectItem===item?&#x27;#dddddd&#x27;:&#x27;transparent&#x27;&#125;&quot;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                @mousemove=&quot;selectItem=item&quot;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                编号：&#123;&#123;item.id&#125;&#125; 姓名:&#123;&#123;item.name&#125;&#125;---身高:&#123;&#123;item.height&#125;&#125;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;/li&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;/ul&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        `</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">num</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">totalCount</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">users</span>: [],</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">height</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//组件实例已创建时</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> users = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getUserList</span>();</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">users</span> = users;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//批量更新用户身高</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="title function_">batchUpdate</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//批量更新身高，动态的给users中添加身高属性</span></span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">batchUpdate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">//   c.height = this.height;</span></span></span><br><span class="line"><span class="language-javascript">              <span class="comment">//   Vue.set(c, &quot;height&quot;, this.height);</span></span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.$set(c, <span class="string">&quot;height&quot;</span>, <span class="variable language_">this</span>.<span class="property">height</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">getTotal</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;methods&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">users</span>.<span class="property">length</span> + <span class="string">&quot;个&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">getUserList</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">resolve</span>([</span></span><br><span class="line"><span class="language-javascript">                  &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                  &#125;,</span></span><br><span class="line"><span class="language-javascript">                  &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                  &#125;,</span></span><br><span class="line"><span class="language-javascript">                  &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&quot;老王&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                  &#125;,</span></span><br><span class="line"><span class="language-javascript">                ]);</span></span><br><span class="line"><span class="language-javascript">              &#125;, <span class="number">2000</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">users</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">immediate</span>: <span class="literal">true</span>, <span class="comment">//立即执行</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.<span class="property">totalCount</span> = newValue.<span class="property">length</span> + <span class="string">&quot;个人&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，我们首先创建了一个<code>user-list</code>组件，该组件首先会通过<code>props</code>接收传递过来的用户数据。</p><p>在这里我们将<code>props</code>定义成了对象的形式，这样更容易进行数据类型的校验，同时还可以设置默认值。</p><p>接下来将原来定义在<code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code> 中的用户列表，要剪切到<code>user-list</code>组件的<code>template</code>属性中，同时，我们知道在列表中会用到<code>selectItem</code>属性，所以在<code>user-list</code>的<code>data</code>中定义该属性，父组件就不用在定义该属性了。</p><p>下面，我们在<code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code>中使用该组件,并且传递了用户数据。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 用户列表组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user-list</span> <span class="attr">:users</span>=<span class="string">&quot;users&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">user-list</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在用户列表的组件，在这里我们就创建好了。</p><h4 id="16-3-2-用户添加组件设计"><a href="#16-3-2-用户添加组件设计" class="headerlink" title="16.3.2 用户添加组件设计"></a>16.3.2 用户添加组件设计</h4><p>下面我们在创建一个组件，该组件封装了一个文本框和添加用户信息的按钮。</p><p>代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//新增用户组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;user-add&quot;</span>, &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">userInfo</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;div&gt;</span></span><br><span class="line"><span class="string">             &lt;p&gt;</span></span><br><span class="line"><span class="string">                &lt;input type=&quot;text&quot; v-model=&quot;userInfo&quot; v-on:keydown.enter=&quot;addUser&quot; /&gt;</span></span><br><span class="line"><span class="string">             &lt;/p&gt;</span></span><br><span class="line"><span class="string">             &lt;button @click=&quot;addUser&quot;&gt;新增用户&lt;/button&gt;</span></span><br><span class="line"><span class="string">              &lt;/div&gt;</span></span><br><span class="line"><span class="string">            `</span>,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">addUser</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">//将输入的用户数据通知给父组件，来完成新增用户操作.</span></span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;add-user&quot;</span>, <span class="variable language_">this</span>.<span class="property">userInfo</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">userInfo</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们创建了<code>user-add</code> 这个组件，该组件最终呈现的就是就是一个文本框与一个添加按钮。并且通过<code>v-model</code>将<code>userInfo</code>属性与文本框进行了绑定。同时，单击按钮的时候，执行<code>addUser</code>方法，在该方法中，通过<code>$emit</code>想父组件发送了一个事件，同时将用户在文本框中输入的数据也传递过去。</p><p>然后清空文本框，</p><p>下面看一下父组件的处理。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 新增用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user-add</span> @<span class="attr">add-user</span>=<span class="string">&quot;addUser&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">user-add</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code> 中使用<code>user-add</code>这个组件，同时接受传递过来的事件<code>add-user</code>,然后执行<code>addUser</code>方法。</p><p>下面看一下<code>addUser</code>这个方法的具体实现。</p><p>在<code>vue</code> 实例的<code>methods</code>属性中，添加<code>addUser</code>这个方法。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加用户的信息</span></span><br><span class="line">          <span class="title function_">addUser</span>(<span class="params">userInfo</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">              <span class="attr">id</span>: <span class="variable language_">this</span>.<span class="property">users</span>[<span class="variable language_">this</span>.<span class="property">users</span>.<span class="property">length</span> - <span class="number">1</span>].<span class="property">id</span> + <span class="number">1</span>,</span><br><span class="line">              <span class="attr">name</span>: userInfo,</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;,</span><br></pre></td></tr></table></figure><p>接受用户在文本框中输入的数据，然后添加到<code>users</code>数组中。</p><p>完整代码如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>列表渲染<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.actived</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#dddddd</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 批量更新身高 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;height&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;batchUpdate&quot;</span>&gt;</span>批量更新用户身高<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 新增用户 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">user-add</span> @<span class="attr">add-user</span>=<span class="string">&quot;addUser&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">user-add</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 用户列表组件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">user-list</span> <span class="attr">:users</span>=<span class="string">&quot;users&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">user-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>总人数：&#123;&#123;totalCount&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//新增用户组件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;user-add&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">userInfo</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          &#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">             &lt;p&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;input type=&quot;text&quot; v-model=&quot;userInfo&quot; v-on:keydown.enter=&quot;addUser&quot; /&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">             &lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">             &lt;button @click=&quot;addUser&quot;&gt;新增用户&lt;/button&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">              &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            `</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">addUser</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//将输入的用户数据通知给父组件，来完成新增用户操作.</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.$emit(<span class="string">&quot;add-user&quot;</span>, <span class="variable language_">this</span>.<span class="property">userInfo</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">userInfo</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 用户列表</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;user-list&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">selectItem</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          &#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">users</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="title class_">Array</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">default</span>: [],</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;p v-if=&quot;users.length===0&quot;&gt;没有任何用户数据&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;ul v-else&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;li</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                v-for=&quot;(item,index) in users&quot;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                :key=&quot;item.id&quot;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                :style=&quot;&#123;backgroundColor:selectItem===item?&#x27;#dddddd&#x27;:&#x27;transparent&#x27;&#125;&quot;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                @mousemove=&quot;selectItem=item&quot;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                编号：&#123;&#123;item.id&#125;&#125; 姓名:&#123;&#123;item.name&#125;&#125;---身高:&#123;&#123;item.height&#125;&#125;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;/li&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;/ul&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        `</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">num</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">totalCount</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">users</span>: [],</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">height</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//组件实例已创建时</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> users = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getUserList</span>();</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">users</span> = users;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//批量更新用户身高</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="title function_">batchUpdate</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//添加用户的信息</span></span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">addUser</span>(<span class="params">userInfo</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">push</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">id</span>: <span class="variable language_">this</span>.<span class="property">users</span>[<span class="variable language_">this</span>.<span class="property">users</span>.<span class="property">length</span> - <span class="number">1</span>].<span class="property">id</span> + <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">name</span>: userInfo,</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//批量更新身高，动态的给users中添加身高属性</span></span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">batchUpdate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">//   c.height = this.height;</span></span></span><br><span class="line"><span class="language-javascript">              <span class="comment">//   Vue.set(c, &quot;height&quot;, this.height);</span></span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.$set(c, <span class="string">&quot;height&quot;</span>, <span class="variable language_">this</span>.<span class="property">height</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">getTotal</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;methods&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">users</span>.<span class="property">length</span> + <span class="string">&quot;个&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">getUserList</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">resolve</span>([</span></span><br><span class="line"><span class="language-javascript">                  &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                  &#125;,</span></span><br><span class="line"><span class="language-javascript">                  &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                  &#125;,</span></span><br><span class="line"><span class="language-javascript">                  &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&quot;老王&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                  &#125;,</span></span><br><span class="line"><span class="language-javascript">                ]);</span></span><br><span class="line"><span class="language-javascript">              &#125;, <span class="number">2000</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">users</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">immediate</span>: <span class="literal">true</span>, <span class="comment">//立即执行</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.<span class="property">totalCount</span> = newValue.<span class="property">length</span> + <span class="string">&quot;个人&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="16-3-3-自定义组件实现双向绑定"><a href="#16-3-3-自定义组件实现双向绑定" class="headerlink" title="16.3.3 自定义组件实现双向绑定"></a>16.3.3 自定义组件实现双向绑定</h4><p>在上一个案例中，我们创建了一个<code>user-add</code>这个组件，完成用户信息的添加。</p><p>并且在该组件的内部，维护了所添加的用户信息。</p><p>假如，我不想让<code>user-add</code>这个组件来维护这个用户信息，而是让父组件来维护，应该怎样处理呢？</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 新增用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user-add</span> @<span class="attr">add-user</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">user-add</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将<code>userInfo</code>的值给<code>v-model</code>.</p><p>所以在父组件中要定义<code>userInfo</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">num</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">totalCount</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">users</span>: [],</span><br><span class="line">        <span class="attr">height</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">userInfo</span>: <span class="string">&quot;abc&quot;</span>,</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure><p>下面看一下<code>user-add</code>组件的修改</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;user-add&quot;</span>, &#123;</span><br><span class="line">  <span class="comment">// data() &#123;</span></span><br><span class="line">  <span class="comment">//   return &#123;</span></span><br><span class="line">  <span class="comment">//     userInfo: &quot;&quot;,</span></span><br><span class="line">  <span class="comment">//   &#125;;</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&quot;value&quot;</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;div&gt;</span></span><br><span class="line"><span class="string">             &lt;p&gt;</span></span><br><span class="line"><span class="string">                &lt;input type=&quot;text&quot; :value=&quot;value&quot; @input=&quot;onInput&quot; v-on:keydown.enter=&quot;addUser&quot; /&gt;</span></span><br><span class="line"><span class="string">             &lt;/p&gt;</span></span><br><span class="line"><span class="string">             &lt;button @click=&quot;addUser&quot;&gt;新增用户&lt;/button&gt;</span></span><br><span class="line"><span class="string">              &lt;/div&gt;</span></span><br><span class="line"><span class="string">            `</span>,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">addUser</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">//将输入的用户数据通知给父组件，来完成新增用户操作.</span></span><br><span class="line">      <span class="comment">// this.$emit(&quot;add-user&quot;, this.userInfo);</span></span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;add-user&quot;</span>);</span><br><span class="line">      <span class="comment">// this.userInfo = &quot;&quot;;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">onInput</span>(<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;input&quot;</span>, e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在<code>user-add</code>组件中，定义<code>props</code>接收传递过来的值，也就是<code>userInfo</code>的值会传递给<code>value</code></p><p>下面修改<code>user-add</code>组件中的模板，文本框绑定<code>value</code>值。通过给其添加<code>input</code>事件，在文本框中输入值后，调用<code>onInput</code>方法，在该方法中获取用户在文本框中输入的值，然后发送<code>input</code>事件。对应的值传递给父组件中的<code>userInfo</code></p><p>同时单击“新增用户”按钮的时候，执行<code>addUser</code>方法，在该方法中发送事件<code>add-user</code>,也不需要传递数据了。</p><p>同时，父组件中的<code>addUser</code>方法实现如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">addUser</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="variable language_">this</span>.<span class="property">users</span>[<span class="variable language_">this</span>.<span class="property">users</span>.<span class="property">length</span> - <span class="number">1</span>].<span class="property">id</span> + <span class="number">1</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">userInfo</span>,</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">userInfo</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>直接从<code>data</code>中获取<code>userInfo</code>的数据。</p><p>总结：</p><p>以下的写法</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user-add</span> @<span class="attr">add-user</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">user-add</span>&gt;</span></span><br></pre></td></tr></table></figure><p>等价以下的写法</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user-add</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;userInfo&quot;</span> <span class="attr">v-on:input</span>=<span class="string">&quot;userInfo = $event&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">user-add</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也就是说<code>v-model</code>就是<code>v-bind</code>与<code>v-on</code>的语法糖。</p><p>在这里我们将<code>userInfo</code>的值给了<code>value</code>属性，而<code>value</code>属性传递到了<code>user-add</code>组件中，所以在<code>user-add</code>组件中要通过<code>props</code>来接收<code>value</code>属性的值。</p><p>在<code>user-add</code>组件的文本中，输入内容后触发<code>@input</code> 事件，对应的会调用<code>onInput</code>方法，在该方法中，执行了</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$emit(<span class="string">&quot;input&quot;</span>, e.<span class="property">target</span>.<span class="property">value</span>);</span><br></pre></td></tr></table></figure><p>发送了<code>input</code>事件，并且传递了用户在文本框中输入的值。</p><p>那很明显，这时会触发下面代码中的<code>input</code>事件，将传递过来的值给<code>userInfo</code>属性。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user-add</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;userInfo&quot;</span> <span class="attr">v-on:input</span>=<span class="string">&quot;userInfo = $event&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">user-add</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上就是<code>v-model</code>的原理，希望仔细体会，这也是面试经常会被问到的问题。</p><h4 id="16-3-4-使用插槽完成内容分发"><a href="#16-3-4-使用插槽完成内容分发" class="headerlink" title="16.3.4. 使用插槽完成内容分发"></a>16.3.4. 使用插槽完成内容分发</h4><p>关于插槽的内容，在前面的的课程中我们已经学习过了，那么什么是内容分发呢？</p><p>其实就是在使用组件的时候，我们提供具体的数据内容，然后这些内容会插入到组件内部插槽的位置，这就是所谓的内容分发。</p><p>下面，要做的事情就是创建一个信息的提示窗口。例如：当添加用户成功后，给出相应的提示。</p><p>首先先创建样式：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">     <span class="selector-class">.actived</span> &#123;</span><br><span class="line">       <span class="attribute">background-color</span>: <span class="number">#dddddd</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="selector-class">.message-box</span> &#123;</span><br><span class="line">       <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">       <span class="attribute">background-color</span>: <span class="number">#4fc</span>;</span><br><span class="line">       <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#42b</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="selector-class">.message-box-close</span> &#123;</span><br><span class="line">       <span class="attribute">float</span>: right;</span><br><span class="line">     &#125;</span><br><span class="line">   &lt;/style&gt;</span><br></pre></td></tr></table></figure><p>下面创建对应的组件。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建弹出的组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;message&quot;</span>, &#123;</span><br><span class="line">  <span class="comment">//show表示的含义，控制弹出窗口的显示与隐藏。</span></span><br><span class="line">  <span class="comment">//slot:表示占坑。也就是窗口中的内容，是通过外部组件传递过来的。</span></span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&quot;show&quot;</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;div class=&#x27;message-box&#x27; v-if=&quot;show&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">            &lt;span class=&quot;message-box-close&quot;&gt;关闭&lt;/span&gt;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;`</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用上面的组件</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 弹窗组件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">message</span> <span class="attr">:show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span> 添加用户成功 <span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 批量更新身高 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>data</code> 中定义<code>isShow</code>属性，初始值为<code>false</code>.</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">       <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">       <span class="attr">data</span>: &#123;</span><br><span class="line">         <span class="attr">num</span>: <span class="number">100</span>,</span><br><span class="line">         <span class="attr">totalCount</span>: <span class="number">0</span>,</span><br><span class="line">         <span class="attr">users</span>: [],</span><br><span class="line">         <span class="attr">height</span>: <span class="number">0</span>,</span><br><span class="line">         <span class="attr">userInfo</span>: <span class="string">&quot;abc&quot;</span>,</span><br><span class="line">         <span class="attr">isShow</span>: <span class="literal">false</span>,</span><br><span class="line">       &#125;,</span><br></pre></td></tr></table></figure><p>下面就是当用户完成添加的时候，弹出该窗口。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加用户的信息</span></span><br><span class="line">         <span class="title function_">addUser</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">             <span class="attr">id</span>: <span class="variable language_">this</span>.<span class="property">users</span>[<span class="variable language_">this</span>.<span class="property">users</span>.<span class="property">length</span> - <span class="number">1</span>].<span class="property">id</span> + <span class="number">1</span>,</span><br><span class="line">             <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">userInfo</span>,</span><br><span class="line">           &#125;);</span><br><span class="line">           <span class="variable language_">this</span>.<span class="property">userInfo</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">           <span class="comment">//完成用户添加后，给出相应的提示信息</span></span><br><span class="line">           <span class="variable language_">this</span>.<span class="property">isShow</span> = <span class="literal">true</span>;</span><br><span class="line">         &#125;,</span><br></pre></td></tr></table></figure><p>在<code>addUser</code>方法中完成了用户信息的添加后，将<code>isShow</code>的属性值设置为<code>true</code>.</p><p>这时弹出了对应的窗口。</p><p>下面要考虑的就是，单击窗口右侧的“关闭”按钮，将窗口关闭这个效果应该怎样实现。</p><p>首先给<code>关闭</code>按钮添加单击事件。</p><p>如下所示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建弹出的组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;message&quot;</span>, &#123;</span><br><span class="line">  <span class="comment">//show表示的含义，控制弹出窗口的显示与隐藏。</span></span><br><span class="line">  <span class="comment">//slot:表示占坑。也就是窗口中的内容，是通过外部组件传递过来的。</span></span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&quot;show&quot;</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;div class=&#x27;message-box&#x27; v-if=&quot;show&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">            &lt;span class=&quot;message-box-close&quot; @click=&#x27;$emit(&quot;close&quot;,false)&#x27;&gt;关闭&lt;/span&gt;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;`</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当单击关闭按钮后，会发送一个<code>close</code>事件，同时传递的值为<code>false</code>.</p><p>下面回到父组件中，对<code>close</code>事件进行处理。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 弹窗组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">message</span> <span class="attr">:show</span>=<span class="string">&quot;isShow&quot;</span> @<span class="attr">close</span>=<span class="string">&quot;closeWindow&quot;</span>&gt;</span> 添加用户成功 <span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当<code>close</code>事件触发后，执行<code>closeWindow</code>方法。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//关闭窗口</span></span><br><span class="line">        <span class="title function_">closeWindow</span>(<span class="params">data</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">isShow</span> = data;</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><p>在<code>closeWindow</code>方法中，根据子组件传递过来的值<code>false</code>,修改<code>isShow</code>属性的值，这时<code>isShow</code>的值为<code>false</code>.这时窗口关闭。</p><p>下面要解决的问题就是，在使用弹窗组件的时候，不仅能传递窗口的内容，还能传递其它的内容，例如标题等。</p><p>那应该怎样处理呢?</p><p>这里，可以使用<code>具名插槽</code></p><p>代码如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 弹窗组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">message</span> <span class="attr">:show</span>=<span class="string">&quot;isShow&quot;</span> @<span class="attr">close</span>=<span class="string">&quot;closeWindow&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- titile的插槽 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>恭喜<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 默认插槽 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span>&gt;</span> 添加用户成功 <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面修改一下<code>message</code>组件中的内容。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建弹出的组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;message&quot;</span>, &#123;</span><br><span class="line">  <span class="comment">//show表示的含义，控制弹出窗口的显示与隐藏。</span></span><br><span class="line">  <span class="comment">//slot:表示占坑。也就是窗口中的内容，是通过外部组件传递过来的。</span></span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&quot;show&quot;</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;div class=&#x27;message-box&#x27; v-if=&quot;show&quot;&gt;</span></span><br><span class="line"><span class="string">             &lt;!--具名插槽--&gt;</span></span><br><span class="line"><span class="string">             &lt;slot name=&quot;title&quot;&gt;默认标题&lt;/slot&gt;</span></span><br><span class="line"><span class="string">            &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">            &lt;span class=&quot;message-box-close&quot; @click=&#x27;$emit(&quot;close&quot;,false)&#x27;&gt;关闭&lt;/span&gt;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;`</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在上面定义<code>message</code>组件的时候，指定了<code>具名插槽</code>，名称为<code>title</code>.要与在父组件中使用<code>message</code>组件的时候指定的名称保持一致，同时这里如果没有传递任何内容，将会显示”默认标题”。</p><p>完整代码如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>列表渲染<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.actived</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#dddddd</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.message-box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#4fc</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#42b</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.message-box-close</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 弹窗组件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">message</span> <span class="attr">:show</span>=<span class="string">&quot;isShow&quot;</span> @<span class="attr">close</span>=<span class="string">&quot;closeWindow&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- titile的插槽 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:title</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span>恭喜<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 默认插槽 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span>&gt;</span> 添加用户成功 <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 批量更新身高 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;height&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;batchUpdate&quot;</span>&gt;</span>批量更新用户身高<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 新增用户 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">user-add</span> @<span class="attr">add-user</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">user-add</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 用户列表组件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">user-list</span> <span class="attr">:users</span>=<span class="string">&quot;users&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">user-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>总人数：&#123;&#123;totalCount&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//创建弹出的组件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;message&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//show表示的含义，控制弹出窗口的显示与隐藏。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//slot:表示占坑。也就是窗口中的内容，是通过外部组件传递过来的。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>: [<span class="string">&quot;show&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`&lt;div class=&#x27;message-box&#x27; v-if=&quot;show&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">             &lt;!--具名插槽--&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">             &lt;slot name=&quot;title&quot;&gt;默认标题&lt;/slot&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;slot&gt;&lt;/slot&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;span class=&quot;message-box-close&quot; @click=&#x27;$emit(&quot;close&quot;,false)&#x27;&gt;关闭&lt;/span&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">          &lt;/div&gt;`</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//新增用户组件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;user-add&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// data() &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//   return &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     userInfo: &quot;&quot;,</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//   &#125;;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;,</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>: [<span class="string">&quot;value&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">             &lt;p&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;input type=&quot;text&quot; :value=&quot;value&quot; @input=&quot;onInput&quot; v-on:keydown.enter=&quot;addUser&quot; /&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">             &lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">             &lt;button @click=&quot;addUser&quot;&gt;新增用户&lt;/button&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">              &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            `</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">addUser</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//将输入的用户数据通知给父组件，来完成新增用户操作.</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// this.$emit(&quot;add-user&quot;, this.userInfo);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.$emit(<span class="string">&quot;add-user&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// this.userInfo = &quot;&quot;;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">onInput</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.$emit(<span class="string">&quot;input&quot;</span>, e.<span class="property">target</span>.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 用户列表</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;user-list&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">selectItem</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          &#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">users</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="title class_">Array</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">default</span>: [],</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;p v-if=&quot;users.length===0&quot;&gt;没有任何用户数据&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;ul v-else&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;li</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                v-for=&quot;(item,index) in users&quot;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                :key=&quot;item.id&quot;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                :style=&quot;&#123;backgroundColor:selectItem===item?&#x27;#dddddd&#x27;:&#x27;transparent&#x27;&#125;&quot;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                @mousemove=&quot;selectItem=item&quot;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                编号：&#123;&#123;item.id&#125;&#125; 姓名:&#123;&#123;item.name&#125;&#125;---身高:&#123;&#123;item.height&#125;&#125;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;/li&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;/ul&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        `</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">num</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">totalCount</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">users</span>: [],</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">height</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">userInfo</span>: <span class="string">&quot;abc&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">isShow</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//组件实例已创建时</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> users = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getUserList</span>();</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">users</span> = users;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//批量更新用户身高</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="title function_">batchUpdate</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//关闭窗口</span></span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">closeWindow</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">isShow</span> = data;</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//添加用户的信息</span></span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">addUser</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">push</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">id</span>: <span class="variable language_">this</span>.<span class="property">users</span>[<span class="variable language_">this</span>.<span class="property">users</span>.<span class="property">length</span> - <span class="number">1</span>].<span class="property">id</span> + <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">userInfo</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">userInfo</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//完成用户添加后，给出相应的提示信息</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">isShow</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//批量更新身高，动态的给users中添加身高属性</span></span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">batchUpdate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">//   c.height = this.height;</span></span></span><br><span class="line"><span class="language-javascript">              <span class="comment">//   Vue.set(c, &quot;height&quot;, this.height);</span></span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.$set(c, <span class="string">&quot;height&quot;</span>, <span class="variable language_">this</span>.<span class="property">height</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">getTotal</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;methods&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">users</span>.<span class="property">length</span> + <span class="string">&quot;个&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">getUserList</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">resolve</span>([</span></span><br><span class="line"><span class="language-javascript">                  &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                  &#125;,</span></span><br><span class="line"><span class="language-javascript">                  &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                  &#125;,</span></span><br><span class="line"><span class="language-javascript">                  &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&quot;老王&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                  &#125;,</span></span><br><span class="line"><span class="language-javascript">                ]);</span></span><br><span class="line"><span class="language-javascript">              &#125;, <span class="number">2000</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">users</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">immediate</span>: <span class="literal">true</span>, <span class="comment">//立即执行</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.<span class="property">totalCount</span> = newValue.<span class="property">length</span> + <span class="string">&quot;个人&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="16-3-5-vm-on与vm-emit应用"><a href="#16-3-5-vm-on与vm-emit应用" class="headerlink" title="16.3.5 vm.$on与vm.$emit应用"></a>16.3.5 <code>vm.$on</code>与<code>vm.$emit</code>应用</h4><p>现在，关于用户管理这个案例的一些组件拆分，以及插槽的应用在这我们已经构建好了。</p><p>下面就看一下<code>vm.$on</code>与<code>vm.$emit</code>的应用。</p><p>根据前面的学习，我们知道<code>vm.$on</code>与<code>vm.$emit</code>的典型应用就是事件总线。</p><p>也就是通过在<code>Vue</code> 原型上添加一个<code>Vue</code>实例作为事件总线，实现组件间相互通信，而且不受组件间关系的影响</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vue.prototype.$bus=new Vue()</span><br></pre></td></tr></table></figure><p>在所有组件最上面创建事件总线，</p><p>这样做的好处就是在任意组件中使用<code>this.$bus</code>访问到该<code>Vue</code>实例。</p><p>下面，我们来看一下事件总线的用法。</p><p>首先，我们这里先把事件总线创建出来。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建事件总线</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="keyword">new</span> <span class="title class_">Vue</span>();</span><br></pre></td></tr></table></figure><p>下面，在创建一个警告的窗口，也就是当单击“新增用户”按钮的时候，如果用户没有填写用户名给出相应册错误提示。</p><p>在这里先把样式修改一下：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">     <span class="selector-class">.actived</span> &#123;</span><br><span class="line">       <span class="attribute">background-color</span>: <span class="number">#dddddd</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="selector-class">.message-box</span> &#123;</span><br><span class="line">       <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="selector-class">.success</span> &#123;</span><br><span class="line">       <span class="attribute">background-color</span>: <span class="number">#4fc</span>;</span><br><span class="line">       <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#42b</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="selector-class">.warning</span> &#123;</span><br><span class="line">       <span class="attribute">background-color</span>: red;</span><br><span class="line">       <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#42b</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="selector-class">.message-box-close</span> &#123;</span><br><span class="line">       <span class="attribute">float</span>: right;</span><br><span class="line">     &#125;</span><br><span class="line">   &lt;/style&gt;</span><br></pre></td></tr></table></figure><p>然后创建出对应的窗口。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">message</span> <span class="attr">:show</span>=<span class="string">&quot;showWarn&quot;</span> @<span class="attr">close</span>=<span class="string">&quot;closeWindow&quot;</span> <span class="attr">class</span>=<span class="string">&quot;warning&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- titile的插槽 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>警告<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 默认插槽 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span>&gt;</span> 请输入用户名 <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：在上面的代码中，我们使用<code>showWarn</code>这个属性控制警告窗口的显示与隐藏。</p><p>同时，为其添加了<code>warning</code>样式，对应的成功的窗口需要添加<code>success</code> 样式。</p><p>同时在<code>data</code>中定义<code>showWarn</code>属性。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">          <span class="attr">num</span>: <span class="number">100</span>,</span><br><span class="line">          <span class="attr">totalCount</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">users</span>: [],</span><br><span class="line">          <span class="attr">height</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">userInfo</span>: <span class="string">&quot;abc&quot;</span>,</span><br><span class="line">          <span class="attr">isShow</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">showWarn</span>: <span class="literal">false</span>, <span class="comment">// 控制警告窗口的显示与隐藏</span></span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><p>下面要修改的就是当单击”新增用户”按钮的时候，对<code>addUser</code>方法的修改。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加用户的信息</span></span><br><span class="line">         <span class="title function_">addUser</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">userInfo</span>) &#123;</span><br><span class="line">             <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">               <span class="attr">id</span>: <span class="variable language_">this</span>.<span class="property">users</span>[<span class="variable language_">this</span>.<span class="property">users</span>.<span class="property">length</span> - <span class="number">1</span>].<span class="property">id</span> + <span class="number">1</span>,</span><br><span class="line">               <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">userInfo</span>,</span><br><span class="line">             &#125;);</span><br><span class="line">             <span class="variable language_">this</span>.<span class="property">userInfo</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">             <span class="comment">//完成用户添加后，给出相应的提示信息</span></span><br><span class="line">             <span class="variable language_">this</span>.<span class="property">isShow</span> = <span class="literal">true</span>;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="comment">// 显示错误警告信息</span></span><br><span class="line">             <span class="variable language_">this</span>.<span class="property">showWarn</span> = <span class="literal">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;,</span><br></pre></td></tr></table></figure><p>判断<code>userInfo</code>中是否有值，如果没有值，展示出错误警告信息。</p><p>通过浏览器，进行测试。发现如果用户没有在文本框中输入用户名，直接单击了“新增用户”，这时给出了错误提示的窗口。</p><p>但是用户没有关闭错误提示的窗口，而是直接在文本框中输入了用户名，然后又点击了”新增用户”按钮，这时“成功窗口”与“警告窗口”都显示出来了。</p><p>下面需要解决这个问题。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;message&quot;</span>, &#123;</span><br><span class="line">  <span class="comment">//show表示的含义，控制弹出窗口的显示与隐藏。</span></span><br><span class="line">  <span class="comment">//slot:表示占坑。也就是窗口中的内容，是通过外部组件传递过来的。</span></span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&quot;show&quot;</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;div class=&#x27;message-box&#x27; v-if=&quot;show&quot;&gt;</span></span><br><span class="line"><span class="string">             &lt;!--具名插槽--&gt;</span></span><br><span class="line"><span class="string">             &lt;slot name=&quot;title&quot;&gt;默认标题&lt;/slot&gt;</span></span><br><span class="line"><span class="string">            &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">            &lt;span class=&quot;message-box-close&quot; @click=&#x27;$emit(&quot;close&quot;,false)&#x27;&gt;关闭&lt;/span&gt;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;`</span>,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//给总线绑定`message-close`事件</span></span><br><span class="line">    <span class="comment">//也就是监听是否有`message-close`事件被触发。</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&quot;message-close&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;close&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在<code>message</code>组件加载完后，给事件总线绑定了<code>message-close</code>事件，当该事件触发后还是向父组件发送了<code>close</code>事件，这一点与单击关闭按钮是一样的。</p><p>下面，怎样触发总线的<code>message-close</code>事件呢？</p><p>我们可以在窗口中添加一个“清空提示栏”按钮，单击该按钮的时候可以触发<code>message-close</code>事件，从而关闭提示窗口。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 清空提示栏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toolbar&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$bus.$emit(&#x27;message-close&#x27;)&quot;</span>&gt;</span>清空提示栏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>单击”清空提示栏”按钮后，触发事件总线的<code>message-close</code>事件。</p><p>最后完善一下<code>closeWindow</code>方法，该方法控制整个提示窗口的关闭</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//关闭窗口</span></span><br><span class="line">        <span class="title function_">closeWindow</span>(<span class="params">data</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">isShow</span> = data;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">showWarn</span> = data;</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>列表渲染<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.actived</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#dddddd</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.message-box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.success</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#4fc</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#42b</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.warning</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#42b</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.message-box-close</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 弹窗组件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">message</span> <span class="attr">:show</span>=<span class="string">&quot;isShow&quot;</span> @<span class="attr">close</span>=<span class="string">&quot;closeWindow&quot;</span> <span class="attr">class</span>=<span class="string">&quot;success&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- titile的插槽 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:title</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span>恭喜<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 默认插槽 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span>&gt;</span> 添加用户成功 <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 警告 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">message</span> <span class="attr">:show</span>=<span class="string">&quot;showWarn&quot;</span> @<span class="attr">close</span>=<span class="string">&quot;closeWindow&quot;</span> <span class="attr">class</span>=<span class="string">&quot;warning&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- titile的插槽 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:title</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span>警告<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 默认插槽 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span>&gt;</span> 请输入用户名 <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 清空提示栏 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toolbar&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$bus.$emit(&#x27;message-close&#x27;)&quot;</span>&gt;</span>清空提示栏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 批量更新身高 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;height&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;batchUpdate&quot;</span>&gt;</span>批量更新用户身高<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 新增用户 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">user-add</span> @<span class="attr">add-user</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">user-add</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 用户列表组件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">user-list</span> <span class="attr">:users</span>=<span class="string">&quot;users&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">user-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>总人数：&#123;&#123;totalCount&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//创建事件总线</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="keyword">new</span> <span class="title class_">Vue</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//创建弹出的组件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;message&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//show表示的含义，控制弹出窗口的显示与隐藏。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//slot:表示占坑。也就是窗口中的内容，是通过外部组件传递过来的。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>: [<span class="string">&quot;show&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`&lt;div class=&#x27;message-box&#x27; v-if=&quot;show&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">             &lt;!--具名插槽--&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">             &lt;slot name=&quot;title&quot;&gt;默认标题&lt;/slot&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;slot&gt;&lt;/slot&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;span class=&quot;message-box-close&quot; @click=&#x27;$emit(&quot;close&quot;,false)&#x27;&gt;关闭&lt;/span&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">          &lt;/div&gt;`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//给总线绑定`message-close`事件</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//也就是监听是否有`message-close`事件被触发。</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&quot;message-close&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.$emit(<span class="string">&quot;close&quot;</span>, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">          &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//新增用户组件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;user-add&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// data() &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//   return &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     userInfo: &quot;&quot;,</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//   &#125;;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;,</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>: [<span class="string">&quot;value&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">             &lt;p&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;input type=&quot;text&quot; :value=&quot;value&quot; @input=&quot;onInput&quot; v-on:keydown.enter=&quot;addUser&quot; /&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">             &lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">             &lt;button @click=&quot;addUser&quot;&gt;新增用户&lt;/button&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">              &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            `</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">addUser</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//将输入的用户数据通知给父组件，来完成新增用户操作.</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// this.$emit(&quot;add-user&quot;, this.userInfo);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.$emit(<span class="string">&quot;add-user&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// this.userInfo = &quot;&quot;;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">onInput</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.$emit(<span class="string">&quot;input&quot;</span>, e.<span class="property">target</span>.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 用户列表</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;user-list&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">selectItem</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          &#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">users</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="title class_">Array</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">default</span>: [],</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;p v-if=&quot;users.length===0&quot;&gt;没有任何用户数据&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;ul v-else&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;li</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                v-for=&quot;(item,index) in users&quot;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                :key=&quot;item.id&quot;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                :style=&quot;&#123;backgroundColor:selectItem===item?&#x27;#dddddd&#x27;:&#x27;transparent&#x27;&#125;&quot;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                @mousemove=&quot;selectItem=item&quot;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                编号：&#123;&#123;item.id&#125;&#125; 姓名:&#123;&#123;item.name&#125;&#125;---身高:&#123;&#123;item.height&#125;&#125;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;/li&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;/ul&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        `</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">num</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">totalCount</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">users</span>: [],</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">height</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">userInfo</span>: <span class="string">&quot;abc&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">isShow</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">showWarn</span>: <span class="literal">false</span>, <span class="comment">// 控制警告窗口的显示与隐藏</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//组件实例已创建时</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> users = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getUserList</span>();</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">users</span> = users;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//批量更新用户身高</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="title function_">batchUpdate</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//关闭窗口</span></span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">closeWindow</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">isShow</span> = data;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">showWarn</span> = data;</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//添加用户的信息</span></span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">addUser</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">userInfo</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">users</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">push</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                  <span class="attr">id</span>: <span class="variable language_">this</span>.<span class="property">users</span>[<span class="variable language_">this</span>.<span class="property">users</span>.<span class="property">length</span> - <span class="number">1</span>].<span class="property">id</span> + <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                  <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">userInfo</span>,</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">userInfo</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//完成用户添加后，给出相应的提示信息</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">isShow</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">// 显示错误警告信息</span></span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.<span class="property">showWarn</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//批量更新身高，动态的给users中添加身高属性</span></span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">batchUpdate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">//   c.height = this.height;</span></span></span><br><span class="line"><span class="language-javascript">              <span class="comment">//   Vue.set(c, &quot;height&quot;, this.height);</span></span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.$set(c, <span class="string">&quot;height&quot;</span>, <span class="variable language_">this</span>.<span class="property">height</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">getTotal</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;methods&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">users</span>.<span class="property">length</span> + <span class="string">&quot;个&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">getUserList</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">resolve</span>([</span></span><br><span class="line"><span class="language-javascript">                  &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                  &#125;,</span></span><br><span class="line"><span class="language-javascript">                  &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                  &#125;,</span></span><br><span class="line"><span class="language-javascript">                  &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&quot;老王&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                  &#125;,</span></span><br><span class="line"><span class="language-javascript">                ]);</span></span><br><span class="line"><span class="language-javascript">              &#125;, <span class="number">2000</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">users</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">immediate</span>: <span class="literal">true</span>, <span class="comment">//立即执行</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.<span class="property">totalCount</span> = newValue.<span class="property">length</span> + <span class="string">&quot;个人&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="16-4-vm-once与vm-off"><a href="#16-4-vm-once与vm-off" class="headerlink" title="16.4 vm.$once与vm.$off"></a>16.4 <code>vm.$once</code>与<code>vm.$off</code></h3><p>关于这两个方法，大家只需要了解一下就可以了。</p><p><code>vm.$once</code><br>监听一个自定义事件，但是只触发一次。一旦触发之后，监听器就会被移除。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vm.$on(<span class="string">&quot;test&quot;</span>, <span class="keyword">function</span> (<span class="params">msg</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(msg);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>vm.$off</code></p><p>移除自定义事件监听器。</p><ul><li><p>如果没有提供参数，则移除所有的事件监听器；</p></li><li><p>如果只提供了事件，则移除该事件所有的监听器；</p></li><li><p>如果同时提供了事件与回调，则只移除这个回调的监听器</p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vm.$off() // 移除所有的事件监听器</span><br><span class="line">vm.$off(&#x27;test&#x27;) // 移除该事件所有的监听器</span><br><span class="line">vm.$off(&#x27;test&#x27;, callback) // 只移除这个回调的监听器</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="16-5-ref-和vm-refs"><a href="#16-5-ref-和vm-refs" class="headerlink" title="16.5 ref 和vm.$refs"></a>16.5 <code>ref</code> 和<code>vm.$refs</code></h3><p><code>ref</code>被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的<code>$refs</code>对象上，如果在普通的<code>DOM</code>元素上使用，引用指向的就是<code>DOM</code>元素;如果用在子组件上，引用就指向组件的实例。</p><p>如下代码示例，是用来设置输入框的焦点</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span>  ref=<span class="string">&quot;inp&quot;</span> /&gt;</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//mounted之后才能访问到inp</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">inp</span>.<span class="title function_">focus</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面在用户管理案例中，看一下具体的实现效果。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//新增用户组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;user-add&quot;</span>, &#123;</span><br><span class="line">  <span class="comment">// data() &#123;</span></span><br><span class="line">  <span class="comment">//   return &#123;</span></span><br><span class="line">  <span class="comment">//     userInfo: &quot;&quot;,</span></span><br><span class="line">  <span class="comment">//   &#125;;</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&quot;value&quot;</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">              &lt;div&gt;</span></span><br><span class="line"><span class="string">               &lt;p&gt;</span></span><br><span class="line"><span class="string">                  &lt;input type=&quot;text&quot; :value=&quot;value&quot; @input=&quot;onInput&quot; v-on:keydown.enter=&quot;addUser&quot; ref=&quot;inp&quot; /&gt;</span></span><br><span class="line"><span class="string">               &lt;/p&gt;</span></span><br><span class="line"><span class="string">               &lt;button @click=&quot;addUser&quot;&gt;新增用户&lt;/button&gt;</span></span><br><span class="line"><span class="string">                &lt;/div&gt;</span></span><br><span class="line"><span class="string">              `</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">addUser</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">//将输入的用户数据通知给父组件，来完成新增用户操作.</span></span><br><span class="line">      <span class="comment">// this.$emit(&quot;add-user&quot;, this.userInfo);</span></span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;add-user&quot;</span>);</span><br><span class="line">      <span class="comment">// this.userInfo = &quot;&quot;;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">onInput</span>(<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;input&quot;</span>, e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">inp</span>.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们首先给<code>user-add</code>组件模板中的文本框添加了<code>ref</code>属性。</p><p>然后，在其所对应的<code>mounted</code>方法中，通过<code>$refs</code>找到文本框，然后为其添加焦点。</p><p>回到浏览器中，刷新浏览器，可以看到对应的文本框获取了焦点。</p><p>下面，我们在将弹出窗口修改一下：</p><p>下面修改一下<code>message</code>模板中的内容。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建弹出的组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;message&quot;</span>, &#123;</span><br><span class="line">  <span class="comment">//show表示的含义，控制弹出窗口的显示与隐藏。</span></span><br><span class="line">  <span class="comment">//slot:表示占坑。也就是窗口中的内容，是通过外部组件传递过来的。</span></span><br><span class="line">  <span class="comment">// props: [&quot;show&quot;],</span></span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">show</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;div class=&#x27;message-box&#x27; v-if=&quot;show&quot;&gt;</span></span><br><span class="line"><span class="string">               &lt;!--具名插槽--&gt;</span></span><br><span class="line"><span class="string">               &lt;slot name=&quot;title&quot;&gt;默认标题&lt;/slot&gt;</span></span><br><span class="line"><span class="string">              &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">              &lt;span class=&quot;message-box-close&quot; @click=&#x27;toggle&#x27;&gt;关闭&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;`</span>,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//给总线绑定`message-close`事件</span></span><br><span class="line">    <span class="comment">//也就是监听是否有`message-close`事件被触发。</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&quot;message-close&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// this.$emit(&quot;close&quot;, false);</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">toggle</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">toggle</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">show</span> = !<span class="variable language_">this</span>.<span class="property">show</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在上面的代码中，取消了<code>props</code>，而定义了<code>data</code>属性，表明的含义就是整个窗口的状态的控制，也就是提示窗口的显示与隐藏，都是有自己控制，而不是受外部传递的参数来进行控制了。</p><p>同时，在该组件中，添加了<code>toggle</code>方法，修改对应的<code>show</code>的状态。</p><p>所以模板中，按钮的单击事件触发以后，调用的就是<code>toggle</code>方法，也就是单击了窗口的右侧的关闭按钮，是通过调用<code>toggle</code>方法来完成，窗口的关闭。</p><p>同样事件<code>message-close</code>触发以后，也是调用<code>toggle</code>方法来关闭窗口。</p><p>下面看一下关于<code>message</code>模板的使用。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 弹窗组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">message</span> <span class="attr">ref</span>=<span class="string">&quot;msgSuccess&quot;</span> <span class="attr">class</span>=<span class="string">&quot;success&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- titile的插槽 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>恭喜<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 默认插槽 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span>&gt;</span> 添加用户成功 <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，我们为<code>message</code>组件，添加了<code>ref</code>属性。</p><p>同理表示警告的窗口，也需要添加<code>ref</code>的属性。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">message</span> <span class="attr">ref</span>=<span class="string">&quot;msgWaring&quot;</span> <span class="attr">class</span>=<span class="string">&quot;warning&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- titile的插槽 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>警告<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 默认插槽 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span>&gt;</span> 请输入用户名 <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></table></figure><p>关于<code>data</code>中定义的<code>isShow</code>与<code>showWarn</code>就可以取消了。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">          <span class="attr">num</span>: <span class="number">100</span>,</span><br><span class="line">          <span class="attr">totalCount</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">users</span>: [],</span><br><span class="line">          <span class="attr">height</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">userInfo</span>: <span class="string">&quot;abc&quot;</span>,</span><br><span class="line">          <span class="comment">// isShow: false,</span></span><br><span class="line">          <span class="comment">// showWarn: false, // 控制警告窗口的显示与隐藏</span></span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><p>当用户点击“新增用户”按钮的时候，执行<code>addUser</code>方法，下面也需要对该方法进行如下修改：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加用户的信息</span></span><br><span class="line">         <span class="title function_">addUser</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">userInfo</span>) &#123;</span><br><span class="line">             <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">users</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">                 <span class="attr">id</span>: <span class="variable language_">this</span>.<span class="property">users</span>[<span class="variable language_">this</span>.<span class="property">users</span>.<span class="property">length</span> - <span class="number">1</span>].<span class="property">id</span> + <span class="number">1</span>,</span><br><span class="line">                 <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">userInfo</span>,</span><br><span class="line">               &#125;);</span><br><span class="line">               <span class="variable language_">this</span>.<span class="property">userInfo</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">               <span class="comment">//完成用户添加后，给出相应的提示信息</span></span><br><span class="line">               <span class="comment">// this.isShow = true;</span></span><br><span class="line">               <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">msgSuccess</span>.<span class="title function_">toggle</span>();</span><br><span class="line">             &#125;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="comment">// 显示错误警告信息</span></span><br><span class="line">             <span class="comment">// this.showWarn = true;</span></span><br><span class="line">             <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">msgWaring</span>.<span class="title function_">toggle</span>();</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;,</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们都是通过<code>$ref</code> 找到对应的窗口，然后调用<code>toggle</code>方法，来修改对应的状态。</p><p>因为，我们前面讲过如果<code>ref</code>用在子组件上，引用就指向组件的实例.所以可以调用组件内部的<code>toggle</code>方法。</p><p>完整代码如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>列表渲染<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.actived</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#dddddd</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.message-box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.success</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#4fc</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#42b</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.warning</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#42b</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.message-box-close</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 弹窗组件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">message</span> <span class="attr">ref</span>=<span class="string">&quot;msgSuccess&quot;</span> <span class="attr">class</span>=<span class="string">&quot;success&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- titile的插槽 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:title</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span>恭喜<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 默认插槽 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span>&gt;</span> 添加用户成功 <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 警告 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">message</span> <span class="attr">ref</span>=<span class="string">&quot;msgWaring&quot;</span> <span class="attr">class</span>=<span class="string">&quot;warning&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- titile的插槽 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:title</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span>警告<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 默认插槽 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span>&gt;</span> 请输入用户名 <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 清空提示栏 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toolbar&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$bus.$emit(&#x27;message-close&#x27;)&quot;</span>&gt;</span>清空提示栏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 批量更新身高 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;height&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;batchUpdate&quot;</span>&gt;</span>批量更新用户身高<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 新增用户 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">user-add</span> @<span class="attr">add-user</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">user-add</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 用户列表组件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">user-list</span> <span class="attr">:users</span>=<span class="string">&quot;users&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">user-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>总人数：&#123;&#123;totalCount&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//创建事件总线</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="keyword">new</span> <span class="title class_">Vue</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//创建弹出的组件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;message&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//show表示的含义，控制弹出窗口的显示与隐藏。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//slot:表示占坑。也就是窗口中的内容，是通过外部组件传递过来的。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// props: [&quot;show&quot;],</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">show</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">          &#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`&lt;div class=&#x27;message-box&#x27; v-if=&quot;show&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">               &lt;!--具名插槽--&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">               &lt;slot name=&quot;title&quot;&gt;默认标题&lt;/slot&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">              &lt;slot&gt;&lt;/slot&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">              &lt;span class=&quot;message-box-close&quot; @click=&#x27;toggle&#x27;&gt;关闭&lt;/span&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;/div&gt;`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//给总线绑定`message-close`事件</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//也就是监听是否有`message-close`事件被触发。</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&quot;message-close&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// this.$emit(&quot;close&quot;, false);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//当警告窗口和提示信息的窗口，展示出来了才关闭。</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">show</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.<span class="title function_">toggle</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">toggle</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">show</span> = !<span class="variable language_">this</span>.<span class="property">show</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//新增用户组件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;user-add&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// data() &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//   return &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     userInfo: &quot;&quot;,</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//   &#125;;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;,</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>: [<span class="string">&quot;value&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">              &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">               &lt;p&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                  &lt;input type=&quot;text&quot; :value=&quot;value&quot; @input=&quot;onInput&quot; v-on:keydown.enter=&quot;addUser&quot; ref=&quot;inp&quot; /&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">               &lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">               &lt;button @click=&quot;addUser&quot;&gt;新增用户&lt;/button&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">              `</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">addUser</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//将输入的用户数据通知给父组件，来完成新增用户操作.</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// this.$emit(&quot;add-user&quot;, this.userInfo);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.$emit(<span class="string">&quot;add-user&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// this.userInfo = &quot;&quot;;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">onInput</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.$emit(<span class="string">&quot;input&quot;</span>, e.<span class="property">target</span>.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">inp</span>.<span class="title function_">focus</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 用户列表</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;user-list&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">selectItem</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          &#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">users</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="title class_">Array</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">default</span>: [],</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">          &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                  &lt;p v-if=&quot;users.length===0&quot;&gt;没有任何用户数据&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">              &lt;ul v-else&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                  &lt;li</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                  v-for=&quot;(item,index) in users&quot;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                  :key=&quot;item.id&quot;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                  :style=&quot;&#123;backgroundColor:selectItem===item?&#x27;#dddddd&#x27;:&#x27;transparent&#x27;&#125;&quot;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                  @mousemove=&quot;selectItem=item&quot;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                  &gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                  编号：&#123;&#123;item.id&#125;&#125; 姓名:&#123;&#123;item.name&#125;&#125;---身高:&#123;&#123;item.height&#125;&#125;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                  &lt;/li&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">              &lt;/ul&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">          `</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">num</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">totalCount</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">users</span>: [],</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">height</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">userInfo</span>: <span class="string">&quot;abc&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// isShow: false,</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// showWarn: false, // 控制警告窗口的显示与隐藏</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//组件实例已创建时</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> users = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getUserList</span>();</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">users</span> = users;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//批量更新用户身高</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="title function_">batchUpdate</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//关闭窗口</span></span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">closeWindow</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">isShow</span> = data;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">showWarn</span> = data;</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//添加用户的信息</span></span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">addUser</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">userInfo</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">users</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">push</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                  <span class="attr">id</span>: <span class="variable language_">this</span>.<span class="property">users</span>[<span class="variable language_">this</span>.<span class="property">users</span>.<span class="property">length</span> - <span class="number">1</span>].<span class="property">id</span> + <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                  <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">userInfo</span>,</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">userInfo</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//完成用户添加后，给出相应的提示信息</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// this.isShow = true;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">msgSuccess</span>.<span class="title function_">toggle</span>();</span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">// 显示错误警告信息</span></span></span><br><span class="line"><span class="language-javascript">              <span class="comment">// this.showWarn = true;</span></span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">msgWaring</span>.<span class="title function_">toggle</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//批量更新身高，动态的给users中添加身高属性</span></span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">batchUpdate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">//   c.height = this.height;</span></span></span><br><span class="line"><span class="language-javascript">              <span class="comment">//   Vue.set(c, &quot;height&quot;, this.height);</span></span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.$set(c, <span class="string">&quot;height&quot;</span>, <span class="variable language_">this</span>.<span class="property">height</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">getTotal</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;methods&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">users</span>.<span class="property">length</span> + <span class="string">&quot;个&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">getUserList</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">resolve</span>([</span></span><br><span class="line"><span class="language-javascript">                  &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                  &#125;,</span></span><br><span class="line"><span class="language-javascript">                  &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                  &#125;,</span></span><br><span class="line"><span class="language-javascript">                  &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&quot;老王&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                  &#125;,</span></span><br><span class="line"><span class="language-javascript">                ]);</span></span><br><span class="line"><span class="language-javascript">              &#125;, <span class="number">2000</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">users</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">immediate</span>: <span class="literal">true</span>, <span class="comment">//立即执行</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.<span class="property">totalCount</span> = newValue.<span class="property">length</span> + <span class="string">&quot;个人&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面在对<code>ref</code>与<code>vm.$refs</code>的使用做一个总结：</p><ul><li><code>ref</code>是作为渲染结果被创建的，在初始渲染时不能访问它们。也就是必须在<code>mounted</code>构造函数中。</li><li><code>$refs</code>不是响应式的，不要试图用它在模板中做数据绑定。</li></ul><h2 id="17、过滤器"><a href="#17、过滤器" class="headerlink" title="17、过滤器"></a>17、过滤器</h2><h3 id="17-1-过滤器基本使用"><a href="#17-1-过滤器基本使用" class="headerlink" title="17.1 过滤器基本使用"></a>17.1 过滤器基本使用</h3><p>过滤器在日常生活中也是比较常见的，例如自来水的过滤等。</p><p>在<code>Vue</code>中，过滤器的作用就是格式化数据，也就是对数据的过滤处理，比如将字符串格式化为首字母大写</p><p>或者将日期格式化为指定的格式等。</p><p>下面先看一下自定义过滤器的语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vue.filter(&#x27;过滤器名称&#x27;,function(value)&#123;</span><br><span class="line">//value参数表示要处理的数据</span><br><span class="line">  //过滤器业务逻辑，最终将处理后的数据进行返回</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>定义好以后可以使用。使用的方式如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;&#123;&#123;msg|upper&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123;msg|upper|lower&#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>具体的程序如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>过滤器基本使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--使用过滤器--&gt;</span></span><br><span class="line">        &#123;&#123;msg|upper&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//定义过滤器，让输入的单词首字母变成大写.</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&quot;upper&quot;</span>, <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//获取首字母让其转换成大写，然后拼接后面的内容。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> value.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>() + value.<span class="title function_">slice</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">msg</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>过滤器在使用的时候，可以采用如下的方式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;&#123;&#123;msg|upper|lower&#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>也就是，先对<code>msg</code>中的数据使用<code>upper</code>过滤器，得到的结果在交给<code>lower</code>过滤器进行处理。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>过滤器基本使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg|upper&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg|upper|lower&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//定义过滤器，让输入的单词首字母变成大写.</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&quot;upper&quot;</span>, <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//获取首字母让其转换成大写，然后拼接后面的内容。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> value.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>() + value.<span class="title function_">slice</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&quot;lower&quot;</span>, <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> value.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toLowerCase</span>() + value.<span class="title function_">slice</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">msg</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面定义的顾虑器是全局的过滤器，当然也可以定义局部过滤器。</p><p>局部过滤器只能在其所定义的组件内使用。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>过滤器基本使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg|upper&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg|upper|lower&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//定义过滤器，让输入的单词首字母变成大写.</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   Vue.filter(&quot;upper&quot;, function (value) &#123;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//     //获取首字母让其转换成大写，然后拼接后面的内容。</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//     return value.charAt(0).toUpperCase() + value.slice(0);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   &#125;);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&quot;lower&quot;</span>, <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> value.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toLowerCase</span>() + value.<span class="title function_">slice</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">msg</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//局部过滤器</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">filters</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">upper</span>: <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> value.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>() + value.<span class="title function_">slice</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，我们通过<code>fileters</code>定义了一个局部的过滤器<code>upper</code>.</p><p>在前面，我们也说过<code>Vue</code>实例本身就是一个组件。</p><h3 id="17-2-带参数的过滤器"><a href="#17-2-带参数的过滤器" class="headerlink" title="17.2 带参数的过滤器"></a>17.2 带参数的过滤器</h3><p>带参数的过滤器定义如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vue.filter(&#x27;format&#x27;,function(value,arg1)&#123;</span><br><span class="line">//value表示要过滤的数据。</span><br><span class="line">//arg1,表示传递过来的参数</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用的方式如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line"> &#123;&#123;data|format(`yyyy-MM-dd`)&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>要处理的数据<code>data</code>交给了过滤器中回调函数的<code>value</code>参数，<code>yyyy-MM-dd</code>交给了<code>arg1</code>.</p><p>如下代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;过滤器参数&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;&#123; date | format(&quot;abc&quot;, &quot;hello&quot;) &#125;&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      Vue.filter(&quot;format&quot;, function (value, arg, arg1) &#123;</span><br><span class="line">        console.log(arg, arg1);</span><br><span class="line">        return value;</span><br><span class="line">      &#125;);</span><br><span class="line">      const vm = new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">          date: new Date(),</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们定义了<code>format</code>过滤器，然后在使用的时候，我们是将<code>date</code>日期数据给了<code>value</code></p><p><code>abc</code>这个字符串给了<code>arg</code>,<code>hello</code>给了<code>arg1</code>.</p><p>下面，我们把日期给具体的处理一下</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>过滤器参数<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;date|format(&#x27;yyyy-MM-dd&#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&quot;format&quot;</span>, <span class="keyword">function</span> (<span class="params">value, arg, arg1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        result +=</span></span><br><span class="line"><span class="language-javascript">          value.<span class="title function_">getFullYear</span>() +</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&quot;-&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">          (value.<span class="title function_">getMonth</span>() + <span class="number">1</span>) +</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&quot;-&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">          value.<span class="title function_">getDate</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> result;</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">date</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(),</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="18、自定义指令"><a href="#18、自定义指令" class="headerlink" title="18、自定义指令"></a>18、自定义指令</h2><h3 id="18-1-自定义指令基本用法"><a href="#18-1-自定义指令基本用法" class="headerlink" title="18.1 自定义指令基本用法"></a>18.1 自定义指令基本用法</h3><p>为什么需要自定义指令呢？</p><p>因为内置指令不满足需求。</p><p>下面看一下基本的创建自定义指令语法:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&quot;focus&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">inserted</span>: <span class="keyword">function</span> (<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="comment">//获取元素焦点</span></span><br><span class="line">    el.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>自定义指令用法</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> v-focus&gt;</span><br></pre></td></tr></table></figure><p>下面看一下具体的代码。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>自定义指令基本使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-focus</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&quot;focus&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">inserted</span>: <span class="keyword">function</span> (<span class="params">el</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//el:表示指令所绑定的元素</span></span></span><br><span class="line"><span class="language-javascript">          el.<span class="title function_">focus</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，我们通过<code>directive</code>方法创建了一个<code>focus</code>指令。</p><p>在使用该指令的时候，一定要加上<code>v-</code>的形式。</p><p><code>inserted</code>表示的是指令的钩子函数，含义是：被绑定元素插入父节点时调用。</p><h3 id="18-2-自定义指令-带参数"><a href="#18-2-自定义指令-带参数" class="headerlink" title="18.2 自定义指令-带参数"></a>18.2 自定义指令-带参数</h3><p>带参数的自定义指令创建的语法（改变元素背景色）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&quot;color&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">inserted</span>: <span class="keyword">function</span> (<span class="params">el, binding</span>) &#123;</span><br><span class="line">    <span class="comment">//binding表示传递过来的参数</span></span><br><span class="line">    el.<span class="property">style</span>.<span class="property">backgroundColor</span> = binding.<span class="property">value</span>.<span class="property">color</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>指令的用法</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-color</span>=<span class="string">&#x27;&#123;color:&quot;orange&quot;&#125;&#x27;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>下面，看一下完整的代码案例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>自定义指令带参数<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-color</span>=<span class="string">&quot;msg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//自定义指令-带参数</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&quot;color&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">bind</span>: <span class="keyword">function</span> (<span class="params">el, binding</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          el.<span class="property">style</span>.<span class="property">backgroundColor</span> = binding.<span class="property">value</span>.<span class="property">color</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">msg</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">color</span>: <span class="string">&quot;blue&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过上面的代码，可以看到定义了一个<code>color</code>的指令，在使用的时候传递了<code>msg</code>对象。</p><p>所以这个对象会给<code>binding</code>这个参数，我们通过这个参数的<code>value</code> 属性获取<code>msg</code>对象中的<code>color</code>属性的值，然后用来设置文本框的背景色。</p><p>这里使用了<code>bind</code>这个钩子函数：只调用一次，第一次绑定指令到元素时调用，我们可以在此绑定只执行一次的初始化动作。</p><h3 id="18-3-自定义局部指令"><a href="#18-3-自定义局部指令" class="headerlink" title="18.3 自定义局部指令"></a>18.3 自定义局部指令</h3><p>局部指令的基本语法：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">directives</span>:&#123;</span><br><span class="line">    <span class="attr">focus</span>:&#123;</span><br><span class="line">        <span class="comment">//指令的定义</span></span><br><span class="line">        <span class="attr">inserted</span>:<span class="keyword">function</span>(<span class="params">el</span>)&#123;</span><br><span class="line">            el.<span class="title function_">focus</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>Vue</code>实例中添加<code>directives</code></p><p>具体实现的代码如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>局部指令<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-color</span>=<span class="string">&quot;msg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">msg</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">color</span>: <span class="string">&quot;red&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">directives</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">color</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">bind</span>: <span class="keyword">function</span> (<span class="params">el, binding</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              el.<span class="property">style</span>.<span class="property">backgroundColor</span> = binding.<span class="property">value</span>.<span class="property">color</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>局部指令只在所定义的组件中使用。</p><h2 id="19、渲染函数"><a href="#19、渲染函数" class="headerlink" title="19、渲染函数"></a>19、渲染函数</h2><p><code>Vue</code>推荐在绝大数情况下使用模板来创建你的<code>HTML</code>。然后在一些场景中，你真的需要<code>JavaScript</code>的完全编程的能力，也就是使用<code>javaScript来创建HTML</code>，这时你可以用渲染函数，它比模板更接近编译器。</p><p>这里我们先来做一个基本的了解，为后期的深入学习打好一个基础。</p><p>下面先看一下<code>render</code>函数的基本结构。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">render</span>:<span class="keyword">function</span>(<span class="params">createElement</span>)&#123;</span><br><span class="line">    <span class="comment">//createElement函数返回的结果为VNode. VNode就是虚拟dom，用js对象来模拟真实的DOM.</span></span><br><span class="line">    retrun <span class="title function_">createElement</span>(</span><br><span class="line">      tag, <span class="comment">//标签名称</span></span><br><span class="line">       data,<span class="comment">// 传递数据</span></span><br><span class="line">       children <span class="comment">//子节点数组</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面我们在用户管理这个案例中，使用<code>render</code>函数来创建一个组件。</p><p>具体的代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// heading组件</span></span><br><span class="line"><span class="comment">//&lt;heading :level=&quot;1&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/heading&gt; //这时要创建的组件</span></span><br><span class="line"><span class="comment">// &lt;h2 title=&quot;&quot;&gt;&lt;/h2&gt; //这时上面的组件最终渲染的结果</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;heading&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">level</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">render</span>(<span class="params">h</span>) &#123;</span><br><span class="line">    <span class="comment">//h 就是createElement函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(</span><br><span class="line">      <span class="string">&quot;h&quot;</span> + <span class="variable language_">this</span>.<span class="property">level</span>, <span class="comment">//参数1，表示要创建的元素</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$slots</span>.<span class="property">default</span> <span class="comment">//参数3，子节点VNode数组。（这里没有使用参数2，&#123;&#123;tile&#125;&#125;就是一个子元素）</span></span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>接下来就可以使用<code>heading</code>组件了。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用render函数创建的头部组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heading</span> <span class="attr">level</span>=<span class="string">&quot;1&quot;</span>&gt;</span> &#123;&#123;title&#125;&#125; <span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然，这里需要在<code>data</code>中定义<code>title</code>属性。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">          <span class="attr">num</span>: <span class="number">100</span>,</span><br><span class="line">          <span class="attr">totalCount</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">users</span>: [],</span><br><span class="line">          <span class="attr">height</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">userInfo</span>: <span class="string">&quot;abc&quot;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&quot;用户管理&quot;</span>,</span><br><span class="line">          <span class="comment">// isShow: false,</span></span><br><span class="line">          <span class="comment">// showWarn: false, // 控制警告窗口的显示与隐藏</span></span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><p>完整代码如下（24、<code>render函数.html</code>）：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>列表渲染<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.actived</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#dddddd</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.message-box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.success</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#4fc</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#42b</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.warning</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#42b</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.message-box-close</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 弹窗组件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">message</span> <span class="attr">ref</span>=<span class="string">&quot;msgSuccess&quot;</span> <span class="attr">class</span>=<span class="string">&quot;success&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- titile的插槽 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:title</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span>恭喜<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 默认插槽 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span>&gt;</span> 添加用户成功 <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 警告 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">message</span> <span class="attr">ref</span>=<span class="string">&quot;msgWaring&quot;</span> <span class="attr">class</span>=<span class="string">&quot;warning&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- titile的插槽 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:title</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span>警告<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 默认插槽 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span>&gt;</span> 请输入用户名 <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 使用render函数创建的头部组件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">heading</span> <span class="attr">level</span>=<span class="string">&quot;1&quot;</span>&gt;</span> &#123;&#123;title&#125;&#125; <span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 清空提示栏 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toolbar&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$bus.$emit(&#x27;message-close&#x27;)&quot;</span>&gt;</span>清空提示栏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 批量更新身高 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;height&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;batchUpdate&quot;</span>&gt;</span>批量更新用户身高<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 新增用户 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">user-add</span> @<span class="attr">add-user</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">user-add</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 用户列表组件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">user-list</span> <span class="attr">:users</span>=<span class="string">&quot;users&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">user-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>总人数：&#123;&#123;totalCount&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//创建事件总线</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="keyword">new</span> <span class="title class_">Vue</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// heading组件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//&lt;heading :level=&quot;1&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/heading&gt; //这时要创建的组件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// &lt;h2 title=&quot;&quot;&gt;&lt;/h2&gt; //这时上面的组件最终渲染的结果</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;heading&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">level</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">required</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">render</span>(<span class="params">h</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="title function_">h</span>(</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;h&quot;</span> + <span class="variable language_">this</span>.<span class="property">level</span>, <span class="comment">//参数1，表示要创建的元素</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">$slots</span>.<span class="property">default</span> <span class="comment">//参数3，子节点VNode数组。（这里没有使用参数2，&#123;&#123;tile&#125;&#125;就是一个子元素）</span></span></span><br><span class="line"><span class="language-javascript">          );</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//创建弹出的组件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;message&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//show表示的含义，控制弹出窗口的显示与隐藏。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//slot:表示占坑。也就是窗口中的内容，是通过外部组件传递过来的。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// props: [&quot;show&quot;],</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">show</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">          &#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`&lt;div class=&#x27;message-box&#x27; v-if=&quot;show&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">               &lt;!--具名插槽--&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">               &lt;slot name=&quot;title&quot;&gt;默认标题&lt;/slot&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">              &lt;slot&gt;&lt;/slot&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">              &lt;span class=&quot;message-box-close&quot; @click=&#x27;toggle&#x27;&gt;关闭&lt;/span&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;/div&gt;`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//给总线绑定`message-close`事件</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//也就是监听是否有`message-close`事件被触发。</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&quot;message-close&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// this.$emit(&quot;close&quot;, false);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//当警告窗口和提示信息的窗口，展示出来了才关闭。</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">show</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.<span class="title function_">toggle</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">toggle</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">show</span> = !<span class="variable language_">this</span>.<span class="property">show</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//新增用户组件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;user-add&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// data() &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//   return &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     userInfo: &quot;&quot;,</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//   &#125;;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;,</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>: [<span class="string">&quot;value&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">              &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">               &lt;p&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                  &lt;input type=&quot;text&quot; :value=&quot;value&quot; @input=&quot;onInput&quot; v-on:keydown.enter=&quot;addUser&quot; ref=&quot;inp&quot; /&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">               &lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">               &lt;button @click=&quot;addUser&quot;&gt;新增用户&lt;/button&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">              `</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">addUser</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//将输入的用户数据通知给父组件，来完成新增用户操作.</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// this.$emit(&quot;add-user&quot;, this.userInfo);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.$emit(<span class="string">&quot;add-user&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// this.userInfo = &quot;&quot;;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">onInput</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.$emit(<span class="string">&quot;input&quot;</span>, e.<span class="property">target</span>.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">inp</span>.<span class="title function_">focus</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 用户列表</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;user-list&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">selectItem</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          &#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">users</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="title class_">Array</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">default</span>: [],</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">          &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                  &lt;p v-if=&quot;users.length===0&quot;&gt;没有任何用户数据&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">              &lt;ul v-else&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                  &lt;li</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                  v-for=&quot;(item,index) in users&quot;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                  :key=&quot;item.id&quot;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                  :style=&quot;&#123;backgroundColor:selectItem===item?&#x27;#dddddd&#x27;:&#x27;transparent&#x27;&#125;&quot;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                  @mousemove=&quot;selectItem=item&quot;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                  &gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                  编号：&#123;&#123;item.id&#125;&#125; 姓名:&#123;&#123;item.name&#125;&#125;---身高:&#123;&#123;item.height&#125;&#125;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                  &lt;/li&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">              &lt;/ul&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">          `</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">num</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">totalCount</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">users</span>: [],</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">height</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">userInfo</span>: <span class="string">&quot;abc&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">title</span>: <span class="string">&quot;用户管理&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// isShow: false,</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// showWarn: false, // 控制警告窗口的显示与隐藏</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//组件实例已创建时</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> users = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getUserList</span>();</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">users</span> = users;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//批量更新用户身高</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="title function_">batchUpdate</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//关闭窗口</span></span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">closeWindow</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">isShow</span> = data;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">showWarn</span> = data;</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//添加用户的信息</span></span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">addUser</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">userInfo</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">users</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">push</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                  <span class="attr">id</span>: <span class="variable language_">this</span>.<span class="property">users</span>[<span class="variable language_">this</span>.<span class="property">users</span>.<span class="property">length</span> - <span class="number">1</span>].<span class="property">id</span> + <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                  <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">userInfo</span>,</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">userInfo</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//完成用户添加后，给出相应的提示信息</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// this.isShow = true;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">msgSuccess</span>.<span class="title function_">toggle</span>();</span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">// 显示错误警告信息</span></span></span><br><span class="line"><span class="language-javascript">              <span class="comment">// this.showWarn = true;</span></span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">msgWaring</span>.<span class="title function_">toggle</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//批量更新身高，动态的给users中添加身高属性</span></span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">batchUpdate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">//   c.height = this.height;</span></span></span><br><span class="line"><span class="language-javascript">              <span class="comment">//   Vue.set(c, &quot;height&quot;, this.height);</span></span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.$set(c, <span class="string">&quot;height&quot;</span>, <span class="variable language_">this</span>.<span class="property">height</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">getTotal</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;methods&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">users</span>.<span class="property">length</span> + <span class="string">&quot;个&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">getUserList</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">resolve</span>([</span></span><br><span class="line"><span class="language-javascript">                  &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                  &#125;,</span></span><br><span class="line"><span class="language-javascript">                  &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                  &#125;,</span></span><br><span class="line"><span class="language-javascript">                  &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&quot;老王&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                  &#125;,</span></span><br><span class="line"><span class="language-javascript">                ]);</span></span><br><span class="line"><span class="language-javascript">              &#125;, <span class="number">2000</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">users</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">immediate</span>: <span class="literal">true</span>, <span class="comment">//立即执行</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.<span class="property">totalCount</span> = newValue.<span class="property">length</span> + <span class="string">&quot;个人&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>虚拟 DOM</strong></p><p><code>Vue</code>通过建立一个虚拟 DOM 来追踪自己要如何改变真实<code>DOM</code>.</p><p><strong><code>createElement</code>参数</strong></p><p>前面说过，<code>createElement</code>函数有三个参数。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">createElement</span>(</span><br><span class="line">  <span class="comment">//&#123;string |Object|Function&#125;</span></span><br><span class="line">    <span class="comment">//第一个参数，可以是字符串，也可以是对象或者是函数</span></span><br><span class="line">    ‘div’</span><br><span class="line">    ,</span><br><span class="line">    <span class="comment">// 第二个参数是对象，表示的是一个与模板中属性对应的数据对象。该参数可选</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//第三个参数是一个数组,表示的是子节点数组</span></span><br><span class="line">    [</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面，给<code>heading</code>组件添加第一个属性。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用render函数创建的头部组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heading</span> <span class="attr">level</span>=<span class="string">&quot;1&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span> &#123;&#123;title&#125;&#125; <span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，我们给<code>heading</code>组件动态添加了一个<code>title</code>属性。而我们知道<code>heading</code>组件，最终渲染成的是<code>h1</code>的元素，最终效果为：<code>&lt;h1 title=&#39;aaa&#39;&gt;</code>的形式。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// heading组件</span></span><br><span class="line"><span class="comment">//&lt;heading :level=&quot;1&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/heading&gt; //这时要创建的组件</span></span><br><span class="line"><span class="comment">// &lt;h2 title=&quot;&quot;&gt;&lt;/h2&gt; //这时上面的组件最终渲染的结果</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;heading&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">level</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">title</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">render</span>(<span class="params">h</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(</span><br><span class="line">      <span class="string">&quot;h&quot;</span> + <span class="variable language_">this</span>.<span class="property">level</span>, <span class="comment">//参数1，表示要创建的元素</span></span><br><span class="line">      &#123; <span class="attr">attrs</span>: &#123; <span class="attr">title</span>: <span class="variable language_">this</span>.<span class="property">title</span> &#125; &#125;, <span class="comment">//参数2</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$slots</span>.<span class="property">default</span> <span class="comment">//参数3，子节点VNode数组。（这里没有使用参数2，&#123;&#123;tile&#125;&#125;就是一个子元素）</span></span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们在<code>render</code>函数中给<code>h</code>函数添加了第二个参数，给最终生成的元素添加了<code>attrs</code>属性。</p><h2 id="20、函数式组件"><a href="#20、函数式组件" class="headerlink" title="20、函数式组件"></a>20、函数式组件</h2><p>组件没有管理任何状态，也没有监听任何传递给它的状态，也没有生命周期方法时，可以将组件标记为<code>functional</code>.这意味它无状态（没有响应式数据），也没有实例（没有<code>this</code>上下文）</p><p>因为只是函数，所以渲染的开销相对来说，较小。</p><p>函数化的组件中的 Render 函数，提供了第二个参数 context 作为上下文，data、props、slots、children 以及 parent 都可以通过 context 来访问。</p><p>这块内容简单了解一下就可以。</p><h2 id="21、混入"><a href="#21、混入" class="headerlink" title="21、混入"></a>21、混入</h2><p>混入(<code>mixin</code>)提供了一种非常灵活的方式，来分发<code>Vue</code>组件中的可复用功能，一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项被“混合”进入该组件本身的选项。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个混入对象</span></span><br><span class="line"><span class="keyword">var</span> myMixin = &#123;</span><br><span class="line">  <span class="attr">created</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">hello</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="attr">hello</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;comp&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">mixins</span>: [myMixin],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>“混入”可以提高组件的复用功能，例如：上面所写的<code>hello</code>这个方法，不仅在一个组件中使用，还会</p><p>在其它组件中使用.那么，我们的处理方式就是，可以将<code>hello</code> 这个方法单独定义在一个地方，如果某个组件想要使用，可以直接将该方法注入到组件中。</p><h2 id="22、插件"><a href="#22、插件" class="headerlink" title="22、插件"></a>22、插件</h2><p>前面我们讲解的混入，组件封装等都可以提高组件的复用功能。</p><p>但是这种方式不适合分发，也就是不适合将这些内容上传到<code>github</code>上，<code>npm</code>上。而这种情况最适合通过<code>插件</code>来实现。</p><p>插件通常用来为<code>Vue</code>添加全局功能。插件的功能范围一般有下面几种：</p><ul><li>添加全局方法或者属性。例如：’element’</li><li>添加全局资源</li><li>通过全局混入来添加一些组件选项。例如<code>vue-router</code></li><li>添加<code>vue实例</code>方法，通过把它们添加到<code>Vue.prototype</code>上实现</li><li>一个库，提供自己的<code>API</code>，同时提供上面提到的一个或多个功能，例如<code>vue-router</code></li></ul><p><strong>插件声明</strong></p><p><code>Vue.js </code>的插件应该暴露一个 <code>install</code> 方法。这个方法的第一个参数是 <code>Vue</code> 构造器，第二个参数是一个可选的选项对象：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">MyPlugin</span>.<span class="property">install</span> = <span class="keyword">function</span> (<span class="params">Vue, options</span>) &#123;</span><br><span class="line">  <span class="comment">// 1. 添加全局方法或 property</span></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property">myGlobalMethod</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 逻辑...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 添加全局资源</span></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;my-directive&#x27;</span>, &#123;</span><br><span class="line">    bind (el, binding, vnode, oldVnode) &#123;</span><br><span class="line">      <span class="comment">// 逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 注入组件选项</span></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">    <span class="attr">created</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 添加实例方法</span></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myMethod</span> = <span class="keyword">function</span> (<span class="params">methodOptions</span>) &#123;</span><br><span class="line">    <span class="comment">// 逻辑...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/luozhihao/p/7414419.html">https://www.cnblogs.com/luozhihao/p/7414419.html</a></p><h2 id="23、vue-cli使用"><a href="#23、vue-cli使用" class="headerlink" title="23、vue-cli使用"></a>23、<code>vue-cli</code>使用</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><p>通过使用<code>vue-clie</code>创建项目。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 路由</title>
      <link href="/2022/07/13/Vue/Vue%20Router/vueRouter/"/>
      <url>/2022/07/13/Vue/Vue%20Router/vueRouter/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue Router"></a>Vue Router</h1><h1 id="一、Vue-Router-回顾"><a href="#一、Vue-Router-回顾" class="headerlink" title="一、Vue Router 回顾"></a>一、Vue Router 回顾</h1><h2 id="1、路由简介"><a href="#1、路由简介" class="headerlink" title="1、路由简介"></a>1、路由简介</h2><p>路由是一个比较广义和抽象的概念，路由的本质就是<strong>对应关系</strong>。</p><p>在开发中，路由分为：</p><ul><li>​ 后端路由</li><li>​ 前端路由</li></ul><p><strong>后端路由</strong></p><ul><li>概念：根据不同的用户 URL 请求，返回不同的内容</li><li>本质：URL 请求地址与服务器资源之间的对应关系</li></ul><p><img src="/2022/07/13/Vue/Vue%20Router/vueRouter/%E5%90%8E%E7%AB%AF%E8%B7%AF%E7%94%B1.png"></p><p><strong>SPA（Single Page Application）</strong></p><ul><li>Ajax 前端渲染（前端渲染提高性能，但是不支持浏览器的前进后退操作）</li><li>SPA（Single Page Application）单页面应用程序：整个网站只有一个页面，内 容的变化通过 Ajax 局部更新实现、同时支持浏览器地址栏的前进和后退操作</li><li>SPA 实现原理之一：基于 URL 地址的 hash（hash 的变化会导致浏览器记录访问历 史的变化、但是 hash 的变化不会触发新的 URL 请求</li><li>在实现 SPA 过程中，最核心的技术点就是前端路由</li></ul><p><strong>前端路由</strong></p><ul><li>概念：根据不同的用户事件，显示不同的页面内容</li><li>本质：用户事件与事件处理函数之间的对应关系</li></ul><p><img src="/2022/07/13/Vue/Vue%20Router/vueRouter/%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1.png"></p><h2 id="2、实现简易前端路由"><a href="#2、实现简易前端路由" class="headerlink" title="2、实现简易前端路由"></a>2、实现简易前端路由</h2><p>基于 URL 中的 hash 实现（点击菜单的时候改变 URL 的 hash，根据 hash 的变化控制组件的切换）</p><p><img src="/2022/07/13/Vue/Vue%20Router/vueRouter/%E5%9F%BA%E6%9C%AC%E6%A1%88%E4%BE%8B.png"></p><p>案例代码实现如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入 vue 文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue_2.5.22.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 被 vue 实例控制的 div 区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 切换组件的超链接 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/zhuye&quot;</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/keji&quot;</span>&gt;</span>科技<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/caijing&quot;</span>&gt;</span>财经<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/yule&quot;</span>&gt;</span>娱乐<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 根据 :is 属性指定的组件名称，把对应的组件渲染到 component 标签所在的位置 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 可以把 component 标签当做是【组件的占位符】 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;comName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// #region 定义需要被切换的 4 个组件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 主页组件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> zhuye = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&quot;&lt;h1&gt;主页信息&lt;/h1&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 科技组件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> keji = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&quot;&lt;h1&gt;科技信息&lt;/h1&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 财经组件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> caijing = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&quot;&lt;h1&gt;财经信息&lt;/h1&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 娱乐组件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> yule = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&quot;&lt;h1&gt;娱乐信息&lt;/h1&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// #endregion</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// #region vue 实例对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">comName</span>: <span class="string">&quot;zhuye&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 注册私有组件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          zhuye,</span></span><br><span class="line"><span class="language-javascript">          keji,</span></span><br><span class="line"><span class="language-javascript">          caijing,</span></span><br><span class="line"><span class="language-javascript">          yule,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// #endregion</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 监听 window 的 onhashchange 事件，根据获取到的最新的 hash 值，切换要显示的组件的名称</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="property">onhashchange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 通过 location.hash 获取到最新的 hash 值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">hash</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">switch</span> (location.<span class="property">hash</span>.<span class="title function_">slice</span>(<span class="number">1</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">case</span> <span class="string">&quot;/zhuye&quot;</span>:</span></span><br><span class="line"><span class="language-javascript">            vm.<span class="property">comName</span> = <span class="string">&quot;zhuye&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">case</span> <span class="string">&quot;/keji&quot;</span>:</span></span><br><span class="line"><span class="language-javascript">            vm.<span class="property">comName</span> = <span class="string">&quot;keji&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">case</span> <span class="string">&quot;/caijing&quot;</span>:</span></span><br><span class="line"><span class="language-javascript">            vm.<span class="property">comName</span> = <span class="string">&quot;caijing&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">case</span> <span class="string">&quot;/yule&quot;</span>:</span></span><br><span class="line"><span class="language-javascript">            vm.<span class="property">comName</span> = <span class="string">&quot;yule&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3、vue-router的基本使用"><a href="#3、vue-router的基本使用" class="headerlink" title="3、vue-router的基本使用"></a>3、<code>vue-router</code>的基本使用</h2><p><code>Vue Router</code>（官网：<code>https://router.vuejs.org/zh/</code>）是 <code>Vue.js</code> 官方的路由管理器。 它和<code> Vue.js</code> 的核心深度集成，可以非常方便的用于<code>SPA</code>应用程序的开发。</p><p>基本使用的步骤：</p><ol><li>引入相关的库文件</li><li>添加路由链接</li><li>添加路由填充位</li><li>定义路由组件</li><li>配置路由规则并创建路由实例</li><li>把路由挂载到<code> Vue</code> 根实例中</li></ol><p>下面看一下具体的实施过程</p><ol><li>引入相关的库文件</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 导入 vue 文件，为全局 <span class="variable language_">window</span> 对象挂载 <span class="title class_">Vue</span> 构造函数 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue_2.5.22.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 导入 vue-router 文件，为全局 <span class="variable language_">window</span> 对象挂载 <span class="title class_">VueRouter</span> 构造函数 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue-router_3.0.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>添加路由链接</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- router-link 是 vue 中提供的标签，默认会被渲染为 a 标签 --&gt;</span><br><span class="line">&lt;!-- to 属性默认会被渲染为 href 属性 --&gt;</span><br><span class="line">&lt;!-- to 属性的值默认会被渲染为 # 开头的 hash 地址 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user&quot;</span>&gt;</span>User<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/register&quot;</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="3"><li>添加路由填充位</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 路由填充位（也叫做路由占位符） --&gt;</span><br><span class="line">&lt;!-- 将来通过路由规则匹配到的组件，将会被渲染到 router-view 所在的位置 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="4"><li>定义路由组件</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;User&lt;/div&gt;&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Register</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;Register&lt;/div&gt;&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="5"><li>配置路由规则并创建路由实例</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建路由实例对象</span></span><br><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// routes 是路由规则数组</span></span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    <span class="comment">// 每个路由规则都是一个配置对象，其中至少包含 path 和 component 两个属性：</span></span><br><span class="line">    <span class="comment">// path 表示当前路由规则匹配的 hash 地址</span></span><br><span class="line">    <span class="comment">// component 表示当前路由规则对应要展示的组件</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&quot;/user&quot;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&quot;/register&quot;</span>, <span class="attr">component</span>: <span class="title class_">Register</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="6"><li>把路由挂载到 Vue 根实例中</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="comment">// 为了能够让路由规则生效，必须把路由对象挂载到 vue 实例对象上</span></span><br><span class="line">  router,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>完整代码实现如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入 vue 文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue_2.5.22.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue-router_3.0.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 被 vm 实例所控制的区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user&quot;</span>&gt;</span>User<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/register&quot;</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 路由占位符 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&quot;&lt;h1&gt;User 组件&lt;/h1&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title class_">Register</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&quot;&lt;h1&gt;Register 组件&lt;/h1&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 创建路由实例对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 所有的路由规则</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">routes</span>: [</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">path</span>: <span class="string">&quot;/user&quot;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">path</span>: <span class="string">&quot;/register&quot;</span>, <span class="attr">component</span>: <span class="title class_">Register</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        ],</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 创建 vm 实例对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 指定控制的区域</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 挂载路由实例对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// router: router</span></span></span><br><span class="line"><span class="language-javascript">        router,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4、路由重定向"><a href="#4、路由重定向" class="headerlink" title="4、路由重定向"></a>4、路由重定向</h2><p>路由重定向指的是：用户在访问地址 A 的时候，强制用户跳转到地址 C ，从而展示特定的组件页面；</p><p>通过路由规则的 redirect 属性，指定一个新的路由地址，可以很方便地设置路由的重定向：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    <span class="comment">// 其中，path 表示需要被重定向的原地址，redirect 表示将要被重定向到的新地址</span></span><br><span class="line">    <span class="comment">//当用户在地址栏中输入`/`,会自动的跳转到`/user`,而`/user`对应的组件为User</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>, <span class="attr">redirect</span>: <span class="string">&quot;/user&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&quot;/user&quot;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&quot;/register&quot;</span>, <span class="attr">component</span>: <span class="title class_">Register</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>具体实现的代码如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入 vue 文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue_2.5.22.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue-router_3.0.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 被 vm 实例所控制的区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user&quot;</span>&gt;</span>User<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/register&quot;</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 路由占位符 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&quot;&lt;h1&gt;User 组件&lt;/h1&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title class_">Register</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&quot;&lt;h1&gt;Register 组件&lt;/h1&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 创建路由实例对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 所有的路由规则</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">routes</span>: [</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//路由重定向</span></span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>, <span class="attr">redirect</span>: <span class="string">&quot;/user&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">path</span>: <span class="string">&quot;/user&quot;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">path</span>: <span class="string">&quot;/register&quot;</span>, <span class="attr">component</span>: <span class="title class_">Register</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        ],</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 创建 vm 实例对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 指定控制的区域</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 挂载路由实例对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// router: router</span></span></span><br><span class="line"><span class="language-javascript">        router,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5、嵌套路由"><a href="#5、嵌套路由" class="headerlink" title="5、嵌套路由"></a>5、嵌套路由</h2><p><strong>嵌套路由功能分析</strong></p><p>点击父级路由链接显示模板内容</p><p>模板内容中又有子级路由链接</p><p>点击子级路由链接显示子级模板内容</p><p><img src="/2022/07/13/Vue/Vue%20Router/vueRouter/%E5%B5%8C%E5%A5%97%E8%B7%AF%E7%94%B1.png"></p><p>下面看一下实现的步骤</p><p><strong>父路由组件模板</strong></p><ul><li>父级路由链接</li><li>父组件路由填充位</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt; </span><br><span class="line">      &lt;router-link to=&quot;/user&quot;&gt;User&lt;/router-link&gt; </span><br><span class="line">      &lt;router-link to=&quot;/register&quot;&gt;Register&lt;/router-link&gt; </span><br><span class="line"> &lt;/p&gt;</span><br><span class="line">&lt;div&gt;      </span><br><span class="line">        &lt;!-- 控制组件的显示位置 --&gt;       </span><br><span class="line">        &lt;router-view&gt;&lt;/router-view&gt; </span><br><span class="line">    &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>以上的内容，在前面的课程中已经实现。</p><p><strong>子级路由模板</strong></p><ul><li>子级路由链接</li><li>子级路由填充位</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Register</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;div&gt;    </span></span><br><span class="line"><span class="string">&lt;h1&gt;Register 组件&lt;/h1&gt;     </span></span><br><span class="line"><span class="string">&lt;hr/&gt; </span></span><br><span class="line"><span class="string">      &lt;router-link to=&quot;/register/tab1&quot;&gt;Tab1&lt;/router-link&gt; </span></span><br><span class="line"><span class="string">      &lt;router-link to=&quot;/register/tab2&quot;&gt;Tab2&lt;/router-link&gt;  </span></span><br><span class="line"><span class="string">      &lt;!-- 子路由填充位置 --&gt;       </span></span><br><span class="line"><span class="string">&lt;router-view/&gt; </span></span><br><span class="line"><span class="string">    &lt;/div&gt;`</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>嵌套路由配置</strong></p><p>父级路由通过<code>children</code>属性配置子级路由</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&quot;/user&quot;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/register&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Register</span>,</span><br><span class="line">      <span class="comment">// 通过 children 属性，为 /register 添加子路由规则</span></span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&quot;/register/tab1&quot;</span>, <span class="attr">component</span>: <span class="title class_">Tab1</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&quot;/register/tab2&quot;</span>, <span class="attr">component</span>: <span class="title class_">Tab2</span> &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>具体代码实现如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入 vue 文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue_2.5.22.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue-router_3.0.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 被 vm 实例所控制的区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user&quot;</span>&gt;</span>User<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/register&quot;</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 路由占位符 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const User = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: &quot;<span class="tag">&lt;<span class="name">h1</span>&gt;</span>User 组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      //修改Register组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const Register = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Register 组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="comment">&lt;!-- 子路由链接 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/register/tab1&quot;</span>&gt;</span>tab1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/register/tab2&quot;</span>&gt;</span>tab2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="comment">&lt;!-- 子路由的占位符 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const Tab1 = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: &quot;<span class="tag">&lt;<span class="name">h3</span>&gt;</span>tab1 子组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const Tab2 = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: &quot;<span class="tag">&lt;<span class="name">h3</span>&gt;</span>tab2 子组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      // 创建路由实例对象</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const router = new VueRouter(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        // 所有的路由规则</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        routes: [</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#123; path: &quot;/&quot;, redirect: &quot;/user&quot; &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#123; path: &quot;/user&quot;, component: User &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          // children 数组表示子路由规则</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            path: &quot;/register&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            component: Register,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            children: [</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              &#123; path: &quot;/register/tab1&quot;, component: Tab1 &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              &#123; path: &quot;/register/tab2&quot;, component: Tab2 &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            ],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        ],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      // 创建 vm 实例对象</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        // 指定控制的区域</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        el: &quot;#app&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        // 挂载路由实例对象</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        // router: router</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        router,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6、动态路由匹配"><a href="#6、动态路由匹配" class="headerlink" title="6、动态路由匹配"></a>6、动态路由匹配</h2><h3 id="6-1-动态匹配路由的基本用法"><a href="#6-1-动态匹配路由的基本用法" class="headerlink" title="6.1 动态匹配路由的基本用法"></a>6.1 动态匹配路由的基本用法</h3><p>思考：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;!– 有如下 3 个路由链接 --&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/1&quot;</span>&gt;</span>User1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/2&quot;</span>&gt;</span>User2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/3&quot;</span>&gt;</span>User3<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义如下三个对应的路由规则，是否可行？？？</span></span><br><span class="line">&#123; <span class="attr">path</span>: <span class="string">&#x27;/user/1&#x27;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;</span><br><span class="line">&#123; <span class="attr">path</span>: <span class="string">&#x27;/user/2&#x27;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;</span><br><span class="line">&#123; <span class="attr">path</span>: <span class="string">&#x27;/user/3&#x27;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;</span><br></pre></td></tr></table></figure><p>虽然以上规则可以匹配成功，但是这样写比较麻烦。如果有 100 个规则，那么写起来就会非常的麻烦。</p><p>通过观察，可以发现整个路由规则中只有后续的数字是在变化的。所以这里可以通过动态路由参数的模式进行路由匹配。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    <span class="comment">// 动态路径参数 以冒号开头</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&quot;/user/:id&quot;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="comment">// 路由组件中通过$route.params获取路由参数</span></span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;User &#123;&#123; $route.params.id &#125;&#125;&lt;/div&gt;&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>具体代码实现如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入 vue 文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue_2.5.22.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue-router_3.0.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 被 vm 实例所控制的区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/1&quot;</span>&gt;</span>User1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/2&quot;</span>&gt;</span>User2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/3&quot;</span>&gt;</span>User3<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/register&quot;</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 路由占位符 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&quot;&lt;h1&gt;User 组件 -- 用户id为: &#123;&#123;$route.params.id&#125;&#125;&lt;/h1&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title class_">Register</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&quot;&lt;h1&gt;Register 组件&lt;/h1&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 创建路由实例对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 所有的路由规则</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">routes</span>: [</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>, <span class="attr">redirect</span>: <span class="string">&quot;/user&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">path</span>: <span class="string">&quot;/user/:id&quot;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">path</span>: <span class="string">&quot;/register&quot;</span>, <span class="attr">component</span>: <span class="title class_">Register</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        ],</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 创建 vm 实例对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 指定控制的区域</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 挂载路由实例对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// router: router</span></span></span><br><span class="line"><span class="language-javascript">        router,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-2-路由组件传递参数"><a href="#6-2-路由组件传递参数" class="headerlink" title="6.2 路由组件传递参数"></a>6.2 路由组件传递参数</h3><p><code>$route</code>与对应路由形成高度耦合，不够灵活，所以可以使用<code>props</code>将组件和路由解耦</p><p>第一种情况：</p><p><strong>props 的值为布尔类型</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    <span class="comment">// 如果 props 被设置为 true，route.params 将会被设置为组件属性</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&quot;/user/:id&quot;</span>, <span class="attr">component</span>: <span class="title class_">User</span>, <span class="attr">props</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&quot;id&quot;</span>], <span class="comment">// 使用 props 接收路由参数</span></span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;用户ID：&#123;&#123; id &#125;&#125;&lt;/div&gt;&quot;</span>, <span class="comment">// 使用路由参数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在定义路由规则的时候，为其添加了<code>props</code>属性，并将其值设置为<code>true</code>.那么在组件中就可以通过<code>props:[&#39;id&#39;]</code>的形式来获取对应的参数值。</p><p>具体代码如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入 vue 文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue_2.5.22.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue-router_3.0.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 被 vm 实例所控制的区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/1&quot;</span>&gt;</span>User1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/2&quot;</span>&gt;</span>User2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/3&quot;</span>&gt;</span>User3<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/register&quot;</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 路由占位符 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>: [<span class="string">&quot;id&quot;</span>], <span class="comment">//获取id的值。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&quot;&lt;h1&gt;User 组件 -- 用户id为: &#123;&#123;id&#125;&#125;&lt;/h1&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title class_">Register</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&quot;&lt;h1&gt;Register 组件&lt;/h1&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 创建路由实例对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 所有的路由规则</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">routes</span>: [</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>, <span class="attr">redirect</span>: <span class="string">&quot;/user&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//将props设置为true.</span></span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">path</span>: <span class="string">&quot;/user/:id&quot;</span>, <span class="attr">component</span>: <span class="title class_">User</span>, <span class="attr">props</span>: <span class="literal">true</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">path</span>: <span class="string">&quot;/register&quot;</span>, <span class="attr">component</span>: <span class="title class_">Register</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        ],</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 创建 vm 实例对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 指定控制的区域</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 挂载路由实例对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// router: router</span></span></span><br><span class="line"><span class="language-javascript">        router,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>第二种情况： <code>props</code>的值为对象类型</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        <span class="comment">// 如果 props 是一个对象，它会被按原样设置为组件属性</span></span><br><span class="line">        <span class="comment">//这里相当于给组件User,通过路由的形式传递了一个对象，而这时候id在User组件中就无法获取到了。</span></span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>, <span class="attr">component</span>: <span class="title class_">User</span>, <span class="attr">props</span>: &#123; <span class="attr">uname</span>: <span class="string">&#x27;lisi&#x27;</span>, <span class="attr">age</span>: <span class="number">12</span> &#125;&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">    <span class="attr">props</span>: [<span class="string">&#x27;uname&#x27;</span>, <span class="string">&#x27;age&#x27;</span>],</span><br><span class="line">      <span class="attr">template</span>: ‘&lt;div&gt;用户信息：&#123;&#123; uname + <span class="string">&#x27;---&#x27;</span> + age&#125;&#125;&lt;/div&gt;<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>具体代码实现如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入 vue 文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue_2.5.22.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue-router_3.0.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 被 vm 实例所控制的区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/1&quot;</span>&gt;</span>User1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/2&quot;</span>&gt;</span>User2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/3&quot;</span>&gt;</span>User3<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/register&quot;</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 路由占位符 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>: [<span class="string">&quot;id&quot;</span>, <span class="string">&quot;uname&quot;</span>, <span class="string">&quot;age&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&quot;&lt;h1&gt;User 组件 -- 用户id为: &#123;&#123;id&#125;&#125; -- 姓名为:&#123;&#123;uname&#125;&#125; -- 年龄为：&#123;&#123;age&#125;&#125;&lt;/h1&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title class_">Register</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&quot;&lt;h1&gt;Register 组件&lt;/h1&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 创建路由实例对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 所有的路由规则</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">routes</span>: [</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>, <span class="attr">redirect</span>: <span class="string">&quot;/user&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">path</span>: <span class="string">&quot;/user/:id&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">component</span>: <span class="title class_">User</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">props</span>: &#123; <span class="attr">uname</span>: <span class="string">&quot;lisi&quot;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">path</span>: <span class="string">&quot;/register&quot;</span>, <span class="attr">component</span>: <span class="title class_">Register</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        ],</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 创建 vm 实例对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 指定控制的区域</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 挂载路由实例对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// router: router</span></span></span><br><span class="line"><span class="language-javascript">        router,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，在路由规则中，通过<code>props</code>向用户组件中传递了一个对象，那么在<code>User</code>用户组件中可以接收到传递过来的对象。但是参数<code>id</code>无法接收到。</p><p>如果要解决这个问题，可以使用<code>props</code>的值为函数类型。也就是给<code>props</code>传递一个函数。</p><p><strong>第三种情况：<code>props</code>的值为函数类型</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        <span class="comment">// 如果 props 是一个函数，则这个函数接收 route 对象为自己的形参</span></span><br><span class="line">        <span class="comment">//route就是参数对象。</span></span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">User</span>,</span><br><span class="line">        <span class="attr">props</span>: <span class="function"><span class="params">route</span> =&gt;</span> (&#123; <span class="attr">uname</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">id</span>: route.<span class="property">params</span>.<span class="property">id</span> &#125;)&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">    <span class="attr">props</span>: [<span class="string">&#x27;uname&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;id&#x27;</span>],</span><br><span class="line">      <span class="attr">template</span>: ‘&lt;div&gt;用户信息：&#123;&#123; uname + <span class="string">&#x27;---&#x27;</span> + age + <span class="string">&#x27;---&#x27;</span> + id&#125;&#125;&lt;/div&gt;<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入 vue 文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue_2.5.22.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue-router_3.0.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 被 vm 实例所控制的区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/1&quot;</span>&gt;</span>User1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/2&quot;</span>&gt;</span>User2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/3&quot;</span>&gt;</span>User3<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/register&quot;</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 路由占位符 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>: [<span class="string">&quot;id&quot;</span>, <span class="string">&quot;uname&quot;</span>, <span class="string">&quot;age&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&quot;&lt;h1&gt;User 组件 -- 用户id为: &#123;&#123;id&#125;&#125; -- 姓名为:&#123;&#123;uname&#125;&#125; -- 年龄为：&#123;&#123;age&#125;&#125;&lt;/h1&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title class_">Register</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&quot;&lt;h1&gt;Register 组件&lt;/h1&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 创建路由实例对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 所有的路由规则</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">routes</span>: [</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>, <span class="attr">redirect</span>: <span class="string">&quot;/user&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">path</span>: <span class="string">&quot;/user/:id&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">component</span>: <span class="title class_">User</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">props</span>: <span class="function">(<span class="params">route</span>) =&gt;</span> (&#123; <span class="attr">uname</span>: <span class="string">&quot;zs&quot;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">id</span>: route.<span class="property">params</span>.<span class="property">id</span> &#125;),</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">path</span>: <span class="string">&quot;/register&quot;</span>, <span class="attr">component</span>: <span class="title class_">Register</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        ],</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 创建 vm 实例对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 指定控制的区域</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 挂载路由实例对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// router: router</span></span></span><br><span class="line"><span class="language-javascript">        router,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7、命名路由"><a href="#7、命名路由" class="headerlink" title="7、命名路由"></a>7、命名路由</h2><p>为了更加方便的表示路由的路径，可以给路由规则起一个别名，即为“命名路由”。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/user/:id&quot;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">User</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--单击链接，可以跳转到名称为`user`的这个路由规则，并且通过params进行参数的传递--&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123; name: &#x27;user&#x27;, params: &#123; id: 123 &#125; &#125;&quot;&gt;User&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入 vue 文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue_2.5.22.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue-router_3.0.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 被 vm 实例所控制的区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/1&quot;</span>&gt;</span>User1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/2&quot;</span>&gt;</span>User2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--单击链接，可以跳转到名称为`user`的这个路由规则，并且通过params进行参数的传递,id一定要和路由规则中定义的参数保持一致--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123; name: &#x27;user&#x27;, params: &#123;id: 3&#125; &#125;&quot;</span>&gt;</span>User3<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/register&quot;</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 路由占位符 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>: [<span class="string">&quot;id&quot;</span>, <span class="string">&quot;uname&quot;</span>, <span class="string">&quot;age&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&quot;&lt;h1&gt;User 组件 -- 用户id为: &#123;&#123;id&#125;&#125; -- 姓名为:&#123;&#123;uname&#125;&#125; -- 年龄为：&#123;&#123;age&#125;&#125;&lt;/h1&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title class_">Register</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&quot;&lt;h1&gt;Register 组件&lt;/h1&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 创建路由实例对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 所有的路由规则</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">routes</span>: [</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>, <span class="attr">redirect</span>: <span class="string">&quot;/user&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 命名路由</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&quot;user&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">path</span>: <span class="string">&quot;/user/:id&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">component</span>: <span class="title class_">User</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">props</span>: <span class="function">(<span class="params">route</span>) =&gt;</span> (&#123; <span class="attr">uname</span>: <span class="string">&quot;zs&quot;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">id</span>: route.<span class="property">params</span>.<span class="property">id</span> &#125;),</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">path</span>: <span class="string">&quot;/register&quot;</span>, <span class="attr">component</span>: <span class="title class_">Register</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        ],</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 创建 vm 实例对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 指定控制的区域</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 挂载路由实例对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// router: router</span></span></span><br><span class="line"><span class="language-javascript">        router,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8、编程式导航"><a href="#8、编程式导航" class="headerlink" title="8、编程式导航"></a>8、编程式导航</h2><p><strong>页面导航的两种方式</strong></p><p>声明式导航：通过点击链接实现导航的方式，叫做声明式导航<br>例如：普通网页中的 <code>&lt;a&gt;&lt;/a&gt;</code> 链接 或 vue 中的 <code>&lt;router-link&gt;&lt;/router-link&gt;</code><br>编程式导航：通过调用<code>JavaScript</code>形式的<code>API</code>实现导航的方式，叫做编程式导航<br>例如：普通网页中的 <code>location.href </code></p><p><strong>编程式导航基本用法</strong></p><p>常用的编程式导航 API 如下：</p><p><code>this.$router.push</code>(‘hash 地址’)</p><p><code>this.$router.go(n)</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;&lt;button @click=&quot;goRegister&quot;&gt;跳转到注册页面&lt;/button&gt;&lt;/div&gt;&#x27;</span>,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="attr">goRegister</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 用编程的方式控制路由跳转</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&quot;/register&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>具体吗实现：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;!-- 导入 vue 文件 --&gt;</span><br><span class="line">    &lt;script src=&quot;./lib/vue_2.5.22.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;./lib/vue-router_3.0.2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;!-- 被 vm 实例所控制的区域 --&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">      &lt;router-link to=&quot;/user/1&quot;&gt;User1&lt;/router-link&gt;</span><br><span class="line">      &lt;router-link to=&quot;/user/2&quot;&gt;User2&lt;/router-link&gt;</span><br><span class="line">      &lt;router-link :to=&quot;&#123; name: &#x27;user&#x27;, params: &#123; id: 3 &#125; &#125;&quot;&gt;User3&lt;/router-link&gt;</span><br><span class="line">      &lt;router-link to=&quot;/register&quot;&gt;Register&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 路由占位符 --&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      const User = &#123;</span><br><span class="line">        props: [&quot;id&quot;, &quot;uname&quot;, &quot;age&quot;],</span><br><span class="line">        template: `&lt;div&gt;</span><br><span class="line">          &lt;h1&gt;User 组件 -- 用户id为: &#123;&#123;id&#125;&#125; -- 姓名为:&#123;&#123;uname&#125;&#125; -- 年龄为：&#123;&#123;age&#125;&#125;&lt;/h1&gt;</span><br><span class="line">          &lt;button @click=&quot;goRegister&quot;&gt;跳转到注册页面&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;`,</span><br><span class="line">        methods: &#123;</span><br><span class="line">          goRegister() &#123;</span><br><span class="line">            this.$router.push(&quot;/register&quot;); //编程式导航</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      const Register = &#123;</span><br><span class="line">        template: `&lt;div&gt;</span><br><span class="line">          &lt;h1&gt;Register 组件&lt;/h1&gt;</span><br><span class="line">          &lt;button @click=&quot;goBack&quot;&gt;后退&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;`,</span><br><span class="line">        methods: &#123;</span><br><span class="line">          goBack() &#123;</span><br><span class="line">            this.$router.go(-1);</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      // 创建路由实例对象</span><br><span class="line">      const router = new VueRouter(&#123;</span><br><span class="line">        // 所有的路由规则</span><br><span class="line">        routes: [</span><br><span class="line">          &#123; path: &quot;/&quot;, redirect: &quot;/user&quot; &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            // 命名路由</span><br><span class="line">            name: &quot;user&quot;,</span><br><span class="line">            path: &quot;/user/:id&quot;,</span><br><span class="line">            component: User,</span><br><span class="line">            props: (route) =&gt; (&#123; uname: &quot;zs&quot;, age: 20, id: route.params.id &#125;),</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123; path: &quot;/register&quot;, component: Register &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      // 创建 vm 实例对象</span><br><span class="line">      const vm = new Vue(&#123;</span><br><span class="line">        // 指定控制的区域</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;&#125;,</span><br><span class="line">        // 挂载路由实例对象</span><br><span class="line">        // router: router</span><br><span class="line">        router,</span><br><span class="line">      &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>router.push() 方法的参数规则</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串(路径名称)</span></span><br><span class="line">router.<span class="title function_">push</span>(<span class="string">&quot;/home&quot;</span>);</span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&quot;/home&quot;</span> &#125;);</span><br><span class="line"><span class="comment">// 命名的路由(传递参数)</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;/user&quot;</span>, <span class="attr">params</span>: &#123; <span class="attr">userId</span>: <span class="number">123</span> &#125; &#125;);</span><br><span class="line"><span class="comment">// 带查询参数，变成 /register?uname=lisi</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&quot;/register&quot;</span>, <span class="attr">query</span>: &#123; <span class="attr">uname</span>: <span class="string">&quot;lisi&quot;</span> &#125; &#125;);</span><br></pre></td></tr></table></figure><h2 id="9、路由案例"><a href="#9、路由案例" class="headerlink" title="9、路由案例"></a>9、路由案例</h2><h3 id="9-1-抽离并且渲染App根组件。"><a href="#9-1-抽离并且渲染App根组件。" class="headerlink" title="9.1 抽离并且渲染App根组件。"></a>9.1 抽离并且渲染<code>App</code>根组件。</h3><p>将素材中的代码修改成如下的形式：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>基于vue-router的案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">html</span>,</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span>,</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#app</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.header</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#545c64</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#888</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.main</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">bottom</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">20%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#545c64</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.left</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.btns</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#ecf5ff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid lightskyblue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.main-content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">45px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">45px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#a0a0a0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">td</span>,</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">th</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">th</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const App = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="comment">&lt;!-- 头部区域 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>传智后台管理系统<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="comment">&lt;!-- 中间主体区域 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="comment">&lt;!-- 左侧菜单栏 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content left&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>用户管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>权限管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>商品管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>订单管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>系统设置<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="comment">&lt;!-- 右侧内容区域 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content right&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main-content&quot;</span>&gt;</span>添加用户表单<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="comment">&lt;!-- 尾部区域 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>版权信息<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      //创建路由对象</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const router = new VueRouter(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        routes: [&#123; path: &quot;/&quot;, component: App &#125;],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        el: &quot;#app&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        router,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，我们导入了<code>Vue</code>与<code>Vue-Router</code>的文件。</p><p>然后将核心内容定义到<code>App</code>这个组件中，同时创建了路由对象，并且指定了路由的规则。接下来将路由对象挂载到了<code>Vue</code>的实例中。</p><p>同时在<code>&lt;div id=&#39;app&#39;&gt;&lt;/div&gt;</code>中使用<code>router-view</code>定义了一个占位符。当输入的地址为<code>/</code>,对应的<code>App</code>组件就会在该占位符中进行展示。</p><h3 id="9-2-将菜单改造为路由连接"><a href="#9-2-将菜单改造为路由连接" class="headerlink" title="9.2 将菜单改造为路由连接"></a>9.2 将菜单改造为路由连接</h3><p>将模板中的菜单修改成路由连接的形式，如下所示：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 左侧菜单栏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content left&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/users&quot;</span>&gt;</span> 用户管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/rights&quot;</span>&gt;</span> 权限管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/goods&quot;</span>&gt;</span> 商品管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/orders&quot;</span>&gt;</span> 订单管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/settings&quot;</span>&gt;</span> 系统设置<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-3-创建菜单对应组件"><a href="#9-3-创建菜单对应组件" class="headerlink" title="9.3 创建菜单对应组件"></a>9.3 创建菜单对应组件</h3><p>基本组件创建如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const Users = &#123; template: `</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;h3&gt;用户管理区域&lt;/h3&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">`, &#125;; const Rights = &#123; template: `</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;h3&gt;权限管理区域&lt;/h3&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">`, &#125;; const Goods = &#123; template: `</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;h3&gt;商品管理区域&lt;/h3&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">`, &#125;; const Orders = &#123; template: `</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;h3&gt;订单管理区域&lt;/h3&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">`, &#125;; const Settings = &#123; template: `</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;h3&gt;系统设置区域&lt;/h3&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">`, &#125;;</span><br></pre></td></tr></table></figure><p>我们知道，当单击左侧的菜单时，上面定义的组件将会在右侧进行展示。</p><p>所以需要在右侧，添加一个<code>router-view</code>的占位符。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 右侧内容区域 --&gt;</span><br><span class="line">       &lt;div class=&quot;content right&quot;&gt;&lt;div class=&quot;main-content&quot;&gt; &lt;router-view /&gt;&lt;/div&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="9-4-添加子路由规则并实现路由重定向"><a href="#9-4-添加子路由规则并实现路由重定向" class="headerlink" title="9.4 添加子路由规则并实现路由重定向"></a>9.4 添加子路由规则并实现路由重定向</h3><p>在上一小节中，我们已经将组件都定义好了，下面需要定义其对应的路由规则。</p><p>怎样添加对应的路由规则呢？</p><p>我们知道整个页面是<code>App</code>根组件渲染出来的，而前面定义的组件，都是在<code>App</code>根组件中进行渲染的,也就是作为了<code>App</code>组件的子组件。</p><p>所以，为上一小节中创建的组件添加路由规则，应该是作为<code>App</code>的子路由来进行添加，这样对应的组件才会在<code>App</code>组件中进行渲染。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">App</span>,</span><br><span class="line">      <span class="attr">redirect</span>: <span class="string">&quot;/users&quot;</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&quot;/users&quot;</span>, <span class="attr">component</span>: <span class="title class_">Users</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&quot;/rights&quot;</span>, <span class="attr">component</span>: <span class="title class_">Rights</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&quot;/goods&quot;</span>, <span class="attr">component</span>: <span class="title class_">Goods</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&quot;/orders&quot;</span>, <span class="attr">component</span>: <span class="title class_">Orders</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&quot;/settings&quot;</span>, <span class="attr">component</span>: <span class="title class_">Settings</span> &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当用户在浏览器的地址栏中输入’&#x2F;‘的时候，会渲染<code>App</code>组件，同时会重定向到<code>/users</code>，从而将<code>Users</code>组件渲染出来，而<code>Users</code>组件是在整个<code>App</code>组件的右侧进行渲染展示。</p><p>当点击左侧的菜单时，对应的组件会在右侧进行展示。</p><h3 id="9-5-渲染用户列表数据"><a href="#9-5-渲染用户列表数据" class="headerlink" title="9.5 渲染用户列表数据"></a>9.5 渲染用户列表数据</h3><p>这里将用户组件的内容修改成如下形式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const Users = &#123; data() &#123; return &#123; userlist: [ &#123; id: 1, name: &quot;张三&quot;, age: 10 &#125;,</span><br><span class="line">&#123; id: 2, name: &quot;李四&quot;, age: 20 &#125;, &#123; id: 3, name: &quot;王五&quot;, age: 30 &#125;, &#123; id: 4,</span><br><span class="line">name: &quot;赵六&quot;, age: 40 &#125;, ], &#125;; &#125;, template: `</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;h3&gt;用户管理区域&lt;/h3&gt;</span><br><span class="line">        &lt;table&gt;</span><br><span class="line">          &lt;thead&gt;</span><br><span class="line">            &lt;tr&gt;&lt;th&gt;编号&lt;/th&gt;&lt;th&gt;姓名&lt;/th&gt;&lt;th&gt;年龄&lt;/th&gt;&lt;th&gt;操作&lt;/th&gt;&lt;/tr&gt;</span><br><span class="line">          &lt;/thead&gt;</span><br><span class="line">          &lt;tbody&gt;</span><br><span class="line">            &lt;tr v-for=&quot;item in userlist&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">              &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;/td&gt;</span><br><span class="line">              &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;</span><br><span class="line">              &lt;td&gt;&#123;&#123;item.age&#125;&#125;&lt;/td&gt;</span><br><span class="line">              &lt;td&gt;</span><br><span class="line">                &lt;a href=&quot;javascript:;&quot;&gt;详情&lt;/a&gt;</span><br><span class="line">              &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">          &lt;/tbody&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">`, &#125;;</span><br></pre></td></tr></table></figure><p>在<code>Users</code>组件中定义用户数据，并且在模板中通过循环的方式将数据渲染出来。</p><h3 id="9-6-跳转到详情页"><a href="#9-6-跳转到详情页" class="headerlink" title="9.6 跳转到详情页"></a>9.6 跳转到详情页</h3><p>当单击”详情”链接时，跳转到对应的详情页面。这里需要用到编程式导航的内容。</p><p>首先定义用户详情页组件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用户详情组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UserInfo</span> = &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&quot;id&quot;</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">          &lt;h5&gt;用户详情页 --- 用户Id为：&#123;&#123;id&#125;&#125;&lt;/h5&gt;</span></span><br><span class="line"><span class="string">          &lt;button @click=&quot;goback()&quot;&gt;后退&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;`</span>,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">goback</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 实现后退功能</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>(-<span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在该组件中通过<code>props</code>方式接收传递过来的的用户编号，并且将其打印出来。</p><p>同时在该组件中添加一个后退的按钮，通过编程式导航的方式实现后退。</p><p>对应的路由规则如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">App</span>,</span><br><span class="line">      <span class="attr">redirect</span>: <span class="string">&quot;/users&quot;</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&quot;/users&quot;</span>, <span class="attr">component</span>: <span class="title class_">Users</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&quot;/userinfo/:id&quot;</span>, <span class="attr">component</span>: <span class="title class_">UserInfo</span>, <span class="attr">props</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&quot;/rights&quot;</span>, <span class="attr">component</span>: <span class="title class_">Rights</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&quot;/goods&quot;</span>, <span class="attr">component</span>: <span class="title class_">Goods</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&quot;/orders&quot;</span>, <span class="attr">component</span>: <span class="title class_">Orders</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&quot;/settings&quot;</span>, <span class="attr">component</span>: <span class="title class_">Settings</span> &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当输入的地址为:’&#x2F;userinfo&#x2F;5’的形式是会渲染<code>UserInfo</code>这个组件，同时将<code>props</code>设置为<code>true</code>,表示会传递对应的<code>id</code>值。</p><p><code>UserInfo</code>这个组件也是<code>App</code>组件的子组件，对应的也会在<code>App</code>组件的右侧进行展示。</p><p>同时，在<code>Users</code>组件中，给“详情”链接添加对应的单击事件，</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">const Users = &#123; data() &#123; return &#123; userlist: [ &#123; id: 1, name: &quot;张三&quot;, age: 10 &#125;,</span><br><span class="line">&#123; id: 2, name: &quot;李四&quot;, age: 20 &#125;, &#123; id: 3, name: &quot;王五&quot;, age: 30 &#125;, &#123; id: 4,</span><br><span class="line">name: &quot;赵六&quot;, age: 40 &#125;, ], &#125;; &#125;, methods: &#123; goDetail(id) &#123; console.log(id);</span><br><span class="line">this.$router.push(&quot;/userinfo/&quot; + id); &#125;, &#125;, template: `</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>用户管理区域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;item in userlist&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.age&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;goDetail(item.id)&quot;</span>&gt;</span>详情<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">`, &#125;;</span><br></pre></td></tr></table></figure><p>对应<code>goDetail</code>方法中，通过编程式导航跳转到用户详情页面。</p><p>完整代码案例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>基于vue-router的案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">html</span>,</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span>,</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#app</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.header</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#545c64</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#888</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.main</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">bottom</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">20%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#545c64</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.left</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.btns</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#ecf5ff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid lightskyblue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.main-content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">45px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">45px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#a0a0a0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">td</span>,</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">th</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">th</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const App = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="comment">&lt;!-- 头部区域 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>传智后台管理系统<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="comment">&lt;!-- 中间主体区域 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="comment">&lt;!-- 左侧菜单栏 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content left&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/users&quot;</span>&gt;</span> 用户管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/rights&quot;</span>&gt;</span> 权限管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/goods&quot;</span>&gt;</span> 商品管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/orders&quot;</span>&gt;</span> 订单管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/settings&quot;</span>&gt;</span> 系统设置<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="comment">&lt;!-- 右侧内容区域 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content right&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main-content&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="comment">&lt;!-- 尾部区域 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>版权信息<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const Users = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            userlist: [</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              &#123; id: 1, name: &quot;张三&quot;, age: 10 &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              &#123; id: 2, name: &quot;李四&quot;, age: 20 &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              &#123; id: 3, name: &quot;王五&quot;, age: 30 &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              &#123; id: 4, name: &quot;赵六&quot;, age: 40 &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            ],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        methods: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          goDetail(id) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            console.log(id);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            this.$router.push(&quot;/userinfo/&quot; + id);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>用户管理区域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;item in userlist&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item.id</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item.name</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item.age</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;goDetail(item.id)&quot;</span>&gt;</span>详情<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      //用户详情组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const UserInfo = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        props: [&quot;id&quot;],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">h5</span>&gt;</span>用户详情页 --- 用户Id为：</span><span class="template-variable">&#123;&#123;<span class="name">id</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;goback()&quot;</span>&gt;</span>后退<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        methods: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          goback() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            // 实现后退功能</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            this.$router.go(-1);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const Rights = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>权限管理区域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const Goods = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>商品管理区域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const Orders = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>订单管理区域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const Settings = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>系统设置区域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      // 创建路由对象</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const router = new VueRouter(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        routes: [</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            path: &quot;/&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            component: App,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            redirect: &quot;/users&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            children: [</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              &#123; path: &quot;/users&quot;, component: Users &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              &#123; path: &quot;/userinfo/:id&quot;, component: UserInfo, props: true &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              &#123; path: &quot;/rights&quot;, component: Rights &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              &#123; path: &quot;/goods&quot;, component: Goods &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              &#123; path: &quot;/orders&quot;, component: Orders &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              &#123; path: &quot;/settings&quot;, component: Settings &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            ],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        ],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        el: &quot;#app&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        router,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="10、路由守卫"><a href="#10、路由守卫" class="headerlink" title="10、路由守卫"></a>10、路由守卫</h2><p><code>Vue-router</code>中的路由守卫，主要是对其内容进行保护，如果没有对应的权限，则不允许访问。</p><p>我们首先来看一下全局守卫，也就是所有的路由都会经过全局守卫来进行检测。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现全局守卫</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//to:去哪个页面，from来自哪个页面，next继续执行.</span></span><br><span class="line">  <span class="comment">//判断哪个路由需要进行守卫，这里可以通过元数据方式</span></span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">auth</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">isLogin</span>) &#123;</span><br><span class="line">      <span class="title function_">next</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&quot;/login?redirect=&quot;</span> + to.<span class="property">fullPath</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在上面的代码中，创建了路由守卫，但是需要判断的是需要对哪个路由进行守卫，这里就是通过元数据来进行判断的。如果所跳转到的路由有元数据，并且对应的<code>auth</code>属性为<code>true</code>表明是需要进行守卫的，那么下面就需要校验用户是否登录,这里是通过判断否<code>window.isLogin</code>的值是否为<code>true</code>来进行判断的（这里简化了操作,实际应用中应该存储到<code>sessionStorage</code>），如果条件成立则表明用户登录，就继续访问用户希望访问到的页面，否则跳转到登录页面，而且将用户希望访问的页面地址也传递到了登录页面，这样用户登录成功后，可以直接跳转到要访问的页面。</p><p>如果没有元数据，则继续访问用户要访问的页面。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&quot;/login&quot;</span>, <span class="attr">component</span>: <span class="title class_">Login</span> &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">App</span>,</span><br><span class="line">      <span class="attr">redirect</span>: <span class="string">&quot;/users&quot;</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&quot;/users&quot;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="title class_">Users</span>,</span><br><span class="line">          <span class="attr">meta</span>: &#123;</span><br><span class="line">            <span class="attr">auth</span>: <span class="literal">true</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&quot;/userinfo/:id&quot;</span>, <span class="attr">component</span>: <span class="title class_">UserInfo</span>, <span class="attr">props</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&quot;/rights&quot;</span>, <span class="attr">component</span>: <span class="title class_">Rights</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&quot;/goods&quot;</span>, <span class="attr">component</span>: <span class="title class_">Goods</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&quot;/orders&quot;</span>, <span class="attr">component</span>: <span class="title class_">Orders</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&quot;/settings&quot;</span>, <span class="attr">component</span>: <span class="title class_">Settings</span> &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在上面的代码中，给<code>/users</code>路由添加了元数据。</p><p>登录组件创建如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const Login = &#123; data() &#123; return &#123; isLogin: window.isLogin, &#125;; &#125;, template: `</span><br><span class="line">&lt;div&gt;</span><br><span class="line">          &lt;button @click=&quot;login&quot; v-if=&quot;!isLogin&quot;&gt;登录&lt;/button&gt;</span><br><span class="line">          &lt;button @click=&quot;logout&quot; v-else&gt;注销&lt;/button&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">`, methods: &#123; login() &#123; window.isLogin = true;</span><br><span class="line">this.$router.push(this.$route.query.redirect); &#125;, logout() &#123; this.isLogin =</span><br><span class="line">window.isLogin = false; &#125;, &#125;, &#125;;</span><br></pre></td></tr></table></figure><p>当单击登录按钮后，进行将<code>window.isLogin</code>设置为<code>true</code>, 并且进行跳转。</p><p>全部代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;title&gt;基于vue-router的案例&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;./lib/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">      html,</span><br><span class="line">      body,</span><br><span class="line">      #app &#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0px;</span><br><span class="line">        height: 100%;</span><br><span class="line">      &#125;</span><br><span class="line">      .header &#123;</span><br><span class="line">        height: 50px;</span><br><span class="line">        background-color: #545c64;</span><br><span class="line">        line-height: 50px;</span><br><span class="line">        text-align: center;</span><br><span class="line">        font-size: 24px;</span><br><span class="line">        color: #fff;</span><br><span class="line">      &#125;</span><br><span class="line">      .footer &#123;</span><br><span class="line">        height: 40px;</span><br><span class="line">        line-height: 40px;</span><br><span class="line">        background-color: #888;</span><br><span class="line">        position: absolute;</span><br><span class="line">        bottom: 0;</span><br><span class="line">        width: 100%;</span><br><span class="line">        text-align: center;</span><br><span class="line">        color: #fff;</span><br><span class="line">      &#125;</span><br><span class="line">      .main &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        position: absolute;</span><br><span class="line">        top: 50px;</span><br><span class="line">        bottom: 40px;</span><br><span class="line">        width: 100%;</span><br><span class="line">      &#125;</span><br><span class="line">      .content &#123;</span><br><span class="line">        flex: 1;</span><br><span class="line">        text-align: center;</span><br><span class="line">        height: 100%;</span><br><span class="line">      &#125;</span><br><span class="line">      .left &#123;</span><br><span class="line">        flex: 0 0 20%;</span><br><span class="line">        background-color: #545c64;</span><br><span class="line">      &#125;</span><br><span class="line">      .left a &#123;</span><br><span class="line">        color: white;</span><br><span class="line">        text-decoration: none;</span><br><span class="line">      &#125;</span><br><span class="line">      .right &#123;</span><br><span class="line">        margin: 5px;</span><br><span class="line">      &#125;</span><br><span class="line">      .btns &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 35px;</span><br><span class="line">        line-height: 35px;</span><br><span class="line">        background-color: #f5f5f5;</span><br><span class="line">        text-align: left;</span><br><span class="line">        padding-left: 10px;</span><br><span class="line">        box-sizing: border-box;</span><br><span class="line">      &#125;</span><br><span class="line">      button &#123;</span><br><span class="line">        height: 30px;</span><br><span class="line">        background-color: #ecf5ff;</span><br><span class="line">        border: 1px solid lightskyblue;</span><br><span class="line">        font-size: 12px;</span><br><span class="line">        padding: 0 20px;</span><br><span class="line">      &#125;</span><br><span class="line">      .main-content &#123;</span><br><span class="line">        margin-top: 10px;</span><br><span class="line">      &#125;</span><br><span class="line">      ul &#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">        list-style: none;</span><br><span class="line">      &#125;</span><br><span class="line">      ul li &#123;</span><br><span class="line">        height: 45px;</span><br><span class="line">        line-height: 45px;</span><br><span class="line">        background-color: #a0a0a0;</span><br><span class="line">        color: #fff;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">        border-bottom: 1px solid #fff;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      table &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        border-collapse: collapse;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      td,</span><br><span class="line">      th &#123;</span><br><span class="line">        border: 1px solid #eee;</span><br><span class="line">        line-height: 35px;</span><br><span class="line">        font-size: 12px;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      th &#123;</span><br><span class="line">        background-color: #ddd;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;&lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      const App = &#123;</span><br><span class="line">        template: `&lt;div&gt;</span><br><span class="line">      &lt;!-- 头部区域 --&gt;</span><br><span class="line">      &lt;header class=&quot;header&quot;&gt;传智后台管理系统&lt;/header&gt;</span><br><span class="line">      &lt;!-- 中间主体区域 --&gt;</span><br><span class="line">      &lt;div class=&quot;main&quot;&gt;</span><br><span class="line">        &lt;!-- 左侧菜单栏 --&gt;</span><br><span class="line">        &lt;div class=&quot;content left&quot;&gt;</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;&lt;router-link to=&quot;/users&quot;&gt; 用户管理&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;router-link to=&quot;/rights&quot;&gt; 权限管理&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;router-link to=&quot;/goods&quot;&gt; 商品管理&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;router-link to=&quot;/orders&quot;&gt; 订单管理&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;router-link to=&quot;/settings&quot;&gt; 系统设置&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">          &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 右侧内容区域 --&gt;</span><br><span class="line">        &lt;div class=&quot;content right&quot;&gt;&lt;div class=&quot;main-content&quot;&gt; &lt;router-view /&gt;&lt;/div&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!-- 尾部区域 --&gt;</span><br><span class="line">      &lt;footer class=&quot;footer&quot;&gt;版权信息&lt;/footer&gt;</span><br><span class="line">    &lt;/div&gt;`,</span><br><span class="line">      &#125;;</span><br><span class="line">      const Users = &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">          return &#123;</span><br><span class="line">            userlist: [</span><br><span class="line">              &#123; id: 1, name: &quot;张三&quot;, age: 10 &#125;,</span><br><span class="line">              &#123; id: 2, name: &quot;李四&quot;, age: 20 &#125;,</span><br><span class="line">              &#123; id: 3, name: &quot;王五&quot;, age: 30 &#125;,</span><br><span class="line">              &#123; id: 4, name: &quot;赵六&quot;, age: 40 &#125;,</span><br><span class="line">            ],</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">          goDetail(id) &#123;</span><br><span class="line">            console.log(id);</span><br><span class="line">            this.$router.push(&quot;/userinfo/&quot; + id);</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        template: `&lt;div&gt;</span><br><span class="line">        &lt;h3&gt;用户管理区域&lt;/h3&gt;</span><br><span class="line">        &lt;table&gt;</span><br><span class="line">          &lt;thead&gt;</span><br><span class="line">            &lt;tr&gt;&lt;th&gt;编号&lt;/th&gt;&lt;th&gt;姓名&lt;/th&gt;&lt;th&gt;年龄&lt;/th&gt;&lt;th&gt;操作&lt;/th&gt;&lt;/tr&gt;</span><br><span class="line">          &lt;/thead&gt;</span><br><span class="line">          &lt;tbody&gt;</span><br><span class="line">            &lt;tr v-for=&quot;item in userlist&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">              &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;/td&gt;</span><br><span class="line">              &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;</span><br><span class="line">              &lt;td&gt;&#123;&#123;item.age&#125;&#125;&lt;/td&gt;</span><br><span class="line">              &lt;td&gt;</span><br><span class="line">                &lt;a href=&quot;javascript:;&quot; @click=&quot;goDetail(item.id)&quot;&gt;详情&lt;/a&gt;</span><br><span class="line">              &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">          &lt;/tbody&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">      &lt;/div&gt;`,</span><br><span class="line">      &#125;;</span><br><span class="line">      //用户详情组件</span><br><span class="line">      const UserInfo = &#123;</span><br><span class="line">        props: [&quot;id&quot;],</span><br><span class="line">        template: `&lt;div&gt;</span><br><span class="line">          &lt;h5&gt;用户详情页 --- 用户Id为：&#123;&#123;id&#125;&#125;&lt;/h5&gt;</span><br><span class="line">          &lt;button @click=&quot;goback()&quot;&gt;后退&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;`,</span><br><span class="line">        methods: &#123;</span><br><span class="line">          goback() &#123;</span><br><span class="line">            // 实现后退功能</span><br><span class="line">            this.$router.go(-1);</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      const Rights = &#123;</span><br><span class="line">        template: `&lt;div&gt;</span><br><span class="line">        &lt;h3&gt;权限管理区域&lt;/h3&gt;</span><br><span class="line">      &lt;/div&gt;`,</span><br><span class="line">      &#125;;</span><br><span class="line">      const Goods = &#123;</span><br><span class="line">        template: `&lt;div&gt;</span><br><span class="line">        &lt;h3&gt;商品管理区域&lt;/h3&gt;</span><br><span class="line">      &lt;/div&gt;`,</span><br><span class="line">      &#125;;</span><br><span class="line">      const Orders = &#123;</span><br><span class="line">        template: `&lt;div&gt;</span><br><span class="line">        &lt;h3&gt;订单管理区域&lt;/h3&gt;</span><br><span class="line">      &lt;/div&gt;`,</span><br><span class="line">      &#125;;</span><br><span class="line">      const Settings = &#123;</span><br><span class="line">        template: `&lt;div&gt;</span><br><span class="line">        &lt;h3&gt;系统设置区域&lt;/h3&gt;</span><br><span class="line">      &lt;/div&gt;`,</span><br><span class="line">      &#125;;</span><br><span class="line">      const Login = &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">          return &#123;</span><br><span class="line">            isLogin: window.isLogin,</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        template: `&lt;div&gt;</span><br><span class="line">          &lt;button @click=&quot;login&quot; v-if=&quot;!isLogin&quot;&gt;登录&lt;/button&gt;</span><br><span class="line">          &lt;button @click=&quot;logout&quot; v-else&gt;注销&lt;/button&gt;</span><br><span class="line">          &lt;/div&gt;`,</span><br><span class="line">        methods: &#123;</span><br><span class="line">          login() &#123;</span><br><span class="line">            window.isLogin = true;</span><br><span class="line">            this.$router.push(this.$route.query.redirect);</span><br><span class="line">          &#125;,</span><br><span class="line">          logout() &#123;</span><br><span class="line">            this.isLogin = window.isLogin = false;</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      // 创建路由对象</span><br><span class="line">      const router = new VueRouter(&#123;</span><br><span class="line">        routes: [</span><br><span class="line">          &#123; path: &quot;/login&quot;, component: Login &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            path: &quot;/&quot;,</span><br><span class="line">            component: App,</span><br><span class="line">            redirect: &quot;/users&quot;,</span><br><span class="line">            children: [</span><br><span class="line">              &#123;</span><br><span class="line">                path: &quot;/users&quot;,</span><br><span class="line">                component: Users,</span><br><span class="line">                meta: &#123;</span><br><span class="line">                  auth: true,</span><br><span class="line">                &#125;,</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123; path: &quot;/userinfo/:id&quot;, component: UserInfo, props: true &#125;,</span><br><span class="line">              &#123; path: &quot;/rights&quot;, component: Rights &#125;,</span><br><span class="line">              &#123; path: &quot;/goods&quot;, component: Goods &#125;,</span><br><span class="line">              &#123; path: &quot;/orders&quot;, component: Orders &#125;,</span><br><span class="line">              &#123; path: &quot;/settings&quot;, component: Settings &#125;,</span><br><span class="line">            ],</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;);</span><br><span class="line">      //实现全局守卫</span><br><span class="line">      router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line">        //to:去哪个页面，from来自哪个页面，next继续执行.</span><br><span class="line">        //判断哪个路由需要进行守卫，这里可以通过元数据方式</span><br><span class="line">        if (to.meta.auth) &#123;</span><br><span class="line">          if (window.isLogin) &#123;</span><br><span class="line">            next();</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            next(&quot;/login?redirect=&quot; + to.fullPath);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          next();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      const vm = new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        router,</span><br><span class="line">      &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>以上是全局守卫，对所有的路由都起作用。</p><p>但是，如果项目比较简单，路由规则定义的比较少，可以将守卫定位到某个路由规则内。这就是<strong>路由独享守卫</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&quot;/login&quot;</span>, <span class="attr">component</span>: <span class="title class_">Login</span> &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">App</span>,</span><br><span class="line">      <span class="attr">redirect</span>: <span class="string">&quot;/users&quot;</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&quot;/users&quot;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="title class_">Users</span>,</span><br><span class="line">          <span class="attr">meta</span>: &#123;</span><br><span class="line">            <span class="attr">auth</span>: <span class="literal">true</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="title function_">beforeEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">isLogin</span>) &#123;</span><br><span class="line">              <span class="title function_">next</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="title function_">next</span>(<span class="string">&quot;/login?redirect=&quot;</span> + to.<span class="property">fullPath</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&quot;/userinfo/:id&quot;</span>, <span class="attr">component</span>: <span class="title class_">UserInfo</span>, <span class="attr">props</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&quot;/rights&quot;</span>, <span class="attr">component</span>: <span class="title class_">Rights</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&quot;/goods&quot;</span>, <span class="attr">component</span>: <span class="title class_">Goods</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&quot;/orders&quot;</span>, <span class="attr">component</span>: <span class="title class_">Orders</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&quot;/settings&quot;</span>, <span class="attr">component</span>: <span class="title class_">Settings</span> &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在上面的代码中，给<code>/users</code>这个路由守卫，注意这里的方法名为<code>beforeEnter</code>.同时，这里将守卫定义在<code>/users</code>路由规则内，所以不需要对元数据进行判断，只需要判断用户是否登录就可以了。（注意：在进行以上测试时，需要将全局守卫的代码注释掉）</p><p><strong>组件内守卫</strong></p><p>可以在路由组件内直接定义以下路由导航守卫。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">beforeRouteEnter</span><br><span class="line">beforeRouteUpdate</span><br><span class="line">beforeRouteLeave</span><br></pre></td></tr></table></figure><p>将如下的代码直接添加到组件内。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Users</span> = &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">userlist</span>: [</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">10</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;王五&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&quot;赵六&quot;</span>, <span class="attr">age</span>: <span class="number">40</span> &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">goDetail</span>(<span class="params">id</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(id);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&quot;/userinfo/&quot;</span> + id);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">          &lt;h3&gt;用户管理区域&lt;/h3&gt;</span></span><br><span class="line"><span class="string">          &lt;table&gt;</span></span><br><span class="line"><span class="string">            &lt;thead&gt;</span></span><br><span class="line"><span class="string">              &lt;tr&gt;&lt;th&gt;编号&lt;/th&gt;&lt;th&gt;姓名&lt;/th&gt;&lt;th&gt;年龄&lt;/th&gt;&lt;th&gt;操作&lt;/th&gt;&lt;/tr&gt;</span></span><br><span class="line"><span class="string">            &lt;/thead&gt;</span></span><br><span class="line"><span class="string">            &lt;tbody&gt;</span></span><br><span class="line"><span class="string">              &lt;tr v-for=&quot;item in userlist&quot; :key=&quot;item.id&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">                &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">                &lt;td&gt;&#123;&#123;item.age&#125;&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">                &lt;td&gt;</span></span><br><span class="line"><span class="string">                  &lt;a href=&quot;javascript:;&quot; @click=&quot;goDetail(item.id)&quot;&gt;详情&lt;/a&gt;</span></span><br><span class="line"><span class="string">                &lt;/td&gt;</span></span><br><span class="line"><span class="string">              &lt;/tr&gt;</span></span><br><span class="line"><span class="string">            &lt;/tbody&gt;</span></span><br><span class="line"><span class="string">          &lt;/table&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;`</span>,</span><br><span class="line">  <span class="title function_">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">isLogin</span>) &#123;</span><br><span class="line">      <span class="title function_">next</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&quot;/login?redirect=&quot;</span> + to.<span class="property">fullPath</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在上面的代码中，直接将路由守卫对应的方法添加到了组件中。</p><p>注意：在测试之前将路由规则中定义的路由守卫的代码注释掉。</p><h2 id="11、addRoutes-动态路由添加"><a href="#11、addRoutes-动态路由添加" class="headerlink" title="11、addRoutes 动态路由添加"></a>11、addRoutes 动态路由添加</h2><p>在前面的案例中，我们都是将路由定义好，然后通过路由守卫来判断，某个用户是否登录，从而决定能否访问某个路由规则对应的组件内容。</p><p>但是，如果某些路由规则只能用户登录以后才能够访问，那么我们也可以不用提前定义好，而是在登录后，通过<code>addRoutes</code>方法为其动态的添加。</p><p>首先这里需要，还需要全局的路由守卫来进行校验判断，只不过这里全局路由守卫的逻辑发生了变化。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//to:去哪个页面，from来自哪个页面，next继续执行.</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">isLogin</span>) &#123;</span><br><span class="line">    <span class="comment">//用户已经登录</span></span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&quot;/login&quot;</span>) &#123;</span><br><span class="line">      <span class="comment">// 用户已经登录了，但是又访问登录页面，这里直接跳转到用户列表页面</span></span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//用户已经登录，并且访问其它页面，则运行访问</span></span><br><span class="line">      <span class="title function_">next</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//用户没有登录,并且访问的就是登录页，则运行访问登录页</span></span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&quot;/login&quot;</span>) &#123;</span><br><span class="line">      <span class="title function_">next</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//用户没有登录，访问其它页面，则跳转到登录页面。</span></span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&quot;/login?redirect=&quot;</span> + to.<span class="property">fullPath</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>下面对登录组件进行修改</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const Login = &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">          return &#123;</span><br><span class="line">            isLogin: window.isLogin,</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        template: `&lt;div&gt;</span><br><span class="line">            &lt;button @click=&quot;login&quot; v-if=&quot;!isLogin&quot;&gt;登录&lt;/button&gt;</span><br><span class="line">            &lt;button @click=&quot;logout&quot; v-else&gt;注销&lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;`,</span><br><span class="line">        methods: &#123;</span><br><span class="line">          login() &#123;</span><br><span class="line">            window.isLogin = true;</span><br><span class="line">            if (this.$route.query.redirect) &#123;</span><br><span class="line">              //动态添加路由：</span><br><span class="line">              this.$router.addRoutes([</span><br><span class="line">                &#123;</span><br><span class="line">                  path: &quot;/&quot;,</span><br><span class="line">                  component: App,</span><br><span class="line">                  redirect: &quot;/users&quot;,</span><br><span class="line">                  children: [</span><br><span class="line">                    &#123;</span><br><span class="line">                      path: &quot;/users&quot;,</span><br><span class="line">                      component: Users,</span><br><span class="line">                      meta: &#123;</span><br><span class="line">                        auth: true,</span><br><span class="line">                      &#125;,</span><br><span class="line">                      // beforeEnter(to, from, next) &#123;</span><br><span class="line">                      //   if (window.isLogin) &#123;</span><br><span class="line">                      //     next();</span><br><span class="line">                      //   &#125; else &#123;</span><br><span class="line">                      //     next(&quot;/login?redirect=&quot; + to.fullPath);</span><br><span class="line">                      //   &#125;</span><br><span class="line">                      // &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123; path: &quot;/userinfo/:id&quot;, component: UserInfo, props: true &#125;,</span><br><span class="line">                    &#123; path: &quot;/rights&quot;, component: Rights &#125;,</span><br><span class="line">                    &#123; path: &quot;/goods&quot;, component: Goods &#125;,</span><br><span class="line">                    &#123; path: &quot;/orders&quot;, component: Orders &#125;,</span><br><span class="line">                    &#123; path: &quot;/settings&quot;, component: Settings &#125;,</span><br><span class="line">                  ],</span><br><span class="line">                &#125;,</span><br><span class="line">              ]);</span><br><span class="line">              this.$router.push(this.$route.query.redirect);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">              this.$router.push(&quot;/&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          logout() &#123;</span><br><span class="line">            this.isLogin = window.isLogin = false;</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br></pre></td></tr></table></figure><p>在登录成功后，通过<code>addRoutes</code>方法动态的添加路由规则，也就是所添加的路由规则只能是在登录以后才能够访问，所以全局守卫的判断条件发生了变化，不在判断是否有元数据，而只是判断是否登录。如果登录了，想访问上面的路由规则，则运行访问，如果没有登录则不允许访问。</p><p>注意：对应的原有的路由规则应该注释掉。</p><p>完整代码如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>基于vue-router的案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">html</span>,</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span>,</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#app</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.header</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#545c64</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#888</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.main</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">bottom</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">20%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#545c64</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.left</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.btns</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#ecf5ff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid lightskyblue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.main-content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">45px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">45px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#a0a0a0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">td</span>,</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">th</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">th</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const App = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="comment">&lt;!-- 头部区域 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>传智后台管理系统<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="comment">&lt;!-- 中间主体区域 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="comment">&lt;!-- 左侧菜单栏 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content left&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/users&quot;</span>&gt;</span> 用户管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/rights&quot;</span>&gt;</span> 权限管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/goods&quot;</span>&gt;</span> 商品管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/orders&quot;</span>&gt;</span> 订单管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/settings&quot;</span>&gt;</span> 系统设置<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="comment">&lt;!-- 右侧内容区域 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content right&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main-content&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="comment">&lt;!-- 尾部区域 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>版权信息<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const Users = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            userlist: [</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              &#123; id: 1, name: &quot;张三&quot;, age: 10 &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              &#123; id: 2, name: &quot;李四&quot;, age: 20 &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              &#123; id: 3, name: &quot;王五&quot;, age: 30 &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              &#123; id: 4, name: &quot;赵六&quot;, age: 40 &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            ],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        methods: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          goDetail(id) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            console.log(id);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            this.$router.push(&quot;/userinfo/&quot; + id);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">h3</span>&gt;</span>用户管理区域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">table</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;item in userlist&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item.id</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item.name</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item.age</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;goDetail(item.id)&quot;</span>&gt;</span>详情<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        // beforeRouteEnter(to, from, next) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        //   if (window.isLogin) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        //     next();</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        //   &#125; else &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        //     next(&quot;/login?redirect=&quot; + to.fullPath);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        //   &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        // &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      //用户详情组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const UserInfo = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        props: [&quot;id&quot;],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">h5</span>&gt;</span>用户详情页 --- 用户Id为：</span><span class="template-variable">&#123;&#123;<span class="name">id</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;goback()&quot;</span>&gt;</span>后退<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        methods: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          goback() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            // 实现后退功能</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            this.$router.go(-1);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const Rights = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">h3</span>&gt;</span>权限管理区域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const Goods = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">h3</span>&gt;</span>商品管理区域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const Orders = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">h3</span>&gt;</span>订单管理区域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const Settings = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">h3</span>&gt;</span>系统设置区域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const Login = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            isLogin: window.isLogin,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;login&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;!isLogin&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;logout&quot;</span> <span class="attr">v-else</span>&gt;</span>注销<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        methods: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          login() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            window.isLogin = true;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            if (this.$route.query.redirect) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              //动态添加路由：</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              this.$router.addRoutes([</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                  path: &quot;/&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                  component: App,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                  redirect: &quot;/users&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                  children: [</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                      path: &quot;/users&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                      component: Users,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                      meta: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        auth: true,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                      &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                      // beforeEnter(to, from, next) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                      //   if (window.isLogin) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                      //     next();</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                      //   &#125; else &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                      //     next(&quot;/login?redirect=&quot; + to.fullPath);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                      //   &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                      // &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    &#123; path: &quot;/userinfo/:id&quot;, component: UserInfo, props: true &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    &#123; path: &quot;/rights&quot;, component: Rights &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    &#123; path: &quot;/goods&quot;, component: Goods &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    &#123; path: &quot;/orders&quot;, component: Orders &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    &#123; path: &quot;/settings&quot;, component: Settings &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                  ],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              ]);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              this.$router.push(this.$route.query.redirect);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125; else &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              this.$router.push(&quot;/&quot;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          logout() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            this.isLogin = window.isLogin = false;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      // 创建路由对象</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const router = new VueRouter(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        routes: [</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#123; path: &quot;/login&quot;, component: Login &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          // &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          //   path: &quot;/&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          //   component: App,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          //   redirect: &quot;/users&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          //   children: [</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          //     &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          //       path: &quot;/users&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          //       component: Users,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          //       meta: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          //         auth: true,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          //       &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          //       // beforeEnter(to, from, next) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          //       //   if (window.isLogin) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          //       //     next();</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          //       //   &#125; else &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          //       //     next(&quot;/login?redirect=&quot; + to.fullPath);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          //       //   &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          //       // &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          //     &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          //     &#123; path: &quot;/userinfo/:id&quot;, component: UserInfo, props: true &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          //     &#123; path: &quot;/rights&quot;, component: Rights &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          //     &#123; path: &quot;/goods&quot;, component: Goods &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          //     &#123; path: &quot;/orders&quot;, component: Orders &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          //     &#123; path: &quot;/settings&quot;, component: Settings &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          //   ],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          // &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        ],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      //实现全局守卫</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      // router.beforeEach((to, from, next) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      //   //to:去哪个页面，from来自哪个页面，next继续执行.</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      //   //判断哪个路由需要进行守卫，这里可以通过元数据方式</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      //   if (to.meta.auth) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      //     if (window.isLogin) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      //       next();</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      //     &#125; else &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      //       next(&quot;/login?redirect=&quot; + to.fullPath);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      //     &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      //   &#125; else &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      //     next();</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      //   &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      // &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      router.beforeEach((to, from, next) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        //to:去哪个页面，from来自哪个页面，next继续执行.</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        if (window.isLogin) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          //用户已经登录</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          if (to.path === &quot;/login&quot;) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            // 用户已经登录了，但是又访问登录页面，这里直接跳转到用户列表页面</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            next(&quot;/&quot;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#125; else &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            //用户已经登录，并且访问其它页面，则运行访问</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            next();</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125; else &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          //用户没有登录,并且访问的就是登录页，则运行访问登录页</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          if (to.path === &quot;/login&quot;) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            next();</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#125; else &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            //用户没有登录，访问其它页面，则跳转到登录页面。</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            next(&quot;/login?redirect=&quot; + to.fullPath);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        el: &quot;#app&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        router,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="12、路由组件缓存"><a href="#12、路由组件缓存" class="headerlink" title="12、路由组件缓存"></a>12、路由组件缓存</h2><p>利用<code>keepalive</code>做组件缓存，保留组件状态，提高执行效率。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;keep-alive include=&quot;home&quot;&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure><p>使用<code>include</code>或者<code>exclude</code>时要给组件设置<code>name</code>（这个是组件的名称，组件的名称通过给组件添加<code>name</code>属性来进行设置）</p><p>当我们进行路由切换的时候，对应的组件会被重新创建，同时数据也会不断的重新加载。</p><p>如果数据没有变化，就没有必要每次都重新发送异步请求加载数据</p><p>现在，在<code>App</code>组件中添加<code>keep-alive</code></p><p>因为切换的组件都是在该<code>router-view</code>中进行展示。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 右侧内容区域 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content right&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main-content&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面可以进行验证。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Rights</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">          &lt;h3&gt;权限管理区域&lt;/h3&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;`</span>,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在<code>Rights</code>组件中，添加了<code>created</code>方法，该方法中输出日期时间，但是我们不断的切换，发现并不是每次都打印日期时间内容。</p><p>当然，以上<code>keep-alive</code>的使用方式，是将所有的组件都缓存了，如果只想缓存某个组件，可以采用如下的方式</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 右侧内容区域 --&gt;</span><br><span class="line">         &lt;div class=&quot;content right&quot;&gt;&lt;div class=&quot;main-content&quot;&gt;</span><br><span class="line">           &lt;keep-alive include=&#x27;goods&#x27;&gt;</span><br><span class="line">            &lt;router-view /&gt;</span><br><span class="line">            &lt;/keep-alive&gt;</span><br><span class="line">            &lt;/div&gt;&lt;/div&gt;</span><br><span class="line">       &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>在上面的代码中，通过<code>include</code>添加了需要缓存的组件的名称，如果有多个在<code>include</code>中可以继续添加，每个组件名称之间用逗号分隔。</p><p>以上的含义就是只有<code>goods</code>组件需要被缓存(<code>goods</code>是组件的<code>name</code>值)</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Goods</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">          &lt;h3&gt;商品管理区域&lt;/h3&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;`</span>,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>exclude</code>表示的就是除了指定的组件以外（也是组件的<code>name</code>），其它组件都进行缓存。</p><p><strong>应用场景</strong></p><p>如果未使用 keep-alive 组件，则在页面回退时仍然会重新渲染页面，触发 created 钩子，使用体验不好。 在以下场景中使用 keep-alive 组件会显著提高用户体验，菜单存在多级关系，多见于列表页+详情页的场景如：</p><ul><li>商品列表页点击商品跳转到商品详情，返回后仍显示原有信息</li><li>订单列表跳转到订单详情，返回，等等场景。</li></ul><p><strong>生命周期：</strong><br> <code>activated</code>和<code>deactivated</code>会在<code>keep-alive</code>内所有嵌套的组件中触发<br>  如：B 页面是缓存页面<br>    当 A 页面跳到 B 页面时，B 页面的生命周期：activated（可在此时更新数据）<br>   B 页面跳出时，触发 deactivated<br>   B 页面自身刷新时，会触发 created-mouted-activated</p><h2 id="13、Hash-模式与-History-模式"><a href="#13、Hash-模式与-History-模式" class="headerlink" title="13、Hash 模式与 History 模式"></a>13、Hash 模式与 History 模式</h2><h3 id="13-1-Hash-模式与-History-模式区别"><a href="#13-1-Hash-模式与-History-模式区别" class="headerlink" title="13.1 Hash 模式与 History 模式区别"></a>13.1 Hash 模式与 History 模式区别</h3><p>前端路由中，不管是什么实现模式，都是客户端的一种实现方式，也就是当路径发生变化的时候，是不会向服务器发送请求的。</p><p>如果需要向服务器发送请求，需要用到<code>ajax</code>方式。</p><p>两种模式的区别</p><p>首先是表现形式的区别</p><p><strong><code>Hash</code>模式</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.baidu.com/#/showlist?id=22256</span><br></pre></td></tr></table></figure><p><code>hash</code>模式中路径带有<code>#</code>, <code>#</code>后面的内容作为路由地址。可以通过问号携带参数。</p><p>当然这种模式相对来说比较丑，路径中带有与数据无关的符号，例如<code>#</code>与<code>?</code></p><p><code>History</code>模式</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.baidu.com/showlist/22256</span><br></pre></td></tr></table></figure><p><code>History</code>模式是一个正常的路径的模式，如果要想实现这种模式，还需要服务端的相应支持。</p><p>下面再来看一下两者原理上的区别。</p><p><code>Hash</code>模式是基于锚点，以及<code>onhashchange</code>事件。</p><p>通过锚点的值作为路由地址，当地址发生变化后触发<code>onhashchange</code>事件。</p><p><code>History</code>模式是基于<code>HTML5</code>中的<code>History API</code></p><p>也就是如下两个方法</p><p><code>history.pushState( )</code> <code>IE10</code>以后才支持</p><p><code>history.replaceState( )</code></p><h3 id="13-2-History模式的使用"><a href="#13-2-History模式的使用" class="headerlink" title="13.2 History模式的使用"></a>13.2 <code>History</code>模式的使用</h3><p><code>History</code>模式需要服务器的支持，为什么呢？</p><p>因为在单页面的应用中，只有一个页面，也就是<code>index.html</code>这个页面，服务端不存在<code>http://www.test.com/login</code>这样的地址，也就说如果刷新浏览器，</p><p>请求服务器，是找不到<code>/login</code>这个页面的，所以会出现<code>404</code>的错误。（在传统的开发模式下，输入以上的地址，会返回<code>login</code>这个页面，而在单页面应用中，只有一个页面为<code>index.html</code>）</p><p>所以说，在服务端应该除了静态资源外都返回单页应用的<code>index.html</code></p><p>下面我们开始<code>history</code>模式来演示一下对应的问题。</p><p>首先添加一个针对 404 组件的处理</p><p>首先在菜单栏中添加一个链接：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 左侧菜单栏 --&gt;</span><br><span class="line">&lt;div class=&quot;content left&quot;&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">              &lt;li&gt;&lt;router-link to=&quot;/users&quot;&gt; 用户管理&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">              &lt;li&gt;&lt;router-link to=&quot;/rights&quot;&gt; 权限管理&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">              &lt;li&gt;&lt;router-link to=&quot;/goods&quot;&gt; 商品管理&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">              &lt;li&gt;&lt;router-link to=&quot;/orders&quot;&gt; 订单管理&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">              &lt;li&gt;&lt;router-link to=&quot;/settings&quot;&gt; 系统设置&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">              &lt;li&gt;&lt;router-link to=&quot;/about&quot;&gt; 关于&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">          &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>这里我们添加了一个“关于”的链接，但是我们没有为其定义相应的组件，所以这里需要处理 404 的情况。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const NotFound = &#123; template: `</span><br><span class="line">&lt;div&gt;</span><br><span class="line">            你访问的页面不存在!!</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">`, &#125;;</span><br></pre></td></tr></table></figure><p>在程序中添加了一个针对 404 的组件。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">       <span class="attr">mode</span>: <span class="string">&quot;history&quot;</span>,</span><br><span class="line">       <span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">       <span class="attr">mode</span>: <span class="string">&quot;history&quot;</span>,</span><br><span class="line">       <span class="attr">routes</span>: [</span><br><span class="line">         &#123; <span class="attr">path</span>: <span class="string">&quot;/login&quot;</span>, <span class="attr">component</span>: <span class="title class_">Login</span> &#125;,</span><br><span class="line">         &#123; <span class="attr">path</span>: <span class="string">&quot;*&quot;</span>, <span class="attr">component</span>: <span class="title class_">NotFound</span> &#125;,</span><br><span class="line">         &#123;</span><br><span class="line">           <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">           <span class="attr">component</span>: <span class="title class_">App</span>,</span><br><span class="line">           <span class="attr">redirect</span>: <span class="string">&quot;/users&quot;</span>,</span><br><span class="line">           <span class="attr">children</span>: [</span><br><span class="line">             &#123;</span><br><span class="line">               <span class="attr">path</span>: <span class="string">&quot;/users&quot;</span>,</span><br><span class="line">               <span class="attr">component</span>: <span class="title class_">Users</span>,</span><br><span class="line">               <span class="attr">meta</span>: &#123;</span><br><span class="line">                 <span class="attr">auth</span>: <span class="literal">true</span>,</span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="comment">// beforeEnter(to, from, next) &#123;</span></span><br><span class="line">               <span class="comment">//   if (window.isLogin) &#123;</span></span><br><span class="line">               <span class="comment">//     next();</span></span><br><span class="line">               <span class="comment">//   &#125; else &#123;</span></span><br><span class="line">               <span class="comment">//     next(&quot;/login?redirect=&quot; + to.fullPath);</span></span><br><span class="line">               <span class="comment">//   &#125;</span></span><br><span class="line">               <span class="comment">// &#125;,</span></span><br><span class="line">             &#125;,</span><br><span class="line">             &#123; <span class="attr">path</span>: <span class="string">&quot;/userinfo/:id&quot;</span>, <span class="attr">component</span>: <span class="title class_">UserInfo</span>, <span class="attr">props</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">             &#123; <span class="attr">path</span>: <span class="string">&quot;/rights&quot;</span>, <span class="attr">component</span>: <span class="title class_">Rights</span> &#125;,</span><br><span class="line">             &#123; <span class="attr">path</span>: <span class="string">&quot;/goods&quot;</span>, <span class="attr">component</span>: <span class="title class_">Goods</span> &#125;,</span><br><span class="line">             &#123; <span class="attr">path</span>: <span class="string">&quot;/orders&quot;</span>, <span class="attr">component</span>: <span class="title class_">Orders</span> &#125;,</span><br><span class="line">             &#123; <span class="attr">path</span>: <span class="string">&quot;/settings&quot;</span>, <span class="attr">component</span>: <span class="title class_">Settings</span> &#125;,</span><br><span class="line">           ],</span><br><span class="line">         &#125;,</span><br><span class="line">       ],</span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure><p>在上面的代码中，指定了处理 404 的路由规则，同时将路由的模式修改成了<code>history</code>模式。同时，启用这里启用了其它的组件的路由规则配置，也就是不在<code>login</code>方法中使用<code>addRoutes</code>方法来动态添加路由规则了。</p><p><code>login</code> 方法修改成如下形式：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">login</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="comment">// window.isLogin = true;</span></span><br><span class="line">           <span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isLogin&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">           <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>.<span class="property">redirect</span>) &#123;</span><br><span class="line">             <span class="comment">//   //动态添加路由：</span></span><br><span class="line">             <span class="comment">//   this.$router.addRoutes([</span></span><br><span class="line">             <span class="comment">//     &#123;</span></span><br><span class="line">             <span class="comment">//       path: &quot;/&quot;,</span></span><br><span class="line">             <span class="comment">//       component: App,</span></span><br><span class="line">             <span class="comment">//       redirect: &quot;/users&quot;,</span></span><br><span class="line">             <span class="comment">//       children: [</span></span><br><span class="line">             <span class="comment">//         &#123;</span></span><br><span class="line">             <span class="comment">//           path: &quot;/users&quot;,</span></span><br><span class="line">             <span class="comment">//           component: Users,</span></span><br><span class="line">             <span class="comment">//           meta: &#123;</span></span><br><span class="line">             <span class="comment">//             auth: true,</span></span><br><span class="line">             <span class="comment">//           &#125;,</span></span><br><span class="line">             <span class="comment">//           // beforeEnter(to, from, next) &#123;</span></span><br><span class="line">             <span class="comment">//           //   if (window.isLogin) &#123;</span></span><br><span class="line">             <span class="comment">//           //     next();</span></span><br><span class="line">             <span class="comment">//           //   &#125; else &#123;</span></span><br><span class="line">             <span class="comment">//           //     next(&quot;/login?redirect=&quot; + to.fullPath);</span></span><br><span class="line">             <span class="comment">//           //   &#125;</span></span><br><span class="line">             <span class="comment">//           // &#125;,</span></span><br><span class="line">             <span class="comment">//         &#125;,</span></span><br><span class="line">             <span class="comment">//         &#123; path: &quot;/userinfo/:id&quot;, component: UserInfo, props: true &#125;,</span></span><br><span class="line">             <span class="comment">//         &#123; path: &quot;/rights&quot;, component: Rights &#125;,</span></span><br><span class="line">             <span class="comment">//         &#123; path: &quot;/goods&quot;, component: Goods &#125;,</span></span><br><span class="line">             <span class="comment">//         &#123; path: &quot;/orders&quot;, component: Orders &#125;,</span></span><br><span class="line">             <span class="comment">//         &#123; path: &quot;/settings&quot;, component: Settings &#125;,</span></span><br><span class="line">             <span class="comment">//       ],</span></span><br><span class="line">             <span class="comment">//     &#125;,</span></span><br><span class="line">             <span class="comment">//   ]);</span></span><br><span class="line">             <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>.<span class="property">redirect</span>);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><p>现在已经将前端<code>vue</code>中的代码修改完毕了，下面我们要将页面的内容部署到<code>node.js</code>服务器中。</p><p>而且上面的代码中，我们使用了<code>sessionStorage</code>来保存登录用户的信息，不在使用<code>window</code>下的<code>isLogin</code></p><p>对应的<code>data</code>内容下的代码也要修改：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Login</span> = &#123;</span><br><span class="line">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">isLogin</span>: <span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isLogin&quot;</span>),</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><p>路由守卫中的代码进行如下修改：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">jsrouter.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//to:去哪个页面，from来自哪个页面，next继续执行.</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isLogin&quot;</span>)) &#123;</span><br><span class="line">    <span class="comment">//用户已经登录</span></span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&quot;/login&quot;</span>) &#123;</span><br><span class="line">      <span class="comment">// 用户已经登录了，但是又访问登录页面，这里直接跳转到用户列表页面</span></span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//用户已经登录，并且访问其它页面，则运行访问</span></span><br><span class="line"></span><br><span class="line">      <span class="title function_">next</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//用户没有登录,并且访问的就是登录页，则运行访问登录页</span></span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&quot;/login&quot;</span>) &#123;</span><br><span class="line">      <span class="title function_">next</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//用户没有登录，访问其它页面，则跳转到登录页面。</span></span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&quot;/login?redirect=&quot;</span> + to.<span class="property">fullPath</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们也是通过<code>sessionStorage</code>来获取登录信息。</p><p><code>index.html</code>完整代码如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>基于vue-router的案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const App = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="comment">&lt;!-- 头部区域 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>传智后台管理系统<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="comment">&lt;!-- 中间主体区域 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="comment">&lt;!-- 左侧菜单栏 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content left&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/users&quot;</span>&gt;</span> 用户管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/rights&quot;</span>&gt;</span> 权限管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/goods&quot;</span>&gt;</span> 商品管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/orders&quot;</span>&gt;</span> 订单管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/settings&quot;</span>&gt;</span> 系统设置<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span> 关于<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="comment">&lt;!-- 右侧内容区域 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content right&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main-content&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">&#x27;goods&#x27;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">             <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">             <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">             <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="comment">&lt;!-- 尾部区域 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>版权信息<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const Users = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            userlist: [</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              &#123; id: 1, name: &quot;张三&quot;, age: 10 &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              &#123; id: 2, name: &quot;李四&quot;, age: 20 &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              &#123; id: 3, name: &quot;王五&quot;, age: 30 &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              &#123; id: 4, name: &quot;赵六&quot;, age: 40 &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            ],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        methods: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          goDetail(id) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            console.log(id);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            this.$router.push(&quot;/userinfo/&quot; + id);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">h3</span>&gt;</span>用户管理区域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">table</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;item in userlist&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item.id</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item.name</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item.age</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;goDetail(item.id)&quot;</span>&gt;</span>详情<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        // beforeRouteEnter(to, from, next) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        //   if (window.isLogin) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        //     next();</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        //   &#125; else &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        //     next(&quot;/login?redirect=&quot; + to.fullPath);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        //   &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        // &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      //用户详情组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const UserInfo = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        props: [&quot;id&quot;],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">h5</span>&gt;</span>用户详情页 --- 用户Id为：</span><span class="template-variable">&#123;&#123;<span class="name">id</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;goback()&quot;</span>&gt;</span>后退<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        methods: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          goback() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            // 实现后退功能</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            this.$router.go(-1);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const Rights = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">h3</span>&gt;</span>权限管理区域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const Goods = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        name: &quot;goods&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">h3</span>&gt;</span>商品管理区域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        created() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          console.log(new Date());</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const Orders = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">h3</span>&gt;</span>订单管理区域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const Settings = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">h3</span>&gt;</span>系统设置区域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const NotFound = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            你访问的页面不存在!!</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const Login = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            isLogin: window.sessionStorage.getItem(&quot;isLogin&quot;),</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;login&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;!isLogin&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;logout&quot;</span> <span class="attr">v-else</span>&gt;</span>注销<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        methods: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          login() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            // window.isLogin = true;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            window.sessionStorage.setItem(&quot;isLogin&quot;, true);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            if (this.$route.query.redirect) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              //   //动态添加路由：</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              //   this.$router.addRoutes([</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              //     &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              //       path: &quot;/&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              //       component: App,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              //       redirect: &quot;/users&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              //       children: [</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              //         &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              //           path: &quot;/users&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              //           component: Users,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              //           meta: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              //             auth: true,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              //           &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              //           // beforeEnter(to, from, next) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              //           //   if (window.isLogin) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              //           //     next();</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              //           //   &#125; else &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              //           //     next(&quot;/login?redirect=&quot; + to.fullPath);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              //           //   &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              //           // &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              //         &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              //         &#123; path: &quot;/userinfo/:id&quot;, component: UserInfo, props: true &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              //         &#123; path: &quot;/rights&quot;, component: Rights &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              //         &#123; path: &quot;/goods&quot;, component: Goods &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              //         &#123; path: &quot;/orders&quot;, component: Orders &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              //         &#123; path: &quot;/settings&quot;, component: Settings &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              //       ],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              //     &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              //   ]);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              this.$router.push(this.$route.query.redirect);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125; else &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              this.$router.push(&quot;/&quot;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          logout() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            this.isLogin = window.isLogin = false;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      // 创建路由对象</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const router = new VueRouter(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        mode: &quot;history&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        routes: [</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#123; path: &quot;/login&quot;, component: Login &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#123; path: &quot;*&quot;, component: NotFound &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            path: &quot;/&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            component: App,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            redirect: &quot;/users&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            children: [</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                path: &quot;/users&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                component: Users,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                meta: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                  auth: true,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                // beforeEnter(to, from, next) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                //   if (window.isLogin) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                //     next();</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                //   &#125; else &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                //     next(&quot;/login?redirect=&quot; + to.fullPath);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                //   &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                // &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              &#123; path: &quot;/userinfo/:id&quot;, component: UserInfo, props: true &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              &#123; path: &quot;/rights&quot;, component: Rights &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              &#123; path: &quot;/goods&quot;, component: Goods &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              &#123; path: &quot;/orders&quot;, component: Orders &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">              &#123; path: &quot;/settings&quot;, component: Settings &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            ],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        ],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      //实现全局守卫</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      // router.beforeEach((to, from, next) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      //   //to:去哪个页面，from来自哪个页面，next继续执行.</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      //   //判断哪个路由需要进行守卫，这里可以通过元数据方式</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      //   if (to.meta.auth) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      //     if (window.isLogin) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      //       next();</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      //     &#125; else &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      //       next(&quot;/login?redirect=&quot; + to.fullPath);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      //     &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      //   &#125; else &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      //     next();</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      //   &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      // &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      router.beforeEach((to, from, next) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        //to:去哪个页面，from来自哪个页面，next继续执行.</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        if (window.sessionStorage.getItem(&quot;isLogin&quot;)) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          //用户已经登录</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          if (to.path === &quot;/login&quot;) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            // 用户已经登录了，但是又访问登录页面，这里直接跳转到用户列表页面</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            next(&quot;/&quot;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#125; else &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            //用户已经登录，并且访问其它页面，则运行访问</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            next();</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125; else &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          //用户没有登录,并且访问的就是登录页，则运行访问登录页</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          if (to.path === &quot;/login&quot;) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            next();</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#125; else &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            //用户没有登录，访问其它页面，则跳转到登录页面。</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            next(&quot;/login?redirect=&quot; + to.fullPath);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      const vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        el: &quot;#app&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        router,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然，项目的目录结构做了一定的调整，如下图所示：</p><p><img src="/2022/07/13/Vue/Vue%20Router/vueRouter/%E7%9B%AE%E5%BD%95.png" alt="image-20200826223502724"></p><p>在<code>web</code>目录下面，存放的是<code>index.html</code>,在<code>webserver</code>目录下面存放的是<code>node</code>代码。</p><p>下面看一下具体的<code>node</code>代码的实现。</p><p>app.js 文件中的代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="comment">//导入处理history模式的模块</span></span><br><span class="line"><span class="keyword">const</span> history = <span class="built_in">require</span>(<span class="string">&quot;connect-history-api-fallback&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">//注册处理history模式的中间件</span></span><br><span class="line"><span class="comment">// app.use(history())</span></span><br><span class="line"><span class="comment">//处理静态资源的中间件,处理web目录下的index.html</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;../web&quot;</span>)));</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器开启&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>connect-history-api-fallback</code>模块的安装如下(注意在上面的代码中还没有使用该模块)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save connect-history-api-fallback</span><br></pre></td></tr></table></figure><p>下面还需要安装<code>express</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install express</span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node app.js</span><br></pre></td></tr></table></figure><p>现在在地址栏中输入:<code>http://localhost:3000</code>就可以访问网站了。</p><p>并且当我们去单击左侧的菜单的时候，可以实现页面的切换，同时单击“关于”的时候，会出现<code>NotFound</code>组件中的内容。</p><p>经过测试发现好像没有什么问题，那这是什么原因呢？你想一下当我们单击左侧菜单的时候，路由是怎样工作的呢？</p><p>因为现在我们开启了路由的<code>history</code>模式，而该模式是通过<code>HTML5</code>中的<code>history</code>中的<code>api</code>来完成路由的操作的，也就是当我们单击菜单的时候，是通过<code>history.pushState( ) </code>方法来修改地址栏中的地址，实现组件的切换，而且还会把地址保存的历史记录中（也就是可以单击浏览器中后退按钮，实现后退等操作），但是它并不会向服务器发送请求。</p><p>所以说现在整个操作都是在客户端完成的。</p><p>但是，当我刷新了浏览器以后，会出现怎样的情况呢？</p><p><img src="/2022/07/13/Vue/Vue%20Router/vueRouter/%E8%AF%B7%E6%B1%82.png" alt="image-20200826224843519"></p><p>上图的含义就是，当单击浏览器中的刷新按钮的时候，会向服务器发送请求，要求<code>node</code>服务器处理这个地址，但是服务器并没有处理该地址，所以服务器会返回<code>404</code></p><p>以上就是如果<code>vue-router</code>开启了<code>history</code>模式后，出现的问题。</p><p>下面解决这个问题，在服务端启用<code>connect-history-api-fallback</code>模块就可以了，如下代码所示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="comment">//导入处理history模式的模块</span></span><br><span class="line"><span class="keyword">const</span> history = <span class="built_in">require</span>(<span class="string">&quot;connect-history-api-fallback&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">//注册处理history模式的中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">history</span>());</span><br><span class="line"><span class="comment">//处理静态资源的中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;../web&quot;</span>)));</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器开启&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>服务端的代码做了修改以后，一定要服务端重新启动<code>node app.js</code></p><p>然后经过测试以后发现没有问题了。</p><p>那么现在你考虑一下，具体的工作方式是什么？</p><p>当我们在服务端开启对<code>history</code>模式的支持以后，我们刷新浏览器，会想服务器发送请求，例如:<code>http://localhost:3000/orders</code></p><p>服务器接收该请求，那么用于服务器开启了<code>history</code>模式，然后服务器会检查，根据该请求所访问的页面是不存在的，所以会将单页面应用的<code>index.html</code>返回给浏览器。浏览器接收<code>index.html</code>页面后，会判断路由地址，发现地址为<code>orders</code>,所以会加载该地址对应的组件内容。</p><h3 id="13-3-在-Nginx-服务器中配置History模式"><a href="#13-3-在-Nginx-服务器中配置History模式" class="headerlink" title="13.3 在 Nginx 服务器中配置History模式"></a>13.3 在 Nginx 服务器中配置<code>History</code>模式</h3><p><strong>代理服务器</strong></p><p><strong>代理服务器</strong>:一般是指局域网内部的机器通过代理服务器发送请求到互联网上的服务器,代理服务器一般作用在客户端。应用比如：GoAgent，翻墙神器.</p><p><img src="/2022/07/13/Vue/Vue%20Router/vueRouter/1566823356428.png"></p><p><strong>反向代理服务器</strong></p><p><strong>反向代理服务器：</strong>在服务器端接受客户端的请求，然后把请求分发给具体的服务器进行处理，然后再将服务器的响应结果反馈给客户端。Nginx 就是其中的一种反向代理服务器软件。</p><p><img src="/2022/07/13/Vue/Vue%20Router/vueRouter/1566823580536.png"></p><p><img src="/2022/07/13/Vue/Vue%20Router/vueRouter/1566823650555.png"></p><p><strong>Nginx 简介</strong></p><p>Nginx (“engine x”) ，Nginx (“engine x”) 是俄罗斯人 Igor Sysoev(塞索耶夫)编写的一款高性能的 HTTP 和反向代理服务器。也是一个 IMAP&#x2F;POP3&#x2F;SMTP 代理服务器；也就是说，Nginx 本身就可以托管网站，进行 HTTP 服务处理，也可以作为反向代理服务器使用。</p><p><strong>Nginx 的应用现状</strong></p><p>淘宝、新浪博客、新浪播客、网易新闻、六间房、56.com、Discuz!、水木社区、豆瓣、YUPOO、海内、迅雷在线 等多家网站使用 Nginx 作为 Web 服务器或反向代理服务器。</p><p><strong>Nginx 的特点</strong></p><ul><li><p><strong>跨平台：</strong>Nginx 可以在大多数 Unix like OS 编译运行，而且也有 Windows 的移植版本。</p></li><li><p><strong>配置异常简单：</strong>非常容易上手。配置风格跟程序开发一样，神一般的配置</p></li><li><p><strong>非阻塞、高并发连接：</strong>数据复制时，磁盘 I&#x2F;O 的第一阶段是非阻塞的。官方测试能够支撑 5 万并发连接，在实际生产环境中跑到 2 ～ 3 万并发连接数.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  高并发：其实就是使用技术手段使得系统可以并行处理很多的请求！衡量指标常用的有响应时间，吞吐量，每秒查询率QPS，并发用户数。响应时间：系统对请求做出响应的时间。你简单理解为一个http请求返回所用的时间。</span><br><span class="line"></span><br><span class="line">吞吐量：单位时间内处理的请求数量。</span><br><span class="line"></span><br><span class="line">QPS：每秒可以处理的请求数</span><br><span class="line"></span><br><span class="line">并发用户数：同时承载正常使用系统功能的用户数量。也就是多少个人同时使用这个系统，这个系统还能正常运行。这个用户数量就是并发用户数了</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>内存消耗小：</strong>处理大并发的请求内存消耗非常小。在 3 万并发连接下，开启的 10 个 Nginx 进程才消耗 150M 内存（15M*10&#x3D;150M）。</p></li><li><p><strong>成本低廉：</strong>Nginx 为开源软件，可以免费使用。而购买 F5 BIG-IP、NetScaler 等硬件负载均衡交换机则需要十多万至几十万人民币 。</p></li><li><p><strong>内置的健康检查功能：</strong>如果 Nginx Proxy 后端的某台 Web 服务器宕机了，不会影响前端访问。</p></li></ul><p><strong>节省带宽：</strong>支持 GZIP 压缩，可以添加浏览器本地缓存的 Header 头。</p><p><strong>稳定性高：</strong>用于反向代理，宕机的概率微乎其微</p><p><strong>Nginx 启动</strong></p><ul><li><p>到官网下载 Windows 版本，下载地址：<a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a></p></li><li><p>解压到磁盘任一目录（<strong>注意：nginx 解压后的文件夹不能放在中文目录下。</strong>）</p></li><li><p>修改配置文件</p></li><li><p>启动服务：</p><p>•直接运行 nginx.exe</p></li></ul><p>Nginx 服务器默认占用的是 80 端口号，而在 window10 中端口号 80 已经被其它的应用程序占用，所以这里可以修改一下 Nginx 的端口号，在 conf 目录下找到 nginx.conf 文件，该文件就是 Nginx 服务的配置文件，通过该配置文件可以修改 Nginx 的端口号，当然后期针对 Nginx 服务器的配置都是通过该文件完成的。</p><p>在这里，我将端口号修改成了:8081,所以在浏览器的地址栏中，输入：<a href="http://localhost:8081/">http://localhost:8081</a> 可以打开默认的欢迎页面，表示 Nginx 服务启动成功。</p><p>下面我们要做的就是将我们的程序部署到<code>Nginx</code>中。</p><p>现在，我们可以将做好的网站页面拷贝到<code>Nginx</code>中的<code>html</code>目录中，然后在地址栏中输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8081/</span><br></pre></td></tr></table></figure><p>就可以看到对应的页面了，然后单击菜单，发现可以进行留有的切换。当单击刷新按钮后，发现出现了 404 的错误。</p><p>原因，点击刷新按钮就会向服务器发送请求，而在服务端没有对应的文件，所以会出现 404 的错误。</p><p>下面我们需要对<code>Nginx</code>服务器进行配置，找到<code>conf</code>目录下的<code>nginx.conf</code>.</p><p>然后进行如下的配置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">           root   html;</span><br><span class="line">           index  index.html index.htm;</span><br><span class="line">try_files $uri $uri/ /index.html;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>当在地址栏中输入<code>/</code>的时候，会请求根目录也就是<code>html</code>目录中的<code>index.html</code>.</p><p>现在，我们又加了<code>try_files</code>配置，表示尝试访问文件。</p><p><code>$uri</code>表示根据所请求的<code>url</code>地址查找对应文件，如果找到了返回，没有找到。</p><p>将<code>$uri</code>作为目录，查找该目录下的<code>index.html</code>,如果找到就返回，没有找到，则直接返回<code>html</code>目录下面的<code>index.html</code>文件。</p><p>而现在我们已经将我们做好的页面拷贝到了<code>html</code>目录下面，所以直接将我们的页面返回了。</p><p>下面可以进行测试。</p><p>测试之前需要重新启动服务器。</p><p>打开<code>cmd</code>，然后定位到<code>Nginx</code>的目录，输入以下命令重新启动服务器。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>这时的执行流程是：当单击浏览器中的刷新按钮后，会向服务器发送请求，服务接收到请求后，发现没有所访问的文件，但是，由于我们配置了<code>try_files</code>,所以会将<code>html</code>目录下面的<code>index.html</code>页面的内容返回，返回给浏览器后，浏览器会根据路由来进行处理，也就是查找对应组件进行渲染。</p><h1 id="二、Vue-Router-原理"><a href="#二、Vue-Router-原理" class="headerlink" title="二、Vue Router 原理"></a>二、Vue Router 原理</h1><p>现在我们已经掌握了<code>Vue Router</code>的基本使用，下面我们来模拟<code>Vue Router</code>的实现，通过模拟实现，来了解其内部的实现原理。</p><p>我们这里模拟的是<code>History</code>模式。<code>Hash</code>模式基本实现上是一样的。</p><p>这里先来复习一下<code>Hash</code>模式的工作原理。</p><ul><li>·<code>URL</code>中<code>#</code>后面的内容作为路径地址，当地址改变的时候不会向服务器发送请求，但是会触发<code>hashchange</code>事件。</li><li>监听<code>hashchange</code>事件，在该事件中记录当前的路由地址，然后根据路由地址找到对应组件。</li><li>根据当前路由地址找到对应组件重新渲染。</li></ul><p>下面再来复习一下<code>History</code>模式</p><ul><li>通过<code>history.pushState()</code>方法改变地址栏，并且将当前地址记录到浏览器的历史记录中。当前浏览器不会向服务器发送请求</li><li>监听<code>popstate</code>事件，可以发现浏览器历史操作的变化，记录改变后的地址，单击前进或者是后退按钮的时候触发该事件</li><li>根据当前路由地址找到对应组件重新渲染</li></ul><h2 id="1、分析-Vue-Router"><a href="#1、分析-Vue-Router" class="headerlink" title="1、分析 Vue Router"></a>1、分析 Vue Router</h2><p>在模拟<code>Vue Router</code>之前，</p><p>首先来看一下<code>Vue Router</code>的核心代码，做一个简单的分析</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注册插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>);</span><br><span class="line"><span class="comment">//创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [&#123; <span class="attr">name</span>: <span class="string">&quot;home&quot;</span>, <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>, <span class="attr">component</span>: homeComponent &#125;],</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 创建Vue实例，注册router对象</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  router,</span><br><span class="line">  <span class="attr">render</span>: <span class="function">(<span class="params">h</span>) =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&quot;#apps&quot;</span>);</span><br></pre></td></tr></table></figure><p>我们知道<code>Vue Router</code>是<code>Vue</code>的插件，所以在上面的代码中，我们首先调用<code>use</code>方法注册该插件。</p><p><code>use</code>方法需要的参数可以是一个函数或者是对象，如果传递的是函数，<code>use</code>内部会直接调用该函数，</p><p>如果传递的是一个对象，那么在<code>use</code>内部会调用该对象的<code>install</code>方法。</p><p>而我们这里传递的是对象，所以后面在模拟<code>VUe Router</code>的时候，要实现一个<code>install</code></p><p>方法。</p><p>下面我们创建了<code>VueRouter</code>实例，所以<code>VueRouter</code>可以是构造方法或者是类，那么我们在模拟的时候，将其定义为类。并且该类中有一个静态的<code>install</code>方法，因为我们将<code>VueRouter</code>传递给了<code>use</code>方法。</p><p>在<code>VueRouter</code>类的构造方法中，需要有一个参数，该参数是一个对象，该对象中定义了路由的规则。</p><p>最后创建了<code>Vue</code>的实例，并且将创建好的<code>Vue Router</code>对象传递到该实例中。</p><p>下面我们在看一下<code>Vue Router</code>的类图</p><p><img src="/2022/07/13/Vue/Vue%20Router/vueRouter/%E7%B1%BB%E5%9B%BE.png"></p><p>在该类图中，上半部分是<code>VueRouter</code>的属性，而下半部分是<code>VueRouter</code>的方法。</p><p><code>options</code>作用是记录构造函数中传入的对象, 我们在创建<code>Vue Router</code>的实例的时候，传递了一个对象，而该对象中定义了路由规则。而<code>options</code>就是记录传入的这个对象的。</p><p><code>routeMap</code>:是一个对象，记录路由地址与组件的对应关系，也就是一个键值对的形式，后期会 options 中路由规则解析到<code>routeMap</code>中。</p><p><code>data</code>是一个对象，该对象中有一个属性<code>current</code>,该属性用来记录当前的路由地址，<code>data</code>是一个响应式的对象，因为当前路由地址发生变化后，对应的组件要发生更新（_也就说当地址变化后，要加载对应组件_）。</p><p><code>install</code>是一个静态方法，用来实现<code>Vue</code>的插件机制。</p><p><code>Constructor</code>是一个构造方法，该该构造方法中会初始化<code>options</code> ,<code>data</code>,<code>routeMap</code>这几个属性。</p><p><code>inti</code>方法主要是用来调用下面的三个方法，也就把不同的代码分隔到不同的方法中去实现。</p><p><code>initEvent</code>方法，用来注册<code>popstate</code>事件，</p><p><code>createRouteMap</code>方法，该方法会把构造函数中传入进来的路由规则，转换成键值对的形式存储到<code>routeMap</code>中。 键就是路由的地址，值就是对应的组件</p><p><code>initComponents</code>方法，主要作用是用来创建<code>router-link</code>和<code>router-view</code>这两个组件的。</p><p>现在我们已经对<code>Vue Router</code>做了一个分析。</p><p>下面开始创建自己的<code>Vue Router</code>.</p><h2 id="2、install-方法实现"><a href="#2、install-方法实现" class="headerlink" title="2、install 方法实现"></a>2、install 方法实现</h2><p>在<code>vue_router_app</code>项目的<code>src</code>目录下面创建一个<code>vuerouter</code>目录，同时创建一个<code>index.js</code>文件，在该文件中创建如下的代码。</p><p><code>install</code>方法需要的参数是<code>Vue</code>的构造方法。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> _Vue = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">VueRouter</span> &#123;</span><br><span class="line">  <span class="comment">//调用install方法的时候，会传递Vue的构造函数</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">install</span>(<span class="params">Vue</span>) &#123;</span><br><span class="line">    <span class="comment">//首先判断插件是否已经被安装，如果已经被安装，就不需要重复安装。</span></span><br><span class="line">    <span class="comment">//1、判断当前插件是否已经被安装:</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">VueRouter</span>.<span class="property">install</span>.<span class="property">installed</span>) &#123;</span><br><span class="line">      <span class="comment">//条件成立，表明插件已经被安装，什么都不要做。</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">VueRouter</span>.<span class="property">install</span>.<span class="property">installed</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//2、把Vue构造函数记录到全局变量中。</span></span><br><span class="line">    _Vue = <span class="title class_">Vue</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、把创建Vue实例时候传入的router对象注入到Vue实例上。</span></span><br><span class="line">    _Vue.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">      <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//在创建Vue实例的时候</span></span><br><span class="line">        <span class="comment">// 也就是new Vue()的时候，才会有$options这个属性，</span></span><br><span class="line">        <span class="comment">//组件中是没有$options这个属性的。</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">router</span>) &#123;</span><br><span class="line">          _Vue.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$router</span> = <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">router</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、实现构造函数"><a href="#3、实现构造函数" class="headerlink" title="3、实现构造函数"></a>3、实现构造函数</h2><p>在介绍<code>VueRouter</code>的类图时，我们说过</p><p><code>Constructor</code>是一个构造方法，该该构造方法中会初始化<code>options</code> ,<code>data</code>,<code>routeMap</code>这几个属性。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line"></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">options</span> = options;</span><br><span class="line"></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">routeMap</span> = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">data</span> = _Vue.<span class="title function_">observable</span>(&#123;</span><br><span class="line">     <span class="attr">current</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="4、createRouteMap-方法实现"><a href="#4、createRouteMap-方法实现" class="headerlink" title="4、createRouteMap 方法实现"></a>4、createRouteMap 方法实现</h2><p><code>createRouteMap</code>方法，该方法会把构造函数中传入进来的<code>options</code>参数中的路由规则，转换成键值对的形式存储到<code>routeMap</code>中。 键就是路由的地址，值就是对应的组件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">createRouteMap</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">routes</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">route</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">routeMap</span>[route.<span class="property">path</span>] = route.<span class="property">component</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、initComponents-方法实现"><a href="#5、initComponents-方法实现" class="headerlink" title="5、initComponents 方法实现"></a>5、initComponents 方法实现</h2><p><code>initComponents</code>方法，主要作用是用来创建<code>router-link</code>和<code>router-view</code>这两个组件的。</p><p>下面先在这个方法中创建<code>router-link</code>这个组件。</p><p>先来看一下<code>router-link</code>这个组件的基本使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-link to=&quot;/users&quot;&gt; 用户管理&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><p>我们知道，<code>router-link</code>这个组件最终会被渲染成<code>a</code>标签，同时<code>to</code>作为一个属性，其值会作为<code>a</code>标签中的<code>href</code>属性的值。同时还要获取<code>&lt;router-link&gt;</code>这个组件中的文本，作为最终超链接的文本。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">initComponents</span>(<span class="params">Vue</span>) &#123;</span><br><span class="line">   <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;router-link&quot;</span>, &#123;</span><br><span class="line">     <span class="attr">props</span>: &#123;</span><br><span class="line">       <span class="attr">to</span>: <span class="title class_">String</span>,</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attr">template</span>: <span class="string">&#x27;&lt;a :href=&quot;to&quot;&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/a&gt;&#x27;</span>,</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们通过<code>Vue.component</code>来创建<code>router-link</code>这个组件，同时通过<code>props</code>接收<code>to</code>属性传递过来的值，并且对应的类型为字符串。</p><p>最终渲染的模板是一个<code>a</code>标签，<code>href</code>属性绑定了<code>to</code>属性的值，同时使用<code>&lt;slot&gt;</code>插槽作为占位符，用具体的文字内容填充该占位符。</p><p>现在已经将<code>router-link</code>这个组件创建好了。</p><p>下面我们需要对我们写的这些代码进行测试。</p><p>要进行测试应该先将<code>createRouteMap</code>方法与<code>initComponents</code>方法都调用一次，那么问题是</p><p>在什么时候调用这两个方法呢？</p><p>我们可以在 VueRoute 对象创建成功后，并且将<code>VueRouter</code>对象注册到<code>Vue</code>的实例上的时候，调用这两个方法。</p><p>也就是在<code>beforeCreate</code>这个钩子函数中。</p><p>当然为了调用这两个方便，在这里我们又定义了<code>init</code>方法，来做了一次封装处理。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">createRouteMap</span>();</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">initComponents</span>(_Vue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对<code>init</code>方法的调用如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="comment">//在创建Vue实例的时候</span></span><br><span class="line">     <span class="comment">// 也就是new Vue()的时候，才会有$options这个属性，</span></span><br><span class="line">     <span class="comment">//组件中是没有$options这个属性的。</span></span><br><span class="line">     <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">router</span>) &#123;</span><br><span class="line">       _Vue.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$router</span> = <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">router</span>;</span><br><span class="line">         <span class="comment">//调用init</span></span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">router</span>.<span class="title function_">init</span>();</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><p><code> this.$options.router.init();</code></p><p>这句代码的含义：<code>this</code>表示的就是 Vue 实例，<code>$options</code>表示的就是在创建<code>Vue</code>的实例的时候传递的选项，如下所示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  router,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>通过上面的代码，我们可以看到，传递过来的选项中是有<code>router</code>.</p><p>而这个<code>router</code>是什么呢？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;&#125;）</span><br></pre></td></tr></table></figure><p>就是<code>VueRouter</code>这个类的实例。而我们当前自己所模拟的路由,所创建的类就叫做<code>VueRouter</code>（也就是以后在创建路由实例的时候，使用我们自己创建的<code>VueRouter</code>这个类来完成）.</p><p>而<code>init</code>方法就是<code>VueRouter</code>这个类的实例方法。所以可以通过<code>this.$options.router.init()</code>的方式来调用。</p><p>下面我们来测试一下。</p><p>在<code>vue_router_app</code>项目的<code>src</code>目录下面，创建<code>router.js</code>文件,文件定义路由规则.</p><p>如下代码所示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="comment">// import Router from &quot;vue-router&quot;;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&quot;./vuerouter&quot;</span>; <span class="comment">//注意:这里导入的是自己定义的路由规则</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&quot;./components/Login.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&quot;./components/Home.vue&quot;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Router</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">  <span class="attr">model</span>: <span class="string">&quot;history&quot;</span>,</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&quot;/login&quot;</span>, <span class="attr">component</span>: <span class="title class_">Login</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在<code>components</code>目录下面分别创建<code>Home.vue</code>与<code>Login.vue</code>.</p><p><code>Home.vue</code> 的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;router-link to=&quot;/login&quot;&gt;登录&lt;/router-link&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>Login.vue</code>的代码如下:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;登录页面&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>App.vue</code>组件的内容如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;nav&quot;&gt;</span><br><span class="line">      &lt;router-link to=&quot;/&quot;&gt;Home&lt;/router-link&gt;</span><br><span class="line">      &lt;router-link to=&quot;/login&quot;&gt;Login&lt;/router-link&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>在<code>main.js</code> 中完成路由的注册。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="comment">//导入router.js</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  router,</span><br><span class="line">  <span class="attr">render</span>: <span class="function">(<span class="params">h</span>) =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><p>运行上面的代码会出现如下的错误：</p><p><img src="/2022/07/13/Vue/Vue%20Router/vueRouter/%E9%94%99%E8%AF%AF.png"></p><p>第二个错误是我们还没有创建<code>router-view</code>这个组件，所以才会出现该错误。这里暂时可以先不用考虑。</p><p>主要是第一个错误，该错误的含义是，目前我们使用的是运行时版本的<code>Vue</code>, 模板编译器不可用。</p><p>你可以使用预编译把模板编译成<code>render</code>函数，或者是使用包含编译版本的<code>Vue</code>.</p><p>以上错误说明了<code>Vue</code>的构建版本有两个，分别是“运行时版”和”完整版”.</p><p>运行时版：不支持<code>template</code>模板，需要打包的时候提前编译。</p><p>完整版：包含运行时和编译器，体积比运行时版大<code>10k</code>左右，程序运行的时候把模板转换成<code>render</code>函数。性能低于运行时版本。</p><p>使用<code>vue-cli</code>创建的项目默认为<code>运行时版本</code>,而我们创建的<code>VueRouter</code>类中有<code>template</code>模板，所以才会出现第一个错误。</p><p>官方文档：<code>https://cn.vuejs.org/v2/guide/installation.html</code></p><p>下面我们看一下解决方案：</p><p>在前面我们已经提到过，使用<code>vue-cli</code> 创建的项目是运行时项目，所以没有编译器，如果我们将其修改成完整版，就有编译器，对模板进行编译。</p><p>解决的方案：在项目的根目录创建<code>vue.config.js</code>文件，在该文件中添加<code>runtimeCompiler</code>配置项，该配置项表示的是，是否使用包含运行时编译器的<code>Vue</code>构建</p><p>版本（完整版）。设置为<code>true</code>后你就可以在<code>Vue</code>组件中使用<code>template</code>选项了，但是这会让你的应用额外增加<code>10kb</code>左右。默认该选项的取值为<code>false</code>.</p><p><code>vue.config.js</code>文件配置如下</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">runtimeCompiler</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>表示使用的是完整版，这时编译器会将<code>template</code>选项转换成<code>render</code>函数。</p><p>注意：要想以上配置内容起作用，必须重新启动服务器。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><h2 id="6、render函数"><a href="#6、render函数" class="headerlink" title="6、render函数"></a>6、<code>render</code>函数</h2><p>虽然使用完整版<code>Vue</code>可以解决上面的问题，但是由于带有编译器，体积比运行时版本大<code>10k</code>左右，所以性能比运行时版要低。</p><p>那么这一小节我们使用运行时版本来解决这个问题。</p><p>我们知道，完整版中的编译器的作用就是将<code>template</code>模板转成<code>render</code>函数，所以在运行时版本中我们可以自己编写<code>render</code>函数。</p><p>但是在这你肯定也有一个问题，就是在单文件组件中，我们一直都是在写<code>&lt;template&gt;&lt;/template&gt;</code>,并且没有写<code>render</code>函数，</p><p>但是为什么能够正常的工作呢？这时因为在打包的时候，将<code>&lt;template&gt;</code>编译成了<code>render</code>函数，这就是预编译。</p><p>最终代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该方法需要一个参数为Vue的构造函数。</span></span><br><span class="line"> <span class="comment">//当然也可以使用全局的_Vue.</span></span><br><span class="line"> <span class="title function_">initComponents</span>(<span class="params">Vue</span>) &#123;</span><br><span class="line">   <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;router-link&quot;</span>, &#123;</span><br><span class="line">     <span class="attr">props</span>: &#123;</span><br><span class="line">       <span class="attr">to</span>: <span class="title class_">String</span>,</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="comment">// template: &#x27;&lt;a :href=&quot;to&quot;&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/a&gt;&#x27;,</span></span><br><span class="line">     <span class="title function_">render</span>(<span class="params">h</span>) &#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="title function_">h</span>(</span><br><span class="line">         <span class="string">&quot;a&quot;</span>,</span><br><span class="line">         &#123;</span><br><span class="line">           <span class="attr">attrs</span>: &#123;</span><br><span class="line">             <span class="attr">href</span>: <span class="variable language_">this</span>.<span class="property">to</span>,</span><br><span class="line">           &#125;,</span><br><span class="line">         &#125;,</span><br><span class="line">         [<span class="variable language_">this</span>.<span class="property">$slots</span>.<span class="property">default</span>]</span><br><span class="line">       );</span><br><span class="line">     &#125;,</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>注意：在测试之前一定要将根目录下的<code>vue.config.js</code>文件删除掉，这样当前的环境为“运行时”环境。</p><h2 id="7、创建router-view组件"><a href="#7、创建router-view组件" class="headerlink" title="7、创建router-view组件"></a>7、创建<code>router-view</code>组件</h2><p><code>router-view</code>组件就是一个占位符。当根据路由规则找到组件后，会渲染到<code>router-view</code>的位置。</p><p>在<code>initComponents</code>方法中创建<code>router-view</code>组件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该方法需要一个参数为Vue的构造函数。</span></span><br><span class="line"> <span class="comment">//当然也可以使用全局的_Vue.</span></span><br><span class="line"> <span class="title function_">initComponents</span>(<span class="params">Vue</span>) &#123;</span><br><span class="line">   <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;router-link&quot;</span>, &#123;</span><br><span class="line">     <span class="attr">props</span>: &#123;</span><br><span class="line">       <span class="attr">to</span>: <span class="title class_">String</span>,</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="comment">// template: &#x27;&lt;a :href=&quot;to&quot;&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/a&gt;&#x27;,</span></span><br><span class="line">     <span class="title function_">render</span>(<span class="params">h</span>) &#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="title function_">h</span>(</span><br><span class="line">         <span class="string">&quot;a&quot;</span>,</span><br><span class="line">         &#123;</span><br><span class="line">           <span class="attr">attrs</span>: &#123;</span><br><span class="line">             <span class="attr">href</span>: <span class="variable language_">this</span>.<span class="property">to</span>,</span><br><span class="line">           &#125;,</span><br><span class="line">         &#125;,</span><br><span class="line">         [<span class="variable language_">this</span>.<span class="property">$slots</span>.<span class="property">default</span>]</span><br><span class="line">       );</span><br><span class="line">     &#125;,</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="keyword">const</span> self = <span class="variable language_">this</span>;<span class="comment">//修改this的指向</span></span><br><span class="line">   <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;router-view&quot;</span>, &#123;</span><br><span class="line">     <span class="title function_">render</span>(<span class="params">h</span>) &#123;</span><br><span class="line">       <span class="comment">//根据当前的路径从routeMap中查找对应的组件.</span></span><br><span class="line">       <span class="keyword">const</span> component = self.<span class="property">routeMap</span>[self.<span class="property">data</span>.<span class="property">current</span>];</span><br><span class="line">       <span class="comment">//将组件转换成虚拟dom</span></span><br><span class="line">       <span class="keyword">return</span> <span class="title function_">h</span>(component);</span><br><span class="line">     &#125;,</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>下面，我们可以测试一下效果。</p><p>当我们单击链接的时候，发现了浏览器进行了刷新操作。表明向服务器发送了请求，而我们单页面应用中是不希望向服务器发送请求。</p><p>修改后的<code>initComponents</code>方法如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该方法需要一个参数为Vue的构造函数。</span></span><br><span class="line"> <span class="comment">//当然也可以使用全局的_Vue.</span></span><br><span class="line"> <span class="title function_">initComponents</span>(<span class="params">Vue</span>) &#123;</span><br><span class="line">   <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;router-link&quot;</span>, &#123;</span><br><span class="line">     <span class="attr">props</span>: &#123;</span><br><span class="line">       <span class="attr">to</span>: <span class="title class_">String</span>,</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="comment">// template: &#x27;&lt;a :href=&quot;to&quot;&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/a&gt;&#x27;,</span></span><br><span class="line">     <span class="title function_">render</span>(<span class="params">h</span>) &#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="title function_">h</span>(</span><br><span class="line">         <span class="string">&quot;a&quot;</span>,</span><br><span class="line">         &#123;</span><br><span class="line">           <span class="attr">attrs</span>: &#123;</span><br><span class="line">             <span class="attr">href</span>: <span class="variable language_">this</span>.<span class="property">to</span>,</span><br><span class="line">           &#125;,</span><br><span class="line">           <span class="attr">on</span>: &#123;</span><br><span class="line">             <span class="attr">click</span>: <span class="variable language_">this</span>.<span class="property">clickHandler</span>,</span><br><span class="line">           &#125;,</span><br><span class="line">         &#125;,</span><br><span class="line">         [<span class="variable language_">this</span>.<span class="property">$slots</span>.<span class="property">default</span>]</span><br><span class="line">       );</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attr">methods</span>: &#123;</span><br><span class="line">       <span class="title function_">clickHandler</span>(<span class="params">e</span>) &#123;</span><br><span class="line"></span><br><span class="line">         history.<span class="title function_">pushState</span>(&#123;&#125;, <span class="string">&quot;&quot;</span>, <span class="variable language_">this</span>.<span class="property">to</span>);</span><br><span class="line"></span><br><span class="line">         <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="property">data</span>.<span class="property">current</span> = <span class="variable language_">this</span>.<span class="property">to</span>;</span><br><span class="line"></span><br><span class="line">         <span class="comment">//阻止向服务器发送器。</span></span><br><span class="line">         e.<span class="title function_">preventDefault</span>();</span><br><span class="line">       &#125;,</span><br><span class="line">     &#125;,</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="keyword">const</span> self = <span class="variable language_">this</span>;</span><br><span class="line">   <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;router-view&quot;</span>, &#123;</span><br><span class="line">     <span class="title function_">render</span>(<span class="params">h</span>) &#123;</span><br><span class="line">       <span class="comment">//根据当前的路径从routeMap中查找对应的组件.</span></span><br><span class="line">       <span class="keyword">const</span> component = self.<span class="property">routeMap</span>[self.<span class="property">data</span>.<span class="property">current</span>];</span><br><span class="line">       <span class="comment">//将组件转换成虚拟dom</span></span><br><span class="line">       <span class="keyword">return</span> <span class="title function_">h</span>(component);</span><br><span class="line">     &#125;,</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>给<code>a</code>标签添加了单击事件。</p><h2 id="8、initEvent方法实现"><a href="#8、initEvent方法实现" class="headerlink" title="8、initEvent方法实现"></a>8、<code>initEvent</code>方法实现</h2><p>现在有一个问题就是，当点击浏览器中的后退与前进按钮的时候，地址栏中的地址发生了变化，但是对应的组件没有发生变化。</p><p>这时候要解决这个问题， 就需要用到<code>popstate</code>事件</p><p><code>popstate</code>事件，可以发现浏览器历史操作的变化，记录改变后的地址，单击前进或者是后退按钮的时候触发该事件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">initEvent</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;popstate&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">current</span> = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">pathname</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>针对<code>initEvent</code>方法的调用如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">createRouteMap</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">initComponents</span>(_Vue);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">initEvent</span>();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="三、VueRouter-模拟实现与源码解读"><a href="#三、VueRouter-模拟实现与源码解读" class="headerlink" title="三、VueRouter 模拟实现与源码解读"></a>三、VueRouter 模拟实现与源码解读</h1><p>在第二章中，我们已经对<code>VueRouter</code>做了一个基本的实现，通过这个基本的实现，已经对<code>VueRouter</code>的原理有了一个基本的理解。</p><p>但是，我们并没有实现路由嵌套的形式，这次我们重点来实现这一点。</p><h2 id="1、Vue-use-源码"><a href="#1、Vue-use-源码" class="headerlink" title="1、Vue.use( )源码"></a>1、<code>Vue.use( )</code>源码</h2><p>源码位置：<code>vue/src/core/global-api/use.js</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">initUse</span>(<span class="params">Vue: GlobalAPI</span>) &#123;</span><br><span class="line">  <span class="comment">//use方法的参数接收的是一个插件，该插件的类型可以是一个函数，也可以是一个对象</span></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property">use</span> = <span class="keyword">function</span> (<span class="params">plugin: <span class="built_in">Function</span> | <span class="built_in">Object</span></span>) &#123;</span><br><span class="line">    <span class="comment">//_installedPlugins数组中存放已经安装的插件。</span></span><br><span class="line">    <span class="keyword">const</span> installedPlugins =</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_installedPlugins</span> || (<span class="variable language_">this</span>.<span class="property">_installedPlugins</span> = []);</span><br><span class="line">    <span class="comment">//判断一下传递过来的插件是否在installedPlugins中存在，如果存在，则直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (installedPlugins.<span class="title function_">indexOf</span>(plugin) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// additional parameters</span></span><br><span class="line">    <span class="comment">//将arguments转换成数组，并且将数组中的第一项去除。</span></span><br><span class="line">    <span class="keyword">const</span> args = <span class="title function_">toArray</span>(<span class="variable language_">arguments</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//把this(也就是Vue，这里是通过Vue.use来调用的)插入到数组中的第一个元素的位置。</span></span><br><span class="line">    args.<span class="title function_">unshift</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="comment">//这时plugin是一个对象，看一下是否有install这个函数。</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> plugin.<span class="property">install</span> === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      <span class="comment">//如果有install这个函数，直接调用</span></span><br><span class="line">      <span class="comment">//这里通过apply将args数组中的每一项展开传递给install这个函数。</span></span><br><span class="line">      <span class="comment">// plugin.install(args[0],args[1])</span></span><br><span class="line">      <span class="comment">//而args[0],就是上面我们所插入的Vue.这一点与我们前面在模拟install方法的时候是一样的。</span></span><br><span class="line">      plugin.<span class="property">install</span>.<span class="title function_">apply</span>(plugin, args);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> plugin === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      <span class="comment">//如果plugin是一个函数，则直接通过apply去调用</span></span><br><span class="line">      plugin.<span class="title function_">apply</span>(<span class="literal">null</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将插件存储到installedPlugins数组中。</span></span><br><span class="line">    installedPlugins.<span class="title function_">push</span>(plugin);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、install-方法分析"><a href="#2、install-方法分析" class="headerlink" title="2、install 方法分析"></a>2、install 方法分析</h2><p>我们先来看一下<code>vue-router</code>的目录结构</p><p><img src="/2022/07/13/Vue/Vue%20Router/vueRouter/vuerouter%E7%9B%AE%E5%BD%95.png" alt="image-20200829210549006"></p><p>我们先来核心的文件。</p><p><code>components</code>目录下面，有两个文件。分别为<code>link.js</code>和<code>view.js</code>文件。</p><p><code>link.js</code>文件创建<code>RouterLink</code>组件</p><p><code>view.js</code>文件创建<code>RouterView</code>组件。</p><p><code>history</code>目录下的文件是记录路由的历史记录（<code>hash.js</code>文件是关于<code>hash</code>模式，<code>html5.js</code>关于<code>html5</code>的方式，<code>base.js</code>公共的内容，<code>abstract.js</code>是在服务端渲染中实现的路由历史记录）。</p><p><code>index.js</code>文件是用来创建<code>VueRouter</code></p><p><code>install.js</code>文件是关于<code>install</code>方法</p><p>我们自己模拟的<code>VueRouter</code>也实现上面的目录结构。</p><p>下面先来在<code>index.js</code>文件中实现基本代码。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">VueRouter</span> &#123;</span><br><span class="line">  <span class="comment">//在创建VueRouter对象的时候，会传递选项</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="comment">//获取routes选项，该选项中定义路由规则</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_options</span> = options.<span class="property">routes</span> || [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 注册路由变化的事件。该方法的参数是一个Vue实例，后期完善</span></span><br><span class="line">  <span class="title function_">init</span>(<span class="params">Vue</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面实现<code>install.js</code>基本代码（通过查看源代码来实现）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> _Vue = <span class="literal">null</span>; <span class="comment">//将其导出，在其它文件中也可以使用Vue实例，而不需要单独的引入Vue的js文件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">install</span>(<span class="params">Vue</span>) &#123;</span><br><span class="line">  <span class="comment">//获取Vue构造函数</span></span><br><span class="line">  _Vue = <span class="title class_">Vue</span>;</span><br><span class="line">  _Vue.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">    <span class="comment">//通过混入以后，所有的Vue实例中都会有beforeCreate方法</span></span><br><span class="line">    <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">//判断是否为Vue的实例，如果条件成立为Vue的实例，否则为其它对应的组件（因为在创建Vue实例的时候会传递选项）</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">router</span>) &#123;</span><br><span class="line">        <span class="comment">//通过查看源码发现，Vue的实例会挂在到当前的私有属性_routerRoot属性上</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_routerRoot</span> = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_router</span> = <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">router</span>;</span><br><span class="line">        <span class="comment">//调用index.js文件中定义的init方法</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_router</span>.<span class="title function_">init</span>(<span class="variable language_">this</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_routerRoot</span> = <span class="variable language_">this</span>.<span class="property">$parent</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">$parent</span>.<span class="property">_routerRoot</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、组件创建测试"><a href="#3、组件创建测试" class="headerlink" title="3、组件创建测试"></a>3、组件创建测试</h2><p>下面需要将<code>install</code>方法挂载到<code>VueRouter</code>上。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> install <span class="keyword">from</span> <span class="string">&quot;./install&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">VueRouter</span> &#123;</span><br><span class="line">  <span class="comment">//在创建VueRouter对象的时候，会传递选项</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="comment">//获取routes选项，该选项中定义路由规则</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_routes</span> = options.<span class="property">routes</span> || [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 注册路由变化的事件。</span></span><br><span class="line">  <span class="title function_">init</span>(<span class="params">Vue</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将install方法挂载到VueRouter上</span></span><br><span class="line"><span class="title class_">VueRouter</span>.<span class="property">install</span> = install;</span><br></pre></td></tr></table></figure><p>下面，我们可以简单实现一下<code>Router-link</code>组件与<code>Router-view</code>组件，来做一个简单的测试。<strong>（接下来讲解如下内容）</strong></p><p><code>components</code>目录下的<code>view.js</code>文件。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params">h</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&quot;div&quot;</span>, <span class="string">&quot;router-view&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>以上是<code>Router-View</code>组件的基本功能，后面在继续完善。</p><p><code>link.js</code>文件的实现如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">to</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">render</span>(<span class="params">h</span>) &#123;</span><br><span class="line">    <span class="comment">//通过插槽获取`a`标签内的文本。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&quot;a&quot;</span>, &#123; <span class="attr">domProps</span>: &#123; <span class="attr">href</span>: <span class="string">&quot;#&quot;</span> + <span class="variable language_">this</span>.<span class="property">to</span> &#125; &#125;, [<span class="variable language_">this</span>.<span class="property">$slots</span>.<span class="property">default</span>]);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在<code>install.js</code>文件中，导入上面的组件进行测试。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">View</span> <span class="keyword">from</span> <span class="string">&quot;./components/view&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Link</span> <span class="keyword">from</span> <span class="string">&quot;./components/link&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> _Vue = <span class="literal">null</span>; <span class="comment">//将其导出，在其它文件中也可以使用Vue实例，而不需要单独的引入Vue的js文件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">install</span>(<span class="params">Vue</span>) &#123;</span><br><span class="line">  <span class="comment">//获取Vue构造函数</span></span><br><span class="line">  _Vue = <span class="title class_">Vue</span>;</span><br><span class="line">  _Vue.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">    <span class="comment">//通过混入以后，所有的Vue实例中都会有beforeCreate方法</span></span><br><span class="line">    <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">//判断是否为Vue的实例，如果条件成立为Vue的实例，否则为其它对应的组件（因为在创建Vue实例的时候会传递选项）</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">router</span>) &#123;</span><br><span class="line">        <span class="comment">//通过查看源码发现，Vue的实例会挂在到当前的私有属性_routerRoot属性上</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_routerRoot</span> = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_router</span> = <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">router</span>;</span><br><span class="line">        <span class="comment">//调用index.js文件中定义的init方法</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_router</span>.<span class="title function_">init</span>(<span class="variable language_">this</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_routerRoot</span> = <span class="variable language_">this</span>.<span class="property">$parent</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">$parent</span>.<span class="property">_routerRoot</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">//完成组件的注册</span></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;RouterView&quot;</span>, <span class="title class_">View</span>);</span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;RouterLink&quot;</span>, <span class="title class_">Link</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，导入组件，并且完成组件的注册。</p><p>下面，我们测试一下。</p><p>在<code>src</code>目录下，在<code>router.js</code>文件中导入自己定义的<code>VueRouter</code>.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Router from &quot;./my-vue-router&quot;;</span><br></pre></td></tr></table></figure><h2 id="4、解析路由规则"><a href="#4、解析路由规则" class="headerlink" title="4、解析路由规则"></a>4、解析路由规则</h2><p>下面，我们要做的就是对所有的路由规则进行解析，将其解析到一个数组中。方便根据地址找到对应的组件。</p><p>在源码的<code>index.js</code>文件中，创建了<code>VueRouter</code>类，对应的构造方法中，有如下代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.matcher = createMatcher(options.routes || [], this)</span><br></pre></td></tr></table></figure><p><code>createMatcher</code>方法是在<code>create-matcher.js</code>文件中创建的。</p><p>该方法返回的<code>matcher</code> 就是一个匹配器，其中有两个成员，<code>match</code>,另外一个是<code>addRoutes</code></p><p><code>match</code>:根据路由地址匹配相应的路由规则对象。</p><p><code>addRoutes</code>动态添加路由</p><p>首先在我们自己的<code>index.js</code>文件中添加如下的代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> install <span class="keyword">from</span> <span class="string">&quot;./install&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> createMatcher <span class="keyword">from</span> <span class="string">&quot;./create-matcher&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">VueRouter</span> &#123;</span><br><span class="line">  <span class="comment">//在创建VueRouter对象的时候，会传递选项</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="comment">//获取routes选项，该选项中定义路由规则</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_routes</span> = options.<span class="property">routes</span> || [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">matcher</span> = <span class="title function_">createMatcher</span>(<span class="variable language_">this</span>.<span class="property">_routes</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 注册路由变化的事件。</span></span><br><span class="line">  <span class="title function_">init</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="comment">//init(Vue)&#123;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将install方法挂载到VueRouter上</span></span><br><span class="line"><span class="title class_">VueRouter</span>.<span class="property">install</span> = install;</span><br></pre></td></tr></table></figure><p>在上面的代码中，导入了<code>createMatcher</code>方法。</p><p>并且在调用该方法的时候传递了路由规则。</p><p><code>create-matcher.js</code> 文件的代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> createRouteMap <span class="keyword">from</span> <span class="string">&quot;./create-route-map&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">createMatcher</span>(<span class="params">routes</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; pathList, pathMap &#125; = <span class="title function_">createRouteMap</span>(routes);</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">match</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">addRoutes</span>(<span class="params">routes</span>) &#123;</span><br><span class="line">    <span class="title function_">createRouteMap</span>(routes, pathList, pathMap);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    match,</span><br><span class="line">    addRoutes,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面，我们需要在<code>create-route-map.js</code> 文件中实现<code>createRouteMap</code>这个方法。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">createRouteMap</span>(<span class="params">routes, oldPathList, oldPathMap</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> pathList = oldPathList || [];</span><br><span class="line">  <span class="keyword">const</span> pathMap = oldPathMap || &#123;&#125;;</span><br><span class="line">  <span class="comment">//遍历所有的路由规则，进行解析。同时还要考虑children的形式，</span></span><br><span class="line">  <span class="comment">//所以这里需要使用递归的方式。</span></span><br><span class="line">  routes.<span class="title function_">forEach</span>(<span class="function">(<span class="params">route</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">addRouteRecord</span>(route, pathList, pathMap);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    pathList,</span><br><span class="line">    pathMap,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addRouteRecord</span>(<span class="params">route, pathList, pathMap, parentRecord</span>) &#123;</span><br><span class="line">  <span class="comment">//从路由规则中获取path。</span></span><br><span class="line">  <span class="keyword">const</span> path = parentRecord ? <span class="string">`<span class="subst">$&#123;parentRecord.path&#125;</span>/<span class="subst">$&#123;route.path&#125;</span>`</span> : route.<span class="property">path</span>;</span><br><span class="line">  <span class="comment">//构建记录</span></span><br><span class="line">  <span class="keyword">const</span> record = &#123;</span><br><span class="line">    path,</span><br><span class="line">    <span class="attr">component</span>: route.<span class="property">component</span>,</span><br><span class="line">    <span class="attr">parent</span>: parentRecord, <span class="comment">//如果是子路由的话，记录子路由对应的父record对象（该对象中有path,component）,相当于记录了父子关系</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//如果已经有了path,相同的path直接跳过</span></span><br><span class="line">  <span class="keyword">if</span> (!pathMap[path]) &#123;</span><br><span class="line">    pathList.<span class="title function_">push</span>(path);</span><br><span class="line">    pathMap[path] = record;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//判断route中是否有子路由</span></span><br><span class="line">  <span class="keyword">if</span> (route.<span class="property">children</span>) &#123;</span><br><span class="line">    <span class="comment">//遍历子路由，把子路由添加到pathList与pathMap中。</span></span><br><span class="line">    route.<span class="property">children</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">childRoute</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">addRouteRecord</span>(childRoute, pathList, pathMap, record);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面测试一下上面的代码。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> createRouteMap <span class="keyword">from</span> <span class="string">&quot;./create-route-map&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">createMatcher</span>(<span class="params">routes</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; pathList, pathMap &#125; = <span class="title function_">createRouteMap</span>(routes);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;pathList==&quot;</span>, pathList);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;pathMap==&quot;</span>, pathMap);</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">match</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">addRoutes</span>(<span class="params">routes</span>) &#123;</span><br><span class="line">    <span class="title function_">createRouteMap</span>(routes, pathList, pathMap);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    match,</span><br><span class="line">    addRoutes,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们打印了<code>pathList</code>与<code>pathMap</code>.</p><p>当然，现在在我们所定义的路由规则中，还没有添加<code>children</code>,构建相应的子路由。下面重新修改一下。</p><p>在项目根目录下的<code>router.js</code>文件中，添加对应的子路由规则。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="comment">// import Router from &quot;vue-router&quot;;</span></span><br><span class="line"><span class="comment">// import Router from &quot;./vuerouter&quot;;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&quot;./my-vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&quot;./components/Login.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&quot;./components/Home.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&quot;./components/About.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Users</span> <span class="keyword">from</span> <span class="string">&quot;./components/Users&quot;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Router</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">  <span class="comment">// model: &quot;history&quot;,</span></span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&quot;/login&quot;</span>, <span class="attr">component</span>: <span class="title class_">Login</span> &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/about&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">About</span>,</span><br><span class="line">      <span class="attr">children</span>: [&#123; <span class="attr">path</span>: <span class="string">&quot;users&quot;</span>, <span class="attr">component</span>: <span class="title class_">Users</span> &#125;],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这时候可以查看对应的输出结果。</p><h2 id="5、match函数实现"><a href="#5、match函数实现" class="headerlink" title="5、match函数实现"></a>5、<code>match</code>函数实现</h2><p>在<code>create-matcher.js</code>文件中，我们实现了<code>createRouteMap</code>方法，同时还需要实现<code>match</code>方法。</p><p><code>match</code>方法的作用就是根据路由地址，匹配一个路由对象。其实就是从<code>pathMap</code>中根据路由地址，找出对应的路由记录。路由记录中记录了组件信息，找到以后就可以完成组件的创建，渲染了。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">match</span>(<span class="params">path</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> record = pathMap[path];</span><br><span class="line">  <span class="keyword">if</span> (record) &#123;</span><br><span class="line">    <span class="comment">//根据路由地址，创建route路由规则对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">createRoute</span>(record, path);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">createRoute</span>(<span class="literal">null</span>, path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们调用<code>match</code>方法的时候，会传递过来一个路径，我们根据这个路径可以从<code>pathMap</code>中找到对应的路由记录信息(这块在上一小节已经创建完毕)，如果找到了，我们还需要做进一步的处理，为什么呢？因为，我们传递过来的路径有可能是子路径，这时不光要获取到对应的子路由信息，我们还需要去查找对应的父路由的信息。所以这里需要进一步的处理，关于这块的处理封装到了<code>createRoute</code>这个方法中，而该方法在其它位置还需要，所以我们定义到<code>util</code>这个目录下<code>import createRoute from &quot;./util/route&quot;;</code>。</p><p><code>create-matcher.js</code>文件完整代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> createRouteMap <span class="keyword">from</span> <span class="string">&quot;./create-route-map&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> createRoute <span class="keyword">from</span> <span class="string">&quot;./util/route&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">createMatcher</span>(<span class="params">routes</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; pathList, pathMap &#125; = <span class="title function_">createRouteMap</span>(routes);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;pathList==&quot;</span>, pathList);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;pathMap==&quot;</span>, pathMap);</span><br><span class="line">  <span class="comment">//实现match方法</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">match</span>(<span class="params">path</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> record = pathMap[path];</span><br><span class="line">    <span class="keyword">if</span> (record) &#123;</span><br><span class="line">      <span class="comment">//根据路由地址，创建route路由规则对象</span></span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">createRoute</span>(record, path);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">createRoute</span>(<span class="literal">null</span>, path);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">addRoutes</span>(<span class="params">routes</span>) &#123;</span><br><span class="line">    <span class="title function_">createRouteMap</span>(routes, pathList, pathMap);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    match,</span><br><span class="line">    addRoutes,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面我们需要在<code>my-vue-router</code>目录下面在创建一个<code>util</code>目录，在该目录下面创建<code>route.js</code>文件，该文件实现的代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">createRoute</span>(<span class="params">record, path</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> matched = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (record) &#123;</span><br><span class="line">    matched.<span class="title function_">unshift</span>(record);</span><br><span class="line">    record = record.<span class="property">parent</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    path,</span><br><span class="line">    matched,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：<code>match</code>这个方法的作用就是根据路径，创建出路由规则对象，而所谓的路由规则对象其实就是包含了路径以及对应的路由记录的信息(这里有可能包含了父路由以及子路由记录，这块内容存储到一个数组中)。</p><p>以后，我们就可以根据路径直接获取到包含了整个路由记录的这个数组，从而可以将对应的组件全部创建出来。</p><h2 id="6、历史记录处理"><a href="#6、历史记录处理" class="headerlink" title="6、历史记录处理"></a>6、历史记录处理</h2><p>关于路由有三种模式：<code>hash</code>模式，<code>html5</code>模式，<code>abstract</code>模式（该模式与服务端渲染有关）</p><p>在这里我们实现<code>hash</code>模式的历史记录管理，不管是哪种模式，都有相同的内容，这里我们相同的内容定义到</p><p>父类中。</p><p>在该父类中主要有如下内容：</p><p><code>router</code>属性：路由对象（<code>ViewRouter</code>）</p><p><code>current</code>属性，记录当前路径对应的路由规则对象<code>&#123;path:&#39;/&#39;,matched:[]&#125;</code>,关于该对象，我们在前面已经处理完了。也就是在<code>createRoute</code>方法中返回的内容。</p><p><code>transitionTo()</code></p><p>跳转到指定的路径，根据当前路径获取匹配的路由规则对象<code>route</code>，然后更新视图。</p><p>在<code>my-vue-router</code>目录下的，<code>history</code>目录下的<code>base.js</code>文件，编写如下的代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> createRoute <span class="keyword">from</span> <span class="string">&quot;../util/route&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">History</span> &#123;</span><br><span class="line">  <span class="comment">// router路由对象ViewRouter</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">router</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">router</span> = router;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">current</span> = <span class="title function_">createRoute</span>(<span class="literal">null</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">transitionTo</span>(<span class="params">path, onComplete</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">current</span> = <span class="variable language_">this</span>.<span class="property">router</span>.<span class="property">matcher</span>.<span class="title function_">match</span>(path);</span><br><span class="line">    <span class="comment">//该回调函数在调用transitionTo方法的时候，会传递过来。</span></span><br><span class="line">    onComplete &amp;&amp; <span class="title function_">onComplete</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>父类已经实现了，下面实现对应的子类。也就是<code>HashHistory</code></p><p><code>HashHistory</code>继承<code>History</code>, 同时要确保首次访问的地址为<code>#/</code>.</p><p>在<code>History</code>中还需要定义两个方法，第一个方法为：<code>getCurrentLocation( )</code> 获取当前的路由地址(<code>#</code> 后面的部分)</p><p><code>setUpListener( )</code>方法监听路由地址改变的事件（<code>hashchange</code>）。</p><p>在<code>history</code>目录下的<code>hash.js</code>文件中的代码实现如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">History</span> <span class="keyword">from</span> <span class="string">&quot;./base&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">HashHistory</span> <span class="keyword">extends</span> <span class="title class_ inherited__">History</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">router</span>) &#123;</span><br><span class="line">    <span class="comment">//将路由对象传递给父类的构造函数</span></span><br><span class="line">    <span class="variable language_">super</span>(router);</span><br><span class="line">    <span class="comment">//确保 首次 访问地址加上 #/  （//由于没有添加this,为普通方法）</span></span><br><span class="line">    <span class="title function_">ensureSlash</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取当前的路由地址 （# 后面的部分）所以这里需要去除#</span></span><br><span class="line">  <span class="title function_">getCurrentLocation</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span>.<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 监听hashchange事件</span></span><br><span class="line">  <span class="comment">//也就是监听路由地址的变化</span></span><br><span class="line">  <span class="title function_">setUpListener</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;hashchange&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//当路由地址发生变化后，跳转到新的路由地址。</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">transitionTo</span>(<span class="variable language_">this</span>.<span class="title function_">getCurrentLocation</span>());</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ensureSlash</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//判断当前是否有hash</span></span><br><span class="line">  <span class="comment">// 如果单击的是链接，肯定会有hash</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span> = <span class="string">&quot;/&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、Init方法实现"><a href="#7、Init方法实现" class="headerlink" title="7、Init方法实现"></a>7、<code>Init</code>方法实现</h2><p>我们知道当创建<code>VueRouter</code> 的时候，需要可以传递<code>mode</code>，来指定路由的形式，例如是<code>hash</code>模式还是<code>html5</code>模式等。</p><p>所以这里需要根据指定的<code>mode</code>的模式，来选择<code>history</code>目录中中不同<code>js</code>来处理。</p><p>所以在<code>my-vue-router</code>目录中的<code>index.js</code>文件中，做如下的修改：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> install <span class="keyword">from</span> <span class="string">&quot;./install&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> createMatcher <span class="keyword">from</span> <span class="string">&quot;./create-matcher&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HashHistory</span> <span class="keyword">from</span> <span class="string">&quot;./history/hash&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HTML5History</span> <span class="keyword">from</span> <span class="string">&quot;./history/html5&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">VueRouter</span> &#123;</span><br><span class="line">  <span class="comment">//在创建VueRouter对象的时候，会传递选项</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="comment">//获取routes选项，该选项中定义路由规则</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_routes</span> = options.<span class="property">routes</span> || [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">matcher</span> = <span class="title function_">createMatcher</span>(<span class="variable language_">this</span>.<span class="property">_routes</span>);</span><br><span class="line">    <span class="comment">//获取传递过来的选项中的mode,mode中决定了用户设置的路由的形式。</span></span><br><span class="line">    <span class="comment">//这里给VueRouter添加了mode属性</span></span><br><span class="line">    <span class="keyword">const</span> mode = (<span class="variable language_">this</span>.<span class="property">mode</span> = options.<span class="property">mode</span> || <span class="string">&quot;hash&quot;</span>);</span><br><span class="line">    <span class="keyword">switch</span> (mode) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;hash&quot;</span>:</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">history</span> = <span class="keyword">new</span> <span class="title class_">HashHistory</span>(<span class="variable language_">this</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;history&quot;</span>:</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">history</span> = <span class="keyword">new</span> <span class="title class_">HTML5History</span>(<span class="variable language_">this</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;mode error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 注册路由变化的事件。</span></span><br><span class="line">  <span class="title function_">init</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="comment">//init(Vue)&#123;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将install方法挂载到VueRouter上</span></span><br><span class="line"><span class="title class_">VueRouter</span>.<span class="property">install</span> = install;</span><br></pre></td></tr></table></figure><p>首先导入<code>HashHistory</code> 与<code>HTML5History</code>.</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">HashHistory</span> <span class="keyword">from</span> <span class="string">&quot;./history/hash&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HTML5History</span> <span class="keyword">from</span> <span class="string">&quot;./history/html5&quot;</span>;</span><br></pre></td></tr></table></figure><p>下面获取选项中的<code>mode</code>,如果在创建<code>VueRouter</code>对象的时候，没有指定<code>mode</code>,那么默认的值为<code>hash</code>.</p><p>下面就对获取到的<code>mode</code>进行判断，根据<code>mode</code>的不同的值，创建不同的<code>history</code>的实例。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取传递过来的选项中的mode,mode中决定了用户设置的路由的形式。</span></span><br><span class="line"><span class="comment">//这里给VueRouter添加了mode属性</span></span><br><span class="line"><span class="keyword">const</span> mode = (<span class="variable language_">this</span>.<span class="property">mode</span> = options.<span class="property">mode</span> || <span class="string">&quot;hash&quot;</span>);</span><br><span class="line"><span class="keyword">switch</span> (mode) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;hash&quot;</span>:</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">history</span> = <span class="keyword">new</span> <span class="title class_">HashHistory</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;history&quot;</span>:</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">history</span> = <span class="keyword">new</span> <span class="title class_">HTML5History</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;mode error&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时<code>html5.js</code>文件，添加了基本的代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">History</span> <span class="keyword">from</span> <span class="string">&quot;./base&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">HTML5History</span> <span class="keyword">extends</span> <span class="title class_ inherited__">History</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>关于<code>Html5</code>的形式这里不在实现了。</p><p>下面完善一下<code>init</code>方法</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注册路由变化的事件。</span></span><br><span class="line"> <span class="title function_">init</span>(<span class="params"></span>) &#123;&#125;</span><br></pre></td></tr></table></figure><p>具体的实现代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注册路由变化的事件(初始化事件监听器，监听路由地址的变化)。</span></span><br><span class="line"><span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> history = <span class="variable language_">this</span>.<span class="property">history</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">setUpListener</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    history.<span class="title function_">setUpListener</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">  history.<span class="title function_">transitionTo</span>(</span><br><span class="line">    history.<span class="title function_">getCurrentLocation</span>(),</span><br><span class="line">    <span class="comment">//如果直接history.setUpListener</span></span><br><span class="line">    <span class="comment">// 这样的话setUpListener里面的this会有问题。</span></span><br><span class="line">    setUpListener</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，调用了<code>transitionTo</code>方法的原因是，在<code>hash.js</code>文件中的<code>ensureSlash</code>方法中，完成了一次地址的修改，所以这里需要跳转一次。</p><p>同时完成了<code>hashchange</code>事件的绑定（路由变化的事件）。</p><p>下面可以进行测试一下，在<code>base.js</code>文件中的<code>transitionTo</code>方法中，打印出<code>current</code>属性的值。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="title function_">transitionTo</span>(<span class="params">path, onComplete</span>) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">current</span> = <span class="variable language_">this</span>.<span class="property">router</span>.<span class="property">matcher</span>.<span class="title function_">match</span>(path);</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;current===&quot;</span>, <span class="variable language_">this</span>.<span class="property">current</span>);</span><br><span class="line"><span class="comment">//该回调函数在调用transitionTo方法的时候，会传递过来。</span></span><br><span class="line">   onComplete &amp;&amp; <span class="title function_">onComplete</span>();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>下面，在浏览器的地址栏中输入了不同的<code>URL</code>地址后，在控制台上呈现出了不同的路由规则对象，也就是路由记录信息。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/#/about/users</span><br></pre></td></tr></table></figure><p>输入以上地址，该地址为子路由的地址，最终也输出了对应的父路由的记录信息。</p><p>后期就可以获取具体的组件来进行渲染。</p><h2 id="8、设置响应式的-route"><a href="#8、设置响应式的-route" class="headerlink" title="8、设置响应式的_route"></a>8、设置响应式的_route</h2><p>下面我们要做的就是渲染组件。</p><p>这里我们先创建一个与路由有关的响应式属性，当路由地址发生变化了，对应的该属性也要发生变化，从而完成页面的重新渲染。</p><p>在<code>install.js</code>文件中添加如下的代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property">util</span>.<span class="title function_">defineReactive</span>(<span class="variable language_">this</span>, <span class="string">&quot;_route&quot;</span>, <span class="variable language_">this</span>.<span class="property">_router</span>.<span class="property">history</span>.<span class="property">current</span>);</span><br></pre></td></tr></table></figure><p>以上完成了响应式属性的创建，但是要注意的是<code>defineReactive</code>方法为<code>Vue</code>的内部方法，不建议平时通过该方法来创建响应式对象。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//判断是否为Vue的实例，如果条件成立为Vue的实例，否则为其它对应的组件（因为在创建Vue实例的时候会传递选项）</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">router</span>) &#123;</span><br><span class="line">      <span class="comment">//通过查看源码发现，Vue的实例会挂在到当前的私有属性_routerRoot属性上</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_routerRoot</span> = <span class="variable language_">this</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_router</span> = <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">router</span>;</span><br><span class="line">      <span class="comment">//调用index.js文件中定义的init方法</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_router</span>.<span class="title function_">init</span>(<span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">//在Vue的实例上创建一个响应式的属性`_route`.</span></span><br><span class="line">      <span class="title class_">Vue</span>.<span class="property">util</span>.<span class="title function_">defineReactive</span>(<span class="variable language_">this</span>, <span class="string">&quot;_route&quot;</span>, <span class="variable language_">this</span>.<span class="property">_router</span>.<span class="property">history</span>.<span class="property">current</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>下面要考虑的就是当路由地址发生了变化后，需要修改<code>_route</code>属性的值。</p><p>在哪完成<code>_route</code>属性值的修改呢？</p><p>在<code>base.js</code>文件中，因为在该文件中定义了<code>transitionTo</code>方法，而该方法就是用来完成地址的跳转，同时完成组件的渲染。</p><p><code>base.js</code>文件修改后的代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> createRoute <span class="keyword">from</span> <span class="string">&quot;../util/route&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">History</span> &#123;</span><br><span class="line">  <span class="comment">// router路由对象ViewRouter</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">router</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">router</span> = router;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">current</span> = <span class="title function_">createRoute</span>(<span class="literal">null</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">    <span class="comment">//这个回调函数是在hashhistory中赋值，作用是更改vue实例上的_route，_route的值发生变化，视图会进行刷新操作</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cb</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//给cb赋值</span></span><br><span class="line">  <span class="title function_">listen</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cb</span> = cb;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">transitionTo</span>(<span class="params">path, onComplete</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">current</span> = <span class="variable language_">this</span>.<span class="property">router</span>.<span class="property">matcher</span>.<span class="title function_">match</span>(path);</span><br><span class="line">    <span class="comment">// 调用cb</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cb</span> &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">cb</span>(<span class="variable language_">this</span>.<span class="property">current</span>);</span><br><span class="line">    <span class="comment">// console.log(&quot;current===&quot;, this.current);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//该回调函数在调用transitionTo方法的时候，会传递过来。</span></span><br><span class="line">    onComplete &amp;&amp; <span class="title function_">onComplete</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>History</code>中的构造方法中初始化<code>cb</code>函数。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.cb = null;</span><br></pre></td></tr></table></figure><p>定义<code>listen</code>方法给<code>cb</code>函数赋值。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//给cb赋值</span></span><br><span class="line">  <span class="title function_">listen</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cb</span> = cb;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在<code>transitionTo</code> 方法中调用<code>cb</code>函数，同时传递获取到的当前的路由规则对象也就是路由记录信息。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">cb</span> &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">cb</span>(<span class="variable language_">this</span>.<span class="property">current</span>);</span><br></pre></td></tr></table></figure><p>在什么地方调用<code>listen</code>方法呢？</p><p>在<code>index.js</code>文件中的<code>init</code>方法中完成<code>listen</code>方法的调用。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注册路由变化的事件(初始化事件监听器，监听路由地址的变化)。</span></span><br><span class="line">  <span class="title function_">init</span>(<span class="params">app</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> history = <span class="variable language_">this</span>.<span class="property">history</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">setUpListener</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      history.<span class="title function_">setUpListener</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">    history.<span class="title function_">transitionTo</span>(</span><br><span class="line">      history.<span class="title function_">getCurrentLocation</span>(),</span><br><span class="line">      <span class="comment">//如果直接history.setUpListener</span></span><br><span class="line">      <span class="comment">// 这样的话setUpListener里面的this会有问题。</span></span><br><span class="line">      setUpListener</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">//调用父类的中的listen方法</span></span><br><span class="line">    history.<span class="title function_">listen</span>(<span class="function">(<span class="params">route</span>) =&gt;</span> &#123;</span><br><span class="line">      app.<span class="property">_route</span> = route;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中调用了父类中的<code>listen</code>方法，然后将箭头函数传递到了<code>listen</code>中。</p><p>这时候，在<code>transitionTo</code>方法中调用<code>cb</code>，也就是调用箭头函数，这时传递过来的参数<code>route</code>,为当前更改后的路由规则信息，交给了<code>app</code>中的<code>_route</code>属性。</p><p><code>app</code>这个参数其实就是<code>Vue</code>的实例，因为在<code>install.js</code>文件中调用了<code>init</code>方法，并且传递的就是<code>Vue</code>的实例。</p><p>这样就完成了对<code>Vue</code>实例上的响应式属性<code>_route</code>值的修改，从而会更新组件。</p><h2 id="9、-route-router创建"><a href="#9、-route-router创建" class="headerlink" title="9、$route/$router创建"></a>9、<code>$route/$router</code>创建</h2><p>创建<code>$route</code>与<code>$router</code>的目的是能够在所有的<code>Vue</code>实例(组件)中，可以获取到。</p><p><code>$route</code>是路由规则对象，包含了<code>path</code>,<code>component</code>等内容</p><p><code>$router</code>为路由对象（<code>ViewRouter</code>对象）。</p><p>通过查看源码(<code>install.js</code>)可以发现，其实就是将<code>$router</code> 与<code>$route</code>挂载到了<code>Vue</code>的原型上。</p><p>所以可以直接将源码内容复制过来就可以了。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&quot;$router&quot;</span>, &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_routerRoot</span>.<span class="property">_router</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&quot;$route&quot;</span>, &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_routerRoot</span>.<span class="property">_route</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>通过上面的代码，可以看到<code>$route</code>与<code>$router</code> 都是只读的，因为对应的值，在前面已经设置完毕，这里只是获取。</p><p><code>$router</code> 是通过<code>_routerRoot</code>来获取。</p><p><code>$route</code>是通过<code>_routerRoot._route</code>来获取。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property">util</span>.<span class="title function_">defineReactive</span>(<span class="variable language_">this</span>, <span class="string">&quot;_route&quot;</span>, <span class="variable language_">this</span>.<span class="property">_router</span>.<span class="property">history</span>.<span class="property">current</span>);</span><br></pre></td></tr></table></figure><p>在<code>Vue</code>对象上创建了<code>_route</code>属性，该属性的值为路由规则内容</p><h2 id="10、Router-View创建"><a href="#10、Router-View创建" class="headerlink" title="10、Router-View创建"></a>10、<code>Router-View</code>创建</h2><p><code>router-view</code>就是一个占位符，会用具体的组件来替换该占位符。</p><p><code>router-view</code>的创建过程如下：</p><ul><li>获取当前组件的<code>$route</code>路由规则对象</li><li>找到路由规则对象里面的<code>matched</code> 匹配的<code>record</code>(里面有 component)</li><li>如果是<code>/about</code> ,<code>matched</code>匹配到一个<code>record</code>，直接渲染对应的组件</li><li>如果是<code>/about/users</code>,<code>matched</code> 匹配到两个<code>record</code>（第一个是父组件，第二个是子组件）</li></ul><p><code>my-vue-router/components</code>目录下的<code>view.js</code>代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params">h</span>) &#123;</span><br><span class="line">    <span class="comment">//获取当前匹配的路由规则对象</span></span><br><span class="line">    <span class="keyword">const</span> route = <span class="variable language_">this</span>.<span class="property">$route</span>;</span><br><span class="line">    <span class="comment">//获取路由记录对象.只有一个内容，所以获取的是`matched`中的第一项。</span></span><br><span class="line">    <span class="keyword">const</span> record = route.<span class="property">matched</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (!record) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">h</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取记录中对应的组件</span></span><br><span class="line">    <span class="keyword">const</span> component = record.<span class="property">component</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(component);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>以上的代码处理的是没有子路由的情况。</p><p>下面，看一下子路由情况的处理。</p><p>当然在编写子路由的处理代码之前，我们先把案例中的路由完善一下。</p><p>在<code>src</code>目录下的<code>App.vue</code>这个组件中，添加一个“关于”的链接。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;nav&quot;&gt;</span><br><span class="line">      &lt;router-link to=&quot;/&quot;&gt;Home&lt;/router-link&gt;</span><br><span class="line">      &lt;router-link to=&quot;/login&quot;&gt;Login&lt;/router-link&gt;</span><br><span class="line">      &lt;router-link to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>对应在<code>About</code> 这个组件中，完成子路由应用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    关于组件</span><br><span class="line">    &lt;router-link to=&quot;/about/users&quot;&gt;用户&lt;/router-link&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>下面完善一下对子路由的处理。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params">h</span>) &#123;</span><br><span class="line">    <span class="comment">//获取当前匹配的路由规则对象</span></span><br><span class="line">    <span class="keyword">const</span> route = <span class="variable language_">this</span>.<span class="property">$route</span>;</span><br><span class="line">    <span class="keyword">let</span> depth = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//记录当前组件为RouterView</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">routerView</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">let</span> parent = <span class="variable language_">this</span>.<span class="property">$parent</span>;</span><br><span class="line">    <span class="keyword">while</span> (parent) &#123;</span><br><span class="line">      <span class="keyword">if</span> (parent.<span class="property">routerView</span>) &#123;</span><br><span class="line">        depth++;</span><br><span class="line">      &#125;</span><br><span class="line">      parent = parent.<span class="property">$parent</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取路由记录对象.</span></span><br><span class="line">    <span class="comment">// 如果是子路由，例如：子路由/about/users</span></span><br><span class="line">    <span class="comment">//子路由是有两部分内容，matched[0]:是父组件内容，matched[1]是子组件内容</span></span><br><span class="line">    <span class="keyword">const</span> record = route.<span class="property">matched</span>[depth];</span><br><span class="line">    <span class="keyword">if</span> (!record) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">h</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取记录中对应的组件</span></span><br><span class="line">    <span class="keyword">const</span> component = record.<span class="property">component</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(component);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>假如，现在我们在浏览器的地址栏中输入了：<code>http://localhost:8080/#/about</code>地址，</p><p>是没有父组件，那么<code>depth</code>属性的值为 0，这时候获取的第一个组件然后进行渲染。</p><p>如果地址栏的内容为：<code>http://localhost:8080/#/about/users</code> 这时候有子组件。对应的获取对应的父组件内容，开始进行循环。</p><p>在循环的时候，做了一个判断，判断的条件就是当前的父组件必须为:<code>RouterView</code>组件（子组件中<code>router-view</code>与父组件中的<code>router-view</code>构成了父子关系），才让<code>depth</code>加 1，然后取出子组件进行渲染。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 引擎</title>
      <link href="/2022/07/07/JavaScript/JavaScript%E5%BC%95%E6%93%8E/"/>
      <url>/2022/07/07/JavaScript/JavaScript%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="一、浏览器工作原理"><a href="#一、浏览器工作原理" class="headerlink" title="一、浏览器工作原理"></a>一、浏览器工作原理</h1><p>浏览器执行过程：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/21707377/1638355192875-ac69b240-3bea-4057-a517-cf6669b37f43.png#clientId=uf3c6c3d5-c0ad-4&from=paste&height=426&id=u06d06c92&margin=%5Bobject%20Object%5D&name=image.png&originHeight=568&originWidth=1345&originalType=binary&ratio=1&size=449837&status=done&style=shadow&taskId=uf9ed310b-45db-4a4e-8046-de278b8713a&width=1009" alt="image.png"></p><h1 id="二、认识浏览器内核"><a href="#二、认识浏览器内核" class="headerlink" title="二、认识浏览器内核"></a>二、认识浏览器内核</h1><h3 id="我们经常会说：不同的浏览器有不同的内核组成"><a href="#我们经常会说：不同的浏览器有不同的内核组成" class="headerlink" title="我们经常会说：不同的浏览器有不同的内核组成"></a>我们经常会说：不同的浏览器有不同的内核组成</h3><ul><li>Gecko：早期被 Netscape 和 Mozilla Firefox 浏览器浏览器使用；</li><li>Trident：微软开发，被 IE4~IE11 浏览器使用，但是 Edge 浏览器已经转向 Blink；</li><li>Webkit：苹果基于 KHTML 开发、开源的，用于 Safari，Google Chrome 之前也在使用；</li><li>Blink：是 Webkit 的一个分支，Google 开发，目前应用于 Google Chrome、Edge、Opera 等；</li><li>等等…</li></ul><h3 id="事实上，我们经常说的浏览器内核指的是浏览器的排版引擎："><a href="#事实上，我们经常说的浏览器内核指的是浏览器的排版引擎：" class="headerlink" title="事实上，我们经常说的浏览器内核指的是浏览器的排版引擎："></a>事实上，我们经常说的浏览器内核指的是浏览器的排版引擎：</h3><p><strong>排版引擎</strong>（layout engine），也称为<strong>浏览器引擎</strong>（browser engine）、<strong>页面渲染引擎</strong>（rendering engine）<br>或<strong>样版引擎</strong>。</p><h1 id="三、浏览器渲染过程"><a href="#三、浏览器渲染过程" class="headerlink" title="三、浏览器渲染过程"></a>三、浏览器渲染过程</h1><h3 id="但是在这个执行过程中，HTML-解析的时候遇到了-JavaScript-标签，应该怎么办呢？"><a href="#但是在这个执行过程中，HTML-解析的时候遇到了-JavaScript-标签，应该怎么办呢？" class="headerlink" title="但是在这个执行过程中，HTML 解析的时候遇到了 JavaScript 标签，应该怎么办呢？"></a>但是在这个执行过程中，HTML 解析的时候遇到了 JavaScript 标签，应该怎么办呢？</h3><p><strong>会停止解析 HTML，而去加载和执行 JavaScript 代码；</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/png/21707377/1638355474986-fcfe3f2e-4f5d-4f15-a54d-e2675b2a9d1b.png#clientId=uf3c6c3d5-c0ad-4&from=paste&id=u3e5fa593&margin=%5Bobject%20Object%5D&name=image.png&originHeight=423&originWidth=974&originalType=binary&ratio=1&size=88111&status=done&style=shadow&taskId=ubeed8532-1dd3-4f68-93fe-5f8e95077d2" alt="image.png"></p><h3 id="那么，JavaScript-代码由谁来执行呢？"><a href="#那么，JavaScript-代码由谁来执行呢？" class="headerlink" title="那么，JavaScript 代码由谁来执行呢？"></a>那么，JavaScript 代码由谁来执行呢？</h3><p><strong>答案是：JavaScript 引擎</strong></p><h1 id="四、认识-JavaScript-引擎"><a href="#四、认识-JavaScript-引擎" class="headerlink" title="四、认识 JavaScript 引擎"></a>四、认识 JavaScript 引擎</h1><h3 id="为什么需要-JavaScript-引擎呢？"><a href="#为什么需要-JavaScript-引擎呢？" class="headerlink" title="为什么需要 JavaScript 引擎呢？"></a>为什么需要 JavaScript 引擎呢？</h3><pre><code>  - 我们前面说过，高级的编程语言都是需要转成最终的机器指令来执行的；  - 事实上我们编写的JavaScript无论你交给浏览器或者Node执行，最后都是需要被CPU执行的；  - 但是CPU只认识自己的指令集，实际上是机器语言，才能被CPU所执行；  - 所以我们需要JavaScript引擎帮助我们将JavaScript代码翻译成CPU指令来执行；</code></pre><h3 id="比较常见的-JavaScript-引擎都有哪些呢？"><a href="#比较常见的-JavaScript-引擎都有哪些呢？" class="headerlink" title="比较常见的 JavaScript 引擎都有哪些呢？"></a>比较常见的 JavaScript 引擎都有哪些呢？</h3><pre><code>  - **SpiderMonkey**：第一款JavaScript引擎，由Brendan Eich开发（也就是JavaScript作者）；  - **Chakra**：微软开发，用于IT浏览器；  - **JavaScriptCore：**WebKit中的JavaScript引擎，Apple公司开发；  - **V8**：Google开发的强大JavaScript引擎，也帮助Chrome从众多浏览器中脱颖而出；  - 等等…</code></pre><h1 id="五、浏览器内核和-JS-引擎的关系"><a href="#五、浏览器内核和-JS-引擎的关系" class="headerlink" title="五、浏览器内核和 JS 引擎的关系"></a>五、浏览器内核和 JS 引擎的关系</h1><h3 id="这里我们先以-WebKit-为例，WebKit-实际上由两部分组成"><a href="#这里我们先以-WebKit-为例，WebKit-实际上由两部分组成" class="headerlink" title="这里我们先以 WebKit 为例，WebKit 实际上由两部分组成"></a>这里我们先以 WebKit 为例，WebKit 实际上由两部分组成</h3><pre><code>  - **WebCore**：负责HTML解析、布局、渲染等等相关的工作；  - **JavaScriptCore**：解析、执行JavaScript代码；</code></pre><h3 id="在小程序中编写的-JavaScript-代码就是被-JSCore-执行的"><a href="#在小程序中编写的-JavaScript-代码就是被-JSCore-执行的" class="headerlink" title="在小程序中编写的 JavaScript 代码就是被 JSCore 执行的"></a>在小程序中编写的 JavaScript 代码就是被 JSCore 执行的</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/21707377/1638358535971-dd52f08a-52fe-4f5a-8e0c-b55f596c26d9.png#clientId=uf3c6c3d5-c0ad-4&from=paste&id=ua8dc05d3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=364&originWidth=979&originalType=binary&ratio=1&size=312584&status=done&style=shadow&taskId=u397563a2-265a-469e-8b4e-60ac1135a3b" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/21707377/1638358568312-3eb9beb4-6655-49e6-ab59-5d4ac1d270d6.png#clientId=uf3c6c3d5-c0ad-4&from=paste&id=u9271a581&margin=%5Bobject%20Object%5D&name=image.png&originHeight=499&originWidth=699&originalType=binary&ratio=1&size=233979&status=done&style=shadow&taskId=u08efab4b-f562-48cb-b3bd-a978c7b0459" alt="image.png"></p><h3 id="另外一个强大的-JavaScript-引擎就是-V8-引擎"><a href="#另外一个强大的-JavaScript-引擎就是-V8-引擎" class="headerlink" title="另外一个强大的 JavaScript 引擎就是 V8 引擎"></a>另外一个强大的 JavaScript 引擎就是 V8 引擎</h3><h1 id="六、V8-引擎原理"><a href="#六、V8-引擎原理" class="headerlink" title="六、V8 引擎原理"></a>六、V8 引擎原理</h1><h3 id="我们来看一下官方对-V8-引擎的定义："><a href="#我们来看一下官方对-V8-引擎的定义：" class="headerlink" title="我们来看一下官方对 V8 引擎的定义："></a>我们来看一下官方对 V8 引擎的定义：</h3><pre><code>  - V8是用C ++编写的Google开源高性能JavaScript和WebAssembly引擎，它用于Chrome和Node.js等。  - 它实现ECMAScript和WebAssembly，并在Windows 7或更高版本，macOS 10.12+和使用x64，IA-32，ARM或MIPS处理器的Linux系统上运行。  - V8可以独立运行，也可以嵌入到任何C ++应用程序中。</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2021/png/21707377/1638358787996-bc995c0b-33ea-453a-a85c-6a4ef2379865.png#clientId=uf3c6c3d5-c0ad-4&from=paste&height=208&id=u1c251b20&margin=%5Bobject%20Object%5D&name=image.png&originHeight=416&originWidth=1700&originalType=binary&ratio=1&size=493669&status=done&style=shadow&taskId=ua6633b86-cd6f-4a20-ad49-adb062bb625&width=850" alt="image.png"></p><h1 id="七、V8-引擎的架构"><a href="#七、V8-引擎的架构" class="headerlink" title="七、V8 引擎的架构"></a>七、V8 引擎的架构</h1><h3 id="V8-引擎本身的源码非常复杂，大概有超过-100w-行-C-代码，通过了解它的架构，我们可以知道它是如何对-JavaScript-执行的："><a href="#V8-引擎本身的源码非常复杂，大概有超过-100w-行-C-代码，通过了解它的架构，我们可以知道它是如何对-JavaScript-执行的：" class="headerlink" title="V8 引擎本身的源码非常复杂，大概有超过 100w 行 C++代码，通过了解它的架构，我们可以知道它是如何对 JavaScript 执行的："></a>V8 引擎本身的源码非常复杂，大概有超过 100w 行 C++代码，通过了解它的架构，我们可以知道它是如何对 JavaScript 执行的：</h3><h4 id="Parse-模块会将-JavaScript-代码转换成-AST（抽象语法树），这是因为解释器并不直接认识-JavaScript-代码；"><a href="#Parse-模块会将-JavaScript-代码转换成-AST（抽象语法树），这是因为解释器并不直接认识-JavaScript-代码；" class="headerlink" title="Parse 模块会将 JavaScript 代码转换成 AST（抽象语法树），这是因为解释器并不直接认识 JavaScript 代码；"></a>Parse 模块会将 JavaScript 代码转换成 AST（抽象语法树），这是因为解释器并不直接认识 JavaScript 代码；</h4><pre><code>  -  如果函数没有被调用，那么是不会被转换成AST的；  -  Parse的V8官方文档：[https://v8.dev/blog/scanner](https://v8.dev/blog/scanner)</code></pre><h4 id="Ignition-是一个解释器，会将-AST-转换成-ByteCode（字节码）"><a href="#Ignition-是一个解释器，会将-AST-转换成-ByteCode（字节码）" class="headerlink" title="Ignition 是一个解释器，会将 AST 转换成 ByteCode（字节码）"></a>Ignition 是一个解释器，会将 AST 转换成 ByteCode（字节码）</h4><pre><code>  -  同时会收集TurboFan优化所需要的信息（比如函数参数的类型信息，有了类型才能进行真实的运算）；  -  如果函数只调用一次，Ignition会执行解释执行ByteCode；  -  Ignition的V8官方文档：[https://v8.dev/blog/ignition-interpreter](https://v8.dev/blog/ignition-interpreter)</code></pre><h4 id="TurboFan-是一个编译器，可以将字节码编译为-CPU-可以直接执行的机器码；"><a href="#TurboFan-是一个编译器，可以将字节码编译为-CPU-可以直接执行的机器码；" class="headerlink" title="TurboFan 是一个编译器，可以将字节码编译为 CPU 可以直接执行的机器码；"></a>TurboFan 是一个编译器，可以将字节码编译为 CPU 可以直接执行的机器码；</h4><pre><code>  -  如果一个函数被多次调用，那么就会被标记为热点函数，那么就会经过TurboFan转换成优化的机器码，提高代码的执行性能；  -  但是，机器码实际上也会被还原为ByteCode，这是因为如果后续执行函数的过程中，类型发生了变化（比如sum函数原来执行的是number类型，后来执行变成了string类型），之前优化的机器码并不能正确的处理运算，就会逆向的转换成字节码；  -  TurboFan的V8官方文档：[https://v8.dev/blog/turbofan-jit](https://v8.dev/blog/turbofan-jit)</code></pre><h1 id="八、V8-引擎的官方解析图"><a href="#八、V8-引擎的官方解析图" class="headerlink" title="八、V8 引擎的官方解析图"></a>八、V8 引擎的官方解析图</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/21707377/1638359184054-b042af71-f4cb-4b9d-ae5d-96e8a99696b6.png#clientId=uf3c6c3d5-c0ad-4&from=paste&height=364&id=ud40fb0cf&margin=%5Bobject%20Object%5D&name=image.png&originHeight=727&originWidth=1543&originalType=binary&ratio=1&size=289493&status=done&style=shadow&taskId=uc2706ba6-dca6-46af-97e6-bf2f265985e&width=771.5" alt="image.png"></p><h1 id="九、V8-执行的细节"><a href="#九、V8-执行的细节" class="headerlink" title="九、V8 执行的细节"></a>九、V8 执行的细节</h1><h3 id="那么我们的-JavaScript-源码是如何被解析（Parse-过程）的呢？"><a href="#那么我们的-JavaScript-源码是如何被解析（Parse-过程）的呢？" class="headerlink" title="那么我们的 JavaScript 源码是如何被解析（Parse 过程）的呢？"></a>那么我们的 JavaScript 源码是如何被解析（Parse 过程）的呢？</h3><ul><li>Blink 将源码交给 V8 引擎，Stream 获取到源码并且进行编码转换；</li><li>Scanner 会进行词法分析（lexical analysis），词法分析会将代码转换成 tokens；</li><li>接下来 tokens 会被转换成 AST 树，经过 Parser 和 PreParser：<ul><li>Parser 就是直接将 tokens 转成 AST 树架构；</li><li>PreParser 称之为预解析，为什么需要预解析呢？ - 这是因为并不是所有的 JavaScript 代码，在一开始时就会被执行。那么对所有的 JavaScript 代码进行解析，必然会<br>影响网页的运行效率； - 所以 V8 引擎就实现了 Lazy Parsing（延迟解析）的方案，它的作用是将不必要的函数进行预解析，也就是只解析暂<br>时需要的内容，而对函数的全量解析是在函数被调用时才会进行； - 比如我们在一个函数 outer 内部定义了另外一个函数 inner，那么 inner 函数就会进行预解析；</li></ul></li><li>生成 AST 树后，会被 Ignition 转成字节码（bytecode），之后的过程就是代码的执行过程（后续会详细分析）。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
